
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Casing` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Casing
 * 
 */
export type CasingModel = runtime.Types.Result.DefaultSelection<Prisma.$CasingPayload>

export type AggregateCasing = {
  _count: CasingCountAggregateOutputType | null
  _avg: CasingAvgAggregateOutputType | null
  _sum: CasingSumAggregateOutputType | null
  _min: CasingMinAggregateOutputType | null
  _max: CasingMaxAggregateOutputType | null
}

export type CasingAvgAggregateOutputType = {
  topDepth: number | null
  bottomDepth: number | null
  joints: number | null
}

export type CasingSumAggregateOutputType = {
  topDepth: number | null
  bottomDepth: number | null
  joints: number | null
}

export type CasingMinAggregateOutputType = {
  id: string | null
  api: string | null
  casingEnumId: string | null
  topDepth: number | null
  bottomDepth: number | null
  joints: number | null
  centralizer: boolean | null
  shortJtTop: boolean | null
}

export type CasingMaxAggregateOutputType = {
  id: string | null
  api: string | null
  casingEnumId: string | null
  topDepth: number | null
  bottomDepth: number | null
  joints: number | null
  centralizer: boolean | null
  shortJtTop: boolean | null
}

export type CasingCountAggregateOutputType = {
  id: number
  api: number
  casingEnumId: number
  topDepth: number
  bottomDepth: number
  joints: number
  centralizer: number
  shortJtTop: number
  _all: number
}


export type CasingAvgAggregateInputType = {
  topDepth?: true
  bottomDepth?: true
  joints?: true
}

export type CasingSumAggregateInputType = {
  topDepth?: true
  bottomDepth?: true
  joints?: true
}

export type CasingMinAggregateInputType = {
  id?: true
  api?: true
  casingEnumId?: true
  topDepth?: true
  bottomDepth?: true
  joints?: true
  centralizer?: true
  shortJtTop?: true
}

export type CasingMaxAggregateInputType = {
  id?: true
  api?: true
  casingEnumId?: true
  topDepth?: true
  bottomDepth?: true
  joints?: true
  centralizer?: true
  shortJtTop?: true
}

export type CasingCountAggregateInputType = {
  id?: true
  api?: true
  casingEnumId?: true
  topDepth?: true
  bottomDepth?: true
  joints?: true
  centralizer?: true
  shortJtTop?: true
  _all?: true
}

export type CasingAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Casing to aggregate.
   */
  where?: Prisma.CasingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Casings to fetch.
   */
  orderBy?: Prisma.CasingOrderByWithRelationInput | Prisma.CasingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CasingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Casings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Casings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Casings
  **/
  _count?: true | CasingCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CasingAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CasingSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CasingMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CasingMaxAggregateInputType
}

export type GetCasingAggregateType<T extends CasingAggregateArgs> = {
      [P in keyof T & keyof AggregateCasing]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCasing[P]>
    : Prisma.GetScalarType<T[P], AggregateCasing[P]>
}




export type CasingGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CasingWhereInput
  orderBy?: Prisma.CasingOrderByWithAggregationInput | Prisma.CasingOrderByWithAggregationInput[]
  by: Prisma.CasingScalarFieldEnum[] | Prisma.CasingScalarFieldEnum
  having?: Prisma.CasingScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CasingCountAggregateInputType | true
  _avg?: CasingAvgAggregateInputType
  _sum?: CasingSumAggregateInputType
  _min?: CasingMinAggregateInputType
  _max?: CasingMaxAggregateInputType
}

export type CasingGroupByOutputType = {
  id: string
  api: string
  casingEnumId: string
  topDepth: number
  bottomDepth: number
  joints: number | null
  centralizer: boolean | null
  shortJtTop: boolean | null
  _count: CasingCountAggregateOutputType | null
  _avg: CasingAvgAggregateOutputType | null
  _sum: CasingSumAggregateOutputType | null
  _min: CasingMinAggregateOutputType | null
  _max: CasingMaxAggregateOutputType | null
}

type GetCasingGroupByPayload<T extends CasingGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CasingGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CasingGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CasingGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CasingGroupByOutputType[P]>
      }
    >
  >



export type CasingWhereInput = {
  AND?: Prisma.CasingWhereInput | Prisma.CasingWhereInput[]
  OR?: Prisma.CasingWhereInput[]
  NOT?: Prisma.CasingWhereInput | Prisma.CasingWhereInput[]
  id?: Prisma.StringFilter<"Casing"> | string
  api?: Prisma.StringFilter<"Casing"> | string
  casingEnumId?: Prisma.StringFilter<"Casing"> | string
  topDepth?: Prisma.IntFilter<"Casing"> | number
  bottomDepth?: Prisma.IntFilter<"Casing"> | number
  joints?: Prisma.IntNullableFilter<"Casing"> | number | null
  centralizer?: Prisma.BoolNullableFilter<"Casing"> | boolean | null
  shortJtTop?: Prisma.BoolNullableFilter<"Casing"> | boolean | null
  casingEnum?: Prisma.XOR<Prisma.CasingEnumScalarRelationFilter, Prisma.CasingEnumWhereInput>
  well?: Prisma.XOR<Prisma.WellScalarRelationFilter, Prisma.WellWhereInput>
}

export type CasingOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  casingEnumId?: Prisma.SortOrder
  topDepth?: Prisma.SortOrder
  bottomDepth?: Prisma.SortOrder
  joints?: Prisma.SortOrderInput | Prisma.SortOrder
  centralizer?: Prisma.SortOrderInput | Prisma.SortOrder
  shortJtTop?: Prisma.SortOrderInput | Prisma.SortOrder
  casingEnum?: Prisma.CasingEnumOrderByWithRelationInput
  well?: Prisma.WellOrderByWithRelationInput
}

export type CasingWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.CasingWhereInput | Prisma.CasingWhereInput[]
  OR?: Prisma.CasingWhereInput[]
  NOT?: Prisma.CasingWhereInput | Prisma.CasingWhereInput[]
  api?: Prisma.StringFilter<"Casing"> | string
  casingEnumId?: Prisma.StringFilter<"Casing"> | string
  topDepth?: Prisma.IntFilter<"Casing"> | number
  bottomDepth?: Prisma.IntFilter<"Casing"> | number
  joints?: Prisma.IntNullableFilter<"Casing"> | number | null
  centralizer?: Prisma.BoolNullableFilter<"Casing"> | boolean | null
  shortJtTop?: Prisma.BoolNullableFilter<"Casing"> | boolean | null
  casingEnum?: Prisma.XOR<Prisma.CasingEnumScalarRelationFilter, Prisma.CasingEnumWhereInput>
  well?: Prisma.XOR<Prisma.WellScalarRelationFilter, Prisma.WellWhereInput>
}, "id">

export type CasingOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  casingEnumId?: Prisma.SortOrder
  topDepth?: Prisma.SortOrder
  bottomDepth?: Prisma.SortOrder
  joints?: Prisma.SortOrderInput | Prisma.SortOrder
  centralizer?: Prisma.SortOrderInput | Prisma.SortOrder
  shortJtTop?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.CasingCountOrderByAggregateInput
  _avg?: Prisma.CasingAvgOrderByAggregateInput
  _max?: Prisma.CasingMaxOrderByAggregateInput
  _min?: Prisma.CasingMinOrderByAggregateInput
  _sum?: Prisma.CasingSumOrderByAggregateInput
}

export type CasingScalarWhereWithAggregatesInput = {
  AND?: Prisma.CasingScalarWhereWithAggregatesInput | Prisma.CasingScalarWhereWithAggregatesInput[]
  OR?: Prisma.CasingScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CasingScalarWhereWithAggregatesInput | Prisma.CasingScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Casing"> | string
  api?: Prisma.StringWithAggregatesFilter<"Casing"> | string
  casingEnumId?: Prisma.StringWithAggregatesFilter<"Casing"> | string
  topDepth?: Prisma.IntWithAggregatesFilter<"Casing"> | number
  bottomDepth?: Prisma.IntWithAggregatesFilter<"Casing"> | number
  joints?: Prisma.IntNullableWithAggregatesFilter<"Casing"> | number | null
  centralizer?: Prisma.BoolNullableWithAggregatesFilter<"Casing"> | boolean | null
  shortJtTop?: Prisma.BoolNullableWithAggregatesFilter<"Casing"> | boolean | null
}

export type CasingCreateInput = {
  id?: string
  topDepth: number
  bottomDepth: number
  joints?: number | null
  centralizer?: boolean | null
  shortJtTop?: boolean | null
  casingEnum: Prisma.CasingEnumCreateNestedOneWithoutCasingsInput
  well: Prisma.WellCreateNestedOneWithoutCasingsInput
}

export type CasingUncheckedCreateInput = {
  id?: string
  api: string
  casingEnumId: string
  topDepth: number
  bottomDepth: number
  joints?: number | null
  centralizer?: boolean | null
  shortJtTop?: boolean | null
}

export type CasingUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  topDepth?: Prisma.IntFieldUpdateOperationsInput | number
  bottomDepth?: Prisma.IntFieldUpdateOperationsInput | number
  joints?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  centralizer?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  shortJtTop?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  casingEnum?: Prisma.CasingEnumUpdateOneRequiredWithoutCasingsNestedInput
  well?: Prisma.WellUpdateOneRequiredWithoutCasingsNestedInput
}

export type CasingUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  api?: Prisma.StringFieldUpdateOperationsInput | string
  casingEnumId?: Prisma.StringFieldUpdateOperationsInput | string
  topDepth?: Prisma.IntFieldUpdateOperationsInput | number
  bottomDepth?: Prisma.IntFieldUpdateOperationsInput | number
  joints?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  centralizer?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  shortJtTop?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type CasingCreateManyInput = {
  id?: string
  api: string
  casingEnumId: string
  topDepth: number
  bottomDepth: number
  joints?: number | null
  centralizer?: boolean | null
  shortJtTop?: boolean | null
}

export type CasingUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  topDepth?: Prisma.IntFieldUpdateOperationsInput | number
  bottomDepth?: Prisma.IntFieldUpdateOperationsInput | number
  joints?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  centralizer?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  shortJtTop?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type CasingUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  api?: Prisma.StringFieldUpdateOperationsInput | string
  casingEnumId?: Prisma.StringFieldUpdateOperationsInput | string
  topDepth?: Prisma.IntFieldUpdateOperationsInput | number
  bottomDepth?: Prisma.IntFieldUpdateOperationsInput | number
  joints?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  centralizer?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  shortJtTop?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type CasingCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  casingEnumId?: Prisma.SortOrder
  topDepth?: Prisma.SortOrder
  bottomDepth?: Prisma.SortOrder
  joints?: Prisma.SortOrder
  centralizer?: Prisma.SortOrder
  shortJtTop?: Prisma.SortOrder
}

export type CasingAvgOrderByAggregateInput = {
  topDepth?: Prisma.SortOrder
  bottomDepth?: Prisma.SortOrder
  joints?: Prisma.SortOrder
}

export type CasingMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  casingEnumId?: Prisma.SortOrder
  topDepth?: Prisma.SortOrder
  bottomDepth?: Prisma.SortOrder
  joints?: Prisma.SortOrder
  centralizer?: Prisma.SortOrder
  shortJtTop?: Prisma.SortOrder
}

export type CasingMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  casingEnumId?: Prisma.SortOrder
  topDepth?: Prisma.SortOrder
  bottomDepth?: Prisma.SortOrder
  joints?: Prisma.SortOrder
  centralizer?: Prisma.SortOrder
  shortJtTop?: Prisma.SortOrder
}

export type CasingSumOrderByAggregateInput = {
  topDepth?: Prisma.SortOrder
  bottomDepth?: Prisma.SortOrder
  joints?: Prisma.SortOrder
}

export type CasingListRelationFilter = {
  every?: Prisma.CasingWhereInput
  some?: Prisma.CasingWhereInput
  none?: Prisma.CasingWhereInput
}

export type CasingOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableBoolFieldUpdateOperationsInput = {
  set?: boolean | null
}

export type CasingCreateNestedManyWithoutCasingEnumInput = {
  create?: Prisma.XOR<Prisma.CasingCreateWithoutCasingEnumInput, Prisma.CasingUncheckedCreateWithoutCasingEnumInput> | Prisma.CasingCreateWithoutCasingEnumInput[] | Prisma.CasingUncheckedCreateWithoutCasingEnumInput[]
  connectOrCreate?: Prisma.CasingCreateOrConnectWithoutCasingEnumInput | Prisma.CasingCreateOrConnectWithoutCasingEnumInput[]
  createMany?: Prisma.CasingCreateManyCasingEnumInputEnvelope
  connect?: Prisma.CasingWhereUniqueInput | Prisma.CasingWhereUniqueInput[]
}

export type CasingUncheckedCreateNestedManyWithoutCasingEnumInput = {
  create?: Prisma.XOR<Prisma.CasingCreateWithoutCasingEnumInput, Prisma.CasingUncheckedCreateWithoutCasingEnumInput> | Prisma.CasingCreateWithoutCasingEnumInput[] | Prisma.CasingUncheckedCreateWithoutCasingEnumInput[]
  connectOrCreate?: Prisma.CasingCreateOrConnectWithoutCasingEnumInput | Prisma.CasingCreateOrConnectWithoutCasingEnumInput[]
  createMany?: Prisma.CasingCreateManyCasingEnumInputEnvelope
  connect?: Prisma.CasingWhereUniqueInput | Prisma.CasingWhereUniqueInput[]
}

export type CasingUpdateManyWithoutCasingEnumNestedInput = {
  create?: Prisma.XOR<Prisma.CasingCreateWithoutCasingEnumInput, Prisma.CasingUncheckedCreateWithoutCasingEnumInput> | Prisma.CasingCreateWithoutCasingEnumInput[] | Prisma.CasingUncheckedCreateWithoutCasingEnumInput[]
  connectOrCreate?: Prisma.CasingCreateOrConnectWithoutCasingEnumInput | Prisma.CasingCreateOrConnectWithoutCasingEnumInput[]
  upsert?: Prisma.CasingUpsertWithWhereUniqueWithoutCasingEnumInput | Prisma.CasingUpsertWithWhereUniqueWithoutCasingEnumInput[]
  createMany?: Prisma.CasingCreateManyCasingEnumInputEnvelope
  set?: Prisma.CasingWhereUniqueInput | Prisma.CasingWhereUniqueInput[]
  disconnect?: Prisma.CasingWhereUniqueInput | Prisma.CasingWhereUniqueInput[]
  delete?: Prisma.CasingWhereUniqueInput | Prisma.CasingWhereUniqueInput[]
  connect?: Prisma.CasingWhereUniqueInput | Prisma.CasingWhereUniqueInput[]
  update?: Prisma.CasingUpdateWithWhereUniqueWithoutCasingEnumInput | Prisma.CasingUpdateWithWhereUniqueWithoutCasingEnumInput[]
  updateMany?: Prisma.CasingUpdateManyWithWhereWithoutCasingEnumInput | Prisma.CasingUpdateManyWithWhereWithoutCasingEnumInput[]
  deleteMany?: Prisma.CasingScalarWhereInput | Prisma.CasingScalarWhereInput[]
}

export type CasingUncheckedUpdateManyWithoutCasingEnumNestedInput = {
  create?: Prisma.XOR<Prisma.CasingCreateWithoutCasingEnumInput, Prisma.CasingUncheckedCreateWithoutCasingEnumInput> | Prisma.CasingCreateWithoutCasingEnumInput[] | Prisma.CasingUncheckedCreateWithoutCasingEnumInput[]
  connectOrCreate?: Prisma.CasingCreateOrConnectWithoutCasingEnumInput | Prisma.CasingCreateOrConnectWithoutCasingEnumInput[]
  upsert?: Prisma.CasingUpsertWithWhereUniqueWithoutCasingEnumInput | Prisma.CasingUpsertWithWhereUniqueWithoutCasingEnumInput[]
  createMany?: Prisma.CasingCreateManyCasingEnumInputEnvelope
  set?: Prisma.CasingWhereUniqueInput | Prisma.CasingWhereUniqueInput[]
  disconnect?: Prisma.CasingWhereUniqueInput | Prisma.CasingWhereUniqueInput[]
  delete?: Prisma.CasingWhereUniqueInput | Prisma.CasingWhereUniqueInput[]
  connect?: Prisma.CasingWhereUniqueInput | Prisma.CasingWhereUniqueInput[]
  update?: Prisma.CasingUpdateWithWhereUniqueWithoutCasingEnumInput | Prisma.CasingUpdateWithWhereUniqueWithoutCasingEnumInput[]
  updateMany?: Prisma.CasingUpdateManyWithWhereWithoutCasingEnumInput | Prisma.CasingUpdateManyWithWhereWithoutCasingEnumInput[]
  deleteMany?: Prisma.CasingScalarWhereInput | Prisma.CasingScalarWhereInput[]
}

export type CasingCreateNestedManyWithoutWellInput = {
  create?: Prisma.XOR<Prisma.CasingCreateWithoutWellInput, Prisma.CasingUncheckedCreateWithoutWellInput> | Prisma.CasingCreateWithoutWellInput[] | Prisma.CasingUncheckedCreateWithoutWellInput[]
  connectOrCreate?: Prisma.CasingCreateOrConnectWithoutWellInput | Prisma.CasingCreateOrConnectWithoutWellInput[]
  createMany?: Prisma.CasingCreateManyWellInputEnvelope
  connect?: Prisma.CasingWhereUniqueInput | Prisma.CasingWhereUniqueInput[]
}

export type CasingUncheckedCreateNestedManyWithoutWellInput = {
  create?: Prisma.XOR<Prisma.CasingCreateWithoutWellInput, Prisma.CasingUncheckedCreateWithoutWellInput> | Prisma.CasingCreateWithoutWellInput[] | Prisma.CasingUncheckedCreateWithoutWellInput[]
  connectOrCreate?: Prisma.CasingCreateOrConnectWithoutWellInput | Prisma.CasingCreateOrConnectWithoutWellInput[]
  createMany?: Prisma.CasingCreateManyWellInputEnvelope
  connect?: Prisma.CasingWhereUniqueInput | Prisma.CasingWhereUniqueInput[]
}

export type CasingUpdateManyWithoutWellNestedInput = {
  create?: Prisma.XOR<Prisma.CasingCreateWithoutWellInput, Prisma.CasingUncheckedCreateWithoutWellInput> | Prisma.CasingCreateWithoutWellInput[] | Prisma.CasingUncheckedCreateWithoutWellInput[]
  connectOrCreate?: Prisma.CasingCreateOrConnectWithoutWellInput | Prisma.CasingCreateOrConnectWithoutWellInput[]
  upsert?: Prisma.CasingUpsertWithWhereUniqueWithoutWellInput | Prisma.CasingUpsertWithWhereUniqueWithoutWellInput[]
  createMany?: Prisma.CasingCreateManyWellInputEnvelope
  set?: Prisma.CasingWhereUniqueInput | Prisma.CasingWhereUniqueInput[]
  disconnect?: Prisma.CasingWhereUniqueInput | Prisma.CasingWhereUniqueInput[]
  delete?: Prisma.CasingWhereUniqueInput | Prisma.CasingWhereUniqueInput[]
  connect?: Prisma.CasingWhereUniqueInput | Prisma.CasingWhereUniqueInput[]
  update?: Prisma.CasingUpdateWithWhereUniqueWithoutWellInput | Prisma.CasingUpdateWithWhereUniqueWithoutWellInput[]
  updateMany?: Prisma.CasingUpdateManyWithWhereWithoutWellInput | Prisma.CasingUpdateManyWithWhereWithoutWellInput[]
  deleteMany?: Prisma.CasingScalarWhereInput | Prisma.CasingScalarWhereInput[]
}

export type CasingUncheckedUpdateManyWithoutWellNestedInput = {
  create?: Prisma.XOR<Prisma.CasingCreateWithoutWellInput, Prisma.CasingUncheckedCreateWithoutWellInput> | Prisma.CasingCreateWithoutWellInput[] | Prisma.CasingUncheckedCreateWithoutWellInput[]
  connectOrCreate?: Prisma.CasingCreateOrConnectWithoutWellInput | Prisma.CasingCreateOrConnectWithoutWellInput[]
  upsert?: Prisma.CasingUpsertWithWhereUniqueWithoutWellInput | Prisma.CasingUpsertWithWhereUniqueWithoutWellInput[]
  createMany?: Prisma.CasingCreateManyWellInputEnvelope
  set?: Prisma.CasingWhereUniqueInput | Prisma.CasingWhereUniqueInput[]
  disconnect?: Prisma.CasingWhereUniqueInput | Prisma.CasingWhereUniqueInput[]
  delete?: Prisma.CasingWhereUniqueInput | Prisma.CasingWhereUniqueInput[]
  connect?: Prisma.CasingWhereUniqueInput | Prisma.CasingWhereUniqueInput[]
  update?: Prisma.CasingUpdateWithWhereUniqueWithoutWellInput | Prisma.CasingUpdateWithWhereUniqueWithoutWellInput[]
  updateMany?: Prisma.CasingUpdateManyWithWhereWithoutWellInput | Prisma.CasingUpdateManyWithWhereWithoutWellInput[]
  deleteMany?: Prisma.CasingScalarWhereInput | Prisma.CasingScalarWhereInput[]
}

export type CasingCreateWithoutCasingEnumInput = {
  id?: string
  topDepth: number
  bottomDepth: number
  joints?: number | null
  centralizer?: boolean | null
  shortJtTop?: boolean | null
  well: Prisma.WellCreateNestedOneWithoutCasingsInput
}

export type CasingUncheckedCreateWithoutCasingEnumInput = {
  id?: string
  api: string
  topDepth: number
  bottomDepth: number
  joints?: number | null
  centralizer?: boolean | null
  shortJtTop?: boolean | null
}

export type CasingCreateOrConnectWithoutCasingEnumInput = {
  where: Prisma.CasingWhereUniqueInput
  create: Prisma.XOR<Prisma.CasingCreateWithoutCasingEnumInput, Prisma.CasingUncheckedCreateWithoutCasingEnumInput>
}

export type CasingCreateManyCasingEnumInputEnvelope = {
  data: Prisma.CasingCreateManyCasingEnumInput | Prisma.CasingCreateManyCasingEnumInput[]
}

export type CasingUpsertWithWhereUniqueWithoutCasingEnumInput = {
  where: Prisma.CasingWhereUniqueInput
  update: Prisma.XOR<Prisma.CasingUpdateWithoutCasingEnumInput, Prisma.CasingUncheckedUpdateWithoutCasingEnumInput>
  create: Prisma.XOR<Prisma.CasingCreateWithoutCasingEnumInput, Prisma.CasingUncheckedCreateWithoutCasingEnumInput>
}

export type CasingUpdateWithWhereUniqueWithoutCasingEnumInput = {
  where: Prisma.CasingWhereUniqueInput
  data: Prisma.XOR<Prisma.CasingUpdateWithoutCasingEnumInput, Prisma.CasingUncheckedUpdateWithoutCasingEnumInput>
}

export type CasingUpdateManyWithWhereWithoutCasingEnumInput = {
  where: Prisma.CasingScalarWhereInput
  data: Prisma.XOR<Prisma.CasingUpdateManyMutationInput, Prisma.CasingUncheckedUpdateManyWithoutCasingEnumInput>
}

export type CasingScalarWhereInput = {
  AND?: Prisma.CasingScalarWhereInput | Prisma.CasingScalarWhereInput[]
  OR?: Prisma.CasingScalarWhereInput[]
  NOT?: Prisma.CasingScalarWhereInput | Prisma.CasingScalarWhereInput[]
  id?: Prisma.StringFilter<"Casing"> | string
  api?: Prisma.StringFilter<"Casing"> | string
  casingEnumId?: Prisma.StringFilter<"Casing"> | string
  topDepth?: Prisma.IntFilter<"Casing"> | number
  bottomDepth?: Prisma.IntFilter<"Casing"> | number
  joints?: Prisma.IntNullableFilter<"Casing"> | number | null
  centralizer?: Prisma.BoolNullableFilter<"Casing"> | boolean | null
  shortJtTop?: Prisma.BoolNullableFilter<"Casing"> | boolean | null
}

export type CasingCreateWithoutWellInput = {
  id?: string
  topDepth: number
  bottomDepth: number
  joints?: number | null
  centralizer?: boolean | null
  shortJtTop?: boolean | null
  casingEnum: Prisma.CasingEnumCreateNestedOneWithoutCasingsInput
}

export type CasingUncheckedCreateWithoutWellInput = {
  id?: string
  casingEnumId: string
  topDepth: number
  bottomDepth: number
  joints?: number | null
  centralizer?: boolean | null
  shortJtTop?: boolean | null
}

export type CasingCreateOrConnectWithoutWellInput = {
  where: Prisma.CasingWhereUniqueInput
  create: Prisma.XOR<Prisma.CasingCreateWithoutWellInput, Prisma.CasingUncheckedCreateWithoutWellInput>
}

export type CasingCreateManyWellInputEnvelope = {
  data: Prisma.CasingCreateManyWellInput | Prisma.CasingCreateManyWellInput[]
}

export type CasingUpsertWithWhereUniqueWithoutWellInput = {
  where: Prisma.CasingWhereUniqueInput
  update: Prisma.XOR<Prisma.CasingUpdateWithoutWellInput, Prisma.CasingUncheckedUpdateWithoutWellInput>
  create: Prisma.XOR<Prisma.CasingCreateWithoutWellInput, Prisma.CasingUncheckedCreateWithoutWellInput>
}

export type CasingUpdateWithWhereUniqueWithoutWellInput = {
  where: Prisma.CasingWhereUniqueInput
  data: Prisma.XOR<Prisma.CasingUpdateWithoutWellInput, Prisma.CasingUncheckedUpdateWithoutWellInput>
}

export type CasingUpdateManyWithWhereWithoutWellInput = {
  where: Prisma.CasingScalarWhereInput
  data: Prisma.XOR<Prisma.CasingUpdateManyMutationInput, Prisma.CasingUncheckedUpdateManyWithoutWellInput>
}

export type CasingCreateManyCasingEnumInput = {
  id?: string
  api: string
  topDepth: number
  bottomDepth: number
  joints?: number | null
  centralizer?: boolean | null
  shortJtTop?: boolean | null
}

export type CasingUpdateWithoutCasingEnumInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  topDepth?: Prisma.IntFieldUpdateOperationsInput | number
  bottomDepth?: Prisma.IntFieldUpdateOperationsInput | number
  joints?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  centralizer?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  shortJtTop?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  well?: Prisma.WellUpdateOneRequiredWithoutCasingsNestedInput
}

export type CasingUncheckedUpdateWithoutCasingEnumInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  api?: Prisma.StringFieldUpdateOperationsInput | string
  topDepth?: Prisma.IntFieldUpdateOperationsInput | number
  bottomDepth?: Prisma.IntFieldUpdateOperationsInput | number
  joints?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  centralizer?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  shortJtTop?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type CasingUncheckedUpdateManyWithoutCasingEnumInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  api?: Prisma.StringFieldUpdateOperationsInput | string
  topDepth?: Prisma.IntFieldUpdateOperationsInput | number
  bottomDepth?: Prisma.IntFieldUpdateOperationsInput | number
  joints?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  centralizer?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  shortJtTop?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type CasingCreateManyWellInput = {
  id?: string
  casingEnumId: string
  topDepth: number
  bottomDepth: number
  joints?: number | null
  centralizer?: boolean | null
  shortJtTop?: boolean | null
}

export type CasingUpdateWithoutWellInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  topDepth?: Prisma.IntFieldUpdateOperationsInput | number
  bottomDepth?: Prisma.IntFieldUpdateOperationsInput | number
  joints?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  centralizer?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  shortJtTop?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  casingEnum?: Prisma.CasingEnumUpdateOneRequiredWithoutCasingsNestedInput
}

export type CasingUncheckedUpdateWithoutWellInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  casingEnumId?: Prisma.StringFieldUpdateOperationsInput | string
  topDepth?: Prisma.IntFieldUpdateOperationsInput | number
  bottomDepth?: Prisma.IntFieldUpdateOperationsInput | number
  joints?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  centralizer?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  shortJtTop?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type CasingUncheckedUpdateManyWithoutWellInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  casingEnumId?: Prisma.StringFieldUpdateOperationsInput | string
  topDepth?: Prisma.IntFieldUpdateOperationsInput | number
  bottomDepth?: Prisma.IntFieldUpdateOperationsInput | number
  joints?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  centralizer?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  shortJtTop?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}



export type CasingSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  api?: boolean
  casingEnumId?: boolean
  topDepth?: boolean
  bottomDepth?: boolean
  joints?: boolean
  centralizer?: boolean
  shortJtTop?: boolean
  casingEnum?: boolean | Prisma.CasingEnumDefaultArgs<ExtArgs>
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}, ExtArgs["result"]["casing"]>

export type CasingSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  api?: boolean
  casingEnumId?: boolean
  topDepth?: boolean
  bottomDepth?: boolean
  joints?: boolean
  centralizer?: boolean
  shortJtTop?: boolean
  casingEnum?: boolean | Prisma.CasingEnumDefaultArgs<ExtArgs>
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}, ExtArgs["result"]["casing"]>

export type CasingSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  api?: boolean
  casingEnumId?: boolean
  topDepth?: boolean
  bottomDepth?: boolean
  joints?: boolean
  centralizer?: boolean
  shortJtTop?: boolean
  casingEnum?: boolean | Prisma.CasingEnumDefaultArgs<ExtArgs>
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}, ExtArgs["result"]["casing"]>

export type CasingSelectScalar = {
  id?: boolean
  api?: boolean
  casingEnumId?: boolean
  topDepth?: boolean
  bottomDepth?: boolean
  joints?: boolean
  centralizer?: boolean
  shortJtTop?: boolean
}

export type CasingOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "api" | "casingEnumId" | "topDepth" | "bottomDepth" | "joints" | "centralizer" | "shortJtTop", ExtArgs["result"]["casing"]>
export type CasingInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  casingEnum?: boolean | Prisma.CasingEnumDefaultArgs<ExtArgs>
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}
export type CasingIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  casingEnum?: boolean | Prisma.CasingEnumDefaultArgs<ExtArgs>
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}
export type CasingIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  casingEnum?: boolean | Prisma.CasingEnumDefaultArgs<ExtArgs>
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}

export type $CasingPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Casing"
  objects: {
    casingEnum: Prisma.$CasingEnumPayload<ExtArgs>
    well: Prisma.$WellPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    api: string
    casingEnumId: string
    topDepth: number
    bottomDepth: number
    joints: number | null
    centralizer: boolean | null
    shortJtTop: boolean | null
  }, ExtArgs["result"]["casing"]>
  composites: {}
}

export type CasingGetPayload<S extends boolean | null | undefined | CasingDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CasingPayload, S>

export type CasingCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CasingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CasingCountAggregateInputType | true
  }

export interface CasingDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Casing'], meta: { name: 'Casing' } }
  /**
   * Find zero or one Casing that matches the filter.
   * @param {CasingFindUniqueArgs} args - Arguments to find a Casing
   * @example
   * // Get one Casing
   * const casing = await prisma.casing.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CasingFindUniqueArgs>(args: Prisma.SelectSubset<T, CasingFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CasingClient<runtime.Types.Result.GetResult<Prisma.$CasingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Casing that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CasingFindUniqueOrThrowArgs} args - Arguments to find a Casing
   * @example
   * // Get one Casing
   * const casing = await prisma.casing.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CasingFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CasingFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CasingClient<runtime.Types.Result.GetResult<Prisma.$CasingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Casing that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CasingFindFirstArgs} args - Arguments to find a Casing
   * @example
   * // Get one Casing
   * const casing = await prisma.casing.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CasingFindFirstArgs>(args?: Prisma.SelectSubset<T, CasingFindFirstArgs<ExtArgs>>): Prisma.Prisma__CasingClient<runtime.Types.Result.GetResult<Prisma.$CasingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Casing that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CasingFindFirstOrThrowArgs} args - Arguments to find a Casing
   * @example
   * // Get one Casing
   * const casing = await prisma.casing.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CasingFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CasingFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CasingClient<runtime.Types.Result.GetResult<Prisma.$CasingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Casings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CasingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Casings
   * const casings = await prisma.casing.findMany()
   * 
   * // Get first 10 Casings
   * const casings = await prisma.casing.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const casingWithIdOnly = await prisma.casing.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CasingFindManyArgs>(args?: Prisma.SelectSubset<T, CasingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CasingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Casing.
   * @param {CasingCreateArgs} args - Arguments to create a Casing.
   * @example
   * // Create one Casing
   * const Casing = await prisma.casing.create({
   *   data: {
   *     // ... data to create a Casing
   *   }
   * })
   * 
   */
  create<T extends CasingCreateArgs>(args: Prisma.SelectSubset<T, CasingCreateArgs<ExtArgs>>): Prisma.Prisma__CasingClient<runtime.Types.Result.GetResult<Prisma.$CasingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Casings.
   * @param {CasingCreateManyArgs} args - Arguments to create many Casings.
   * @example
   * // Create many Casings
   * const casing = await prisma.casing.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CasingCreateManyArgs>(args?: Prisma.SelectSubset<T, CasingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Casings and returns the data saved in the database.
   * @param {CasingCreateManyAndReturnArgs} args - Arguments to create many Casings.
   * @example
   * // Create many Casings
   * const casing = await prisma.casing.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Casings and only return the `id`
   * const casingWithIdOnly = await prisma.casing.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CasingCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CasingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CasingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Casing.
   * @param {CasingDeleteArgs} args - Arguments to delete one Casing.
   * @example
   * // Delete one Casing
   * const Casing = await prisma.casing.delete({
   *   where: {
   *     // ... filter to delete one Casing
   *   }
   * })
   * 
   */
  delete<T extends CasingDeleteArgs>(args: Prisma.SelectSubset<T, CasingDeleteArgs<ExtArgs>>): Prisma.Prisma__CasingClient<runtime.Types.Result.GetResult<Prisma.$CasingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Casing.
   * @param {CasingUpdateArgs} args - Arguments to update one Casing.
   * @example
   * // Update one Casing
   * const casing = await prisma.casing.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CasingUpdateArgs>(args: Prisma.SelectSubset<T, CasingUpdateArgs<ExtArgs>>): Prisma.Prisma__CasingClient<runtime.Types.Result.GetResult<Prisma.$CasingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Casings.
   * @param {CasingDeleteManyArgs} args - Arguments to filter Casings to delete.
   * @example
   * // Delete a few Casings
   * const { count } = await prisma.casing.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CasingDeleteManyArgs>(args?: Prisma.SelectSubset<T, CasingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Casings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CasingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Casings
   * const casing = await prisma.casing.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CasingUpdateManyArgs>(args: Prisma.SelectSubset<T, CasingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Casings and returns the data updated in the database.
   * @param {CasingUpdateManyAndReturnArgs} args - Arguments to update many Casings.
   * @example
   * // Update many Casings
   * const casing = await prisma.casing.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Casings and only return the `id`
   * const casingWithIdOnly = await prisma.casing.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CasingUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CasingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CasingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Casing.
   * @param {CasingUpsertArgs} args - Arguments to update or create a Casing.
   * @example
   * // Update or create a Casing
   * const casing = await prisma.casing.upsert({
   *   create: {
   *     // ... data to create a Casing
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Casing we want to update
   *   }
   * })
   */
  upsert<T extends CasingUpsertArgs>(args: Prisma.SelectSubset<T, CasingUpsertArgs<ExtArgs>>): Prisma.Prisma__CasingClient<runtime.Types.Result.GetResult<Prisma.$CasingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Casings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CasingCountArgs} args - Arguments to filter Casings to count.
   * @example
   * // Count the number of Casings
   * const count = await prisma.casing.count({
   *   where: {
   *     // ... the filter for the Casings we want to count
   *   }
   * })
  **/
  count<T extends CasingCountArgs>(
    args?: Prisma.Subset<T, CasingCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CasingCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Casing.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CasingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CasingAggregateArgs>(args: Prisma.Subset<T, CasingAggregateArgs>): Prisma.PrismaPromise<GetCasingAggregateType<T>>

  /**
   * Group by Casing.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CasingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CasingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CasingGroupByArgs['orderBy'] }
      : { orderBy?: CasingGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CasingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCasingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Casing model
 */
readonly fields: CasingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Casing.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CasingClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  casingEnum<T extends Prisma.CasingEnumDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CasingEnumDefaultArgs<ExtArgs>>): Prisma.Prisma__CasingEnumClient<runtime.Types.Result.GetResult<Prisma.$CasingEnumPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  well<T extends Prisma.WellDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WellDefaultArgs<ExtArgs>>): Prisma.Prisma__WellClient<runtime.Types.Result.GetResult<Prisma.$WellPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Casing model
 */
export interface CasingFieldRefs {
  readonly id: Prisma.FieldRef<"Casing", 'String'>
  readonly api: Prisma.FieldRef<"Casing", 'String'>
  readonly casingEnumId: Prisma.FieldRef<"Casing", 'String'>
  readonly topDepth: Prisma.FieldRef<"Casing", 'Int'>
  readonly bottomDepth: Prisma.FieldRef<"Casing", 'Int'>
  readonly joints: Prisma.FieldRef<"Casing", 'Int'>
  readonly centralizer: Prisma.FieldRef<"Casing", 'Boolean'>
  readonly shortJtTop: Prisma.FieldRef<"Casing", 'Boolean'>
}
    

// Custom InputTypes
/**
 * Casing findUnique
 */
export type CasingFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Casing
   */
  select?: Prisma.CasingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Casing
   */
  omit?: Prisma.CasingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CasingInclude<ExtArgs> | null
  /**
   * Filter, which Casing to fetch.
   */
  where: Prisma.CasingWhereUniqueInput
}

/**
 * Casing findUniqueOrThrow
 */
export type CasingFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Casing
   */
  select?: Prisma.CasingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Casing
   */
  omit?: Prisma.CasingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CasingInclude<ExtArgs> | null
  /**
   * Filter, which Casing to fetch.
   */
  where: Prisma.CasingWhereUniqueInput
}

/**
 * Casing findFirst
 */
export type CasingFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Casing
   */
  select?: Prisma.CasingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Casing
   */
  omit?: Prisma.CasingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CasingInclude<ExtArgs> | null
  /**
   * Filter, which Casing to fetch.
   */
  where?: Prisma.CasingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Casings to fetch.
   */
  orderBy?: Prisma.CasingOrderByWithRelationInput | Prisma.CasingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Casings.
   */
  cursor?: Prisma.CasingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Casings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Casings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Casings.
   */
  distinct?: Prisma.CasingScalarFieldEnum | Prisma.CasingScalarFieldEnum[]
}

/**
 * Casing findFirstOrThrow
 */
export type CasingFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Casing
   */
  select?: Prisma.CasingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Casing
   */
  omit?: Prisma.CasingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CasingInclude<ExtArgs> | null
  /**
   * Filter, which Casing to fetch.
   */
  where?: Prisma.CasingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Casings to fetch.
   */
  orderBy?: Prisma.CasingOrderByWithRelationInput | Prisma.CasingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Casings.
   */
  cursor?: Prisma.CasingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Casings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Casings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Casings.
   */
  distinct?: Prisma.CasingScalarFieldEnum | Prisma.CasingScalarFieldEnum[]
}

/**
 * Casing findMany
 */
export type CasingFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Casing
   */
  select?: Prisma.CasingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Casing
   */
  omit?: Prisma.CasingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CasingInclude<ExtArgs> | null
  /**
   * Filter, which Casings to fetch.
   */
  where?: Prisma.CasingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Casings to fetch.
   */
  orderBy?: Prisma.CasingOrderByWithRelationInput | Prisma.CasingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Casings.
   */
  cursor?: Prisma.CasingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Casings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Casings.
   */
  skip?: number
  distinct?: Prisma.CasingScalarFieldEnum | Prisma.CasingScalarFieldEnum[]
}

/**
 * Casing create
 */
export type CasingCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Casing
   */
  select?: Prisma.CasingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Casing
   */
  omit?: Prisma.CasingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CasingInclude<ExtArgs> | null
  /**
   * The data needed to create a Casing.
   */
  data: Prisma.XOR<Prisma.CasingCreateInput, Prisma.CasingUncheckedCreateInput>
}

/**
 * Casing createMany
 */
export type CasingCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Casings.
   */
  data: Prisma.CasingCreateManyInput | Prisma.CasingCreateManyInput[]
}

/**
 * Casing createManyAndReturn
 */
export type CasingCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Casing
   */
  select?: Prisma.CasingSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Casing
   */
  omit?: Prisma.CasingOmit<ExtArgs> | null
  /**
   * The data used to create many Casings.
   */
  data: Prisma.CasingCreateManyInput | Prisma.CasingCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CasingIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Casing update
 */
export type CasingUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Casing
   */
  select?: Prisma.CasingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Casing
   */
  omit?: Prisma.CasingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CasingInclude<ExtArgs> | null
  /**
   * The data needed to update a Casing.
   */
  data: Prisma.XOR<Prisma.CasingUpdateInput, Prisma.CasingUncheckedUpdateInput>
  /**
   * Choose, which Casing to update.
   */
  where: Prisma.CasingWhereUniqueInput
}

/**
 * Casing updateMany
 */
export type CasingUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Casings.
   */
  data: Prisma.XOR<Prisma.CasingUpdateManyMutationInput, Prisma.CasingUncheckedUpdateManyInput>
  /**
   * Filter which Casings to update
   */
  where?: Prisma.CasingWhereInput
  /**
   * Limit how many Casings to update.
   */
  limit?: number
}

/**
 * Casing updateManyAndReturn
 */
export type CasingUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Casing
   */
  select?: Prisma.CasingSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Casing
   */
  omit?: Prisma.CasingOmit<ExtArgs> | null
  /**
   * The data used to update Casings.
   */
  data: Prisma.XOR<Prisma.CasingUpdateManyMutationInput, Prisma.CasingUncheckedUpdateManyInput>
  /**
   * Filter which Casings to update
   */
  where?: Prisma.CasingWhereInput
  /**
   * Limit how many Casings to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CasingIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Casing upsert
 */
export type CasingUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Casing
   */
  select?: Prisma.CasingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Casing
   */
  omit?: Prisma.CasingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CasingInclude<ExtArgs> | null
  /**
   * The filter to search for the Casing to update in case it exists.
   */
  where: Prisma.CasingWhereUniqueInput
  /**
   * In case the Casing found by the `where` argument doesn't exist, create a new Casing with this data.
   */
  create: Prisma.XOR<Prisma.CasingCreateInput, Prisma.CasingUncheckedCreateInput>
  /**
   * In case the Casing was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CasingUpdateInput, Prisma.CasingUncheckedUpdateInput>
}

/**
 * Casing delete
 */
export type CasingDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Casing
   */
  select?: Prisma.CasingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Casing
   */
  omit?: Prisma.CasingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CasingInclude<ExtArgs> | null
  /**
   * Filter which Casing to delete.
   */
  where: Prisma.CasingWhereUniqueInput
}

/**
 * Casing deleteMany
 */
export type CasingDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Casings to delete
   */
  where?: Prisma.CasingWhereInput
  /**
   * Limit how many Casings to delete.
   */
  limit?: number
}

/**
 * Casing without action
 */
export type CasingDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Casing
   */
  select?: Prisma.CasingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Casing
   */
  omit?: Prisma.CasingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CasingInclude<ExtArgs> | null
}
