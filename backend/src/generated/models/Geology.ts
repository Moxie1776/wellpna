
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Geology` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Geology
 * 
 */
export type GeologyModel = runtime.Types.Result.DefaultSelection<Prisma.$GeologyPayload>

export type AggregateGeology = {
  _count: GeologyCountAggregateOutputType | null
  _min: GeologyMinAggregateOutputType | null
  _max: GeologyMaxAggregateOutputType | null
}

export type GeologyMinAggregateOutputType = {
  id: string | null
  sandName: string | null
  formationCommonName: string | null
  usableWaterStrata: string | null
  shallowestProducingZone: string | null
  saltwaterDisposalZone: string | null
}

export type GeologyMaxAggregateOutputType = {
  id: string | null
  sandName: string | null
  formationCommonName: string | null
  usableWaterStrata: string | null
  shallowestProducingZone: string | null
  saltwaterDisposalZone: string | null
}

export type GeologyCountAggregateOutputType = {
  id: number
  sandName: number
  formationCommonName: number
  usableWaterStrata: number
  shallowestProducingZone: number
  saltwaterDisposalZone: number
  _all: number
}


export type GeologyMinAggregateInputType = {
  id?: true
  sandName?: true
  formationCommonName?: true
  usableWaterStrata?: true
  shallowestProducingZone?: true
  saltwaterDisposalZone?: true
}

export type GeologyMaxAggregateInputType = {
  id?: true
  sandName?: true
  formationCommonName?: true
  usableWaterStrata?: true
  shallowestProducingZone?: true
  saltwaterDisposalZone?: true
}

export type GeologyCountAggregateInputType = {
  id?: true
  sandName?: true
  formationCommonName?: true
  usableWaterStrata?: true
  shallowestProducingZone?: true
  saltwaterDisposalZone?: true
  _all?: true
}

export type GeologyAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Geology to aggregate.
   */
  where?: Prisma.GeologyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Geologies to fetch.
   */
  orderBy?: Prisma.GeologyOrderByWithRelationInput | Prisma.GeologyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GeologyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Geologies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Geologies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Geologies
  **/
  _count?: true | GeologyCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GeologyMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GeologyMaxAggregateInputType
}

export type GetGeologyAggregateType<T extends GeologyAggregateArgs> = {
      [P in keyof T & keyof AggregateGeology]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGeology[P]>
    : Prisma.GetScalarType<T[P], AggregateGeology[P]>
}




export type GeologyGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GeologyWhereInput
  orderBy?: Prisma.GeologyOrderByWithAggregationInput | Prisma.GeologyOrderByWithAggregationInput[]
  by: Prisma.GeologyScalarFieldEnum[] | Prisma.GeologyScalarFieldEnum
  having?: Prisma.GeologyScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GeologyCountAggregateInputType | true
  _min?: GeologyMinAggregateInputType
  _max?: GeologyMaxAggregateInputType
}

export type GeologyGroupByOutputType = {
  id: string
  sandName: string | null
  formationCommonName: string | null
  usableWaterStrata: string
  shallowestProducingZone: string | null
  saltwaterDisposalZone: string | null
  _count: GeologyCountAggregateOutputType | null
  _min: GeologyMinAggregateOutputType | null
  _max: GeologyMaxAggregateOutputType | null
}

type GetGeologyGroupByPayload<T extends GeologyGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GeologyGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GeologyGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GeologyGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GeologyGroupByOutputType[P]>
      }
    >
  >



export type GeologyWhereInput = {
  AND?: Prisma.GeologyWhereInput | Prisma.GeologyWhereInput[]
  OR?: Prisma.GeologyWhereInput[]
  NOT?: Prisma.GeologyWhereInput | Prisma.GeologyWhereInput[]
  id?: Prisma.StringFilter<"Geology"> | string
  sandName?: Prisma.StringNullableFilter<"Geology"> | string | null
  formationCommonName?: Prisma.StringNullableFilter<"Geology"> | string | null
  usableWaterStrata?: Prisma.StringFilter<"Geology"> | string
  shallowestProducingZone?: Prisma.StringNullableFilter<"Geology"> | string | null
  saltwaterDisposalZone?: Prisma.StringNullableFilter<"Geology"> | string | null
  wells?: Prisma.WellListRelationFilter
}

export type GeologyOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  sandName?: Prisma.SortOrderInput | Prisma.SortOrder
  formationCommonName?: Prisma.SortOrderInput | Prisma.SortOrder
  usableWaterStrata?: Prisma.SortOrder
  shallowestProducingZone?: Prisma.SortOrderInput | Prisma.SortOrder
  saltwaterDisposalZone?: Prisma.SortOrderInput | Prisma.SortOrder
  wells?: Prisma.WellOrderByRelationAggregateInput
}

export type GeologyWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.GeologyWhereInput | Prisma.GeologyWhereInput[]
  OR?: Prisma.GeologyWhereInput[]
  NOT?: Prisma.GeologyWhereInput | Prisma.GeologyWhereInput[]
  sandName?: Prisma.StringNullableFilter<"Geology"> | string | null
  formationCommonName?: Prisma.StringNullableFilter<"Geology"> | string | null
  usableWaterStrata?: Prisma.StringFilter<"Geology"> | string
  shallowestProducingZone?: Prisma.StringNullableFilter<"Geology"> | string | null
  saltwaterDisposalZone?: Prisma.StringNullableFilter<"Geology"> | string | null
  wells?: Prisma.WellListRelationFilter
}, "id">

export type GeologyOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  sandName?: Prisma.SortOrderInput | Prisma.SortOrder
  formationCommonName?: Prisma.SortOrderInput | Prisma.SortOrder
  usableWaterStrata?: Prisma.SortOrder
  shallowestProducingZone?: Prisma.SortOrderInput | Prisma.SortOrder
  saltwaterDisposalZone?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.GeologyCountOrderByAggregateInput
  _max?: Prisma.GeologyMaxOrderByAggregateInput
  _min?: Prisma.GeologyMinOrderByAggregateInput
}

export type GeologyScalarWhereWithAggregatesInput = {
  AND?: Prisma.GeologyScalarWhereWithAggregatesInput | Prisma.GeologyScalarWhereWithAggregatesInput[]
  OR?: Prisma.GeologyScalarWhereWithAggregatesInput[]
  NOT?: Prisma.GeologyScalarWhereWithAggregatesInput | Prisma.GeologyScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Geology"> | string
  sandName?: Prisma.StringNullableWithAggregatesFilter<"Geology"> | string | null
  formationCommonName?: Prisma.StringNullableWithAggregatesFilter<"Geology"> | string | null
  usableWaterStrata?: Prisma.StringWithAggregatesFilter<"Geology"> | string
  shallowestProducingZone?: Prisma.StringNullableWithAggregatesFilter<"Geology"> | string | null
  saltwaterDisposalZone?: Prisma.StringNullableWithAggregatesFilter<"Geology"> | string | null
}

export type GeologyCreateInput = {
  id?: string
  sandName?: string | null
  formationCommonName?: string | null
  usableWaterStrata: string
  shallowestProducingZone?: string | null
  saltwaterDisposalZone?: string | null
  wells?: Prisma.WellCreateNestedManyWithoutGeologyInput
}

export type GeologyUncheckedCreateInput = {
  id?: string
  sandName?: string | null
  formationCommonName?: string | null
  usableWaterStrata: string
  shallowestProducingZone?: string | null
  saltwaterDisposalZone?: string | null
  wells?: Prisma.WellUncheckedCreateNestedManyWithoutGeologyInput
}

export type GeologyUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sandName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formationCommonName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  usableWaterStrata?: Prisma.StringFieldUpdateOperationsInput | string
  shallowestProducingZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  saltwaterDisposalZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  wells?: Prisma.WellUpdateManyWithoutGeologyNestedInput
}

export type GeologyUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sandName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formationCommonName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  usableWaterStrata?: Prisma.StringFieldUpdateOperationsInput | string
  shallowestProducingZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  saltwaterDisposalZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  wells?: Prisma.WellUncheckedUpdateManyWithoutGeologyNestedInput
}

export type GeologyCreateManyInput = {
  id?: string
  sandName?: string | null
  formationCommonName?: string | null
  usableWaterStrata: string
  shallowestProducingZone?: string | null
  saltwaterDisposalZone?: string | null
}

export type GeologyUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sandName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formationCommonName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  usableWaterStrata?: Prisma.StringFieldUpdateOperationsInput | string
  shallowestProducingZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  saltwaterDisposalZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type GeologyUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sandName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formationCommonName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  usableWaterStrata?: Prisma.StringFieldUpdateOperationsInput | string
  shallowestProducingZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  saltwaterDisposalZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type GeologyCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sandName?: Prisma.SortOrder
  formationCommonName?: Prisma.SortOrder
  usableWaterStrata?: Prisma.SortOrder
  shallowestProducingZone?: Prisma.SortOrder
  saltwaterDisposalZone?: Prisma.SortOrder
}

export type GeologyMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sandName?: Prisma.SortOrder
  formationCommonName?: Prisma.SortOrder
  usableWaterStrata?: Prisma.SortOrder
  shallowestProducingZone?: Prisma.SortOrder
  saltwaterDisposalZone?: Prisma.SortOrder
}

export type GeologyMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sandName?: Prisma.SortOrder
  formationCommonName?: Prisma.SortOrder
  usableWaterStrata?: Prisma.SortOrder
  shallowestProducingZone?: Prisma.SortOrder
  saltwaterDisposalZone?: Prisma.SortOrder
}

export type GeologyNullableScalarRelationFilter = {
  is?: Prisma.GeologyWhereInput | null
  isNot?: Prisma.GeologyWhereInput | null
}

export type GeologyCreateNestedOneWithoutWellsInput = {
  create?: Prisma.XOR<Prisma.GeologyCreateWithoutWellsInput, Prisma.GeologyUncheckedCreateWithoutWellsInput>
  connectOrCreate?: Prisma.GeologyCreateOrConnectWithoutWellsInput
  connect?: Prisma.GeologyWhereUniqueInput
}

export type GeologyUpdateOneWithoutWellsNestedInput = {
  create?: Prisma.XOR<Prisma.GeologyCreateWithoutWellsInput, Prisma.GeologyUncheckedCreateWithoutWellsInput>
  connectOrCreate?: Prisma.GeologyCreateOrConnectWithoutWellsInput
  upsert?: Prisma.GeologyUpsertWithoutWellsInput
  disconnect?: Prisma.GeologyWhereInput | boolean
  delete?: Prisma.GeologyWhereInput | boolean
  connect?: Prisma.GeologyWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GeologyUpdateToOneWithWhereWithoutWellsInput, Prisma.GeologyUpdateWithoutWellsInput>, Prisma.GeologyUncheckedUpdateWithoutWellsInput>
}

export type GeologyCreateWithoutWellsInput = {
  id?: string
  sandName?: string | null
  formationCommonName?: string | null
  usableWaterStrata: string
  shallowestProducingZone?: string | null
  saltwaterDisposalZone?: string | null
}

export type GeologyUncheckedCreateWithoutWellsInput = {
  id?: string
  sandName?: string | null
  formationCommonName?: string | null
  usableWaterStrata: string
  shallowestProducingZone?: string | null
  saltwaterDisposalZone?: string | null
}

export type GeologyCreateOrConnectWithoutWellsInput = {
  where: Prisma.GeologyWhereUniqueInput
  create: Prisma.XOR<Prisma.GeologyCreateWithoutWellsInput, Prisma.GeologyUncheckedCreateWithoutWellsInput>
}

export type GeologyUpsertWithoutWellsInput = {
  update: Prisma.XOR<Prisma.GeologyUpdateWithoutWellsInput, Prisma.GeologyUncheckedUpdateWithoutWellsInput>
  create: Prisma.XOR<Prisma.GeologyCreateWithoutWellsInput, Prisma.GeologyUncheckedCreateWithoutWellsInput>
  where?: Prisma.GeologyWhereInput
}

export type GeologyUpdateToOneWithWhereWithoutWellsInput = {
  where?: Prisma.GeologyWhereInput
  data: Prisma.XOR<Prisma.GeologyUpdateWithoutWellsInput, Prisma.GeologyUncheckedUpdateWithoutWellsInput>
}

export type GeologyUpdateWithoutWellsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sandName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formationCommonName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  usableWaterStrata?: Prisma.StringFieldUpdateOperationsInput | string
  shallowestProducingZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  saltwaterDisposalZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type GeologyUncheckedUpdateWithoutWellsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sandName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formationCommonName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  usableWaterStrata?: Prisma.StringFieldUpdateOperationsInput | string
  shallowestProducingZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  saltwaterDisposalZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type GeologyCountOutputType
 */

export type GeologyCountOutputType = {
  wells: number
}

export type GeologyCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  wells?: boolean | GeologyCountOutputTypeCountWellsArgs
}

/**
 * GeologyCountOutputType without action
 */
export type GeologyCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GeologyCountOutputType
   */
  select?: Prisma.GeologyCountOutputTypeSelect<ExtArgs> | null
}

/**
 * GeologyCountOutputType without action
 */
export type GeologyCountOutputTypeCountWellsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WellWhereInput
}


export type GeologySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sandName?: boolean
  formationCommonName?: boolean
  usableWaterStrata?: boolean
  shallowestProducingZone?: boolean
  saltwaterDisposalZone?: boolean
  wells?: boolean | Prisma.Geology$wellsArgs<ExtArgs>
  _count?: boolean | Prisma.GeologyCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["geology"]>

export type GeologySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sandName?: boolean
  formationCommonName?: boolean
  usableWaterStrata?: boolean
  shallowestProducingZone?: boolean
  saltwaterDisposalZone?: boolean
}, ExtArgs["result"]["geology"]>

export type GeologySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sandName?: boolean
  formationCommonName?: boolean
  usableWaterStrata?: boolean
  shallowestProducingZone?: boolean
  saltwaterDisposalZone?: boolean
}, ExtArgs["result"]["geology"]>

export type GeologySelectScalar = {
  id?: boolean
  sandName?: boolean
  formationCommonName?: boolean
  usableWaterStrata?: boolean
  shallowestProducingZone?: boolean
  saltwaterDisposalZone?: boolean
}

export type GeologyOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "sandName" | "formationCommonName" | "usableWaterStrata" | "shallowestProducingZone" | "saltwaterDisposalZone", ExtArgs["result"]["geology"]>
export type GeologyInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  wells?: boolean | Prisma.Geology$wellsArgs<ExtArgs>
  _count?: boolean | Prisma.GeologyCountOutputTypeDefaultArgs<ExtArgs>
}
export type GeologyIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type GeologyIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $GeologyPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Geology"
  objects: {
    wells: Prisma.$WellPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    sandName: string | null
    formationCommonName: string | null
    usableWaterStrata: string
    shallowestProducingZone: string | null
    saltwaterDisposalZone: string | null
  }, ExtArgs["result"]["geology"]>
  composites: {}
}

export type GeologyGetPayload<S extends boolean | null | undefined | GeologyDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GeologyPayload, S>

export type GeologyCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GeologyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GeologyCountAggregateInputType | true
  }

export interface GeologyDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Geology'], meta: { name: 'Geology' } }
  /**
   * Find zero or one Geology that matches the filter.
   * @param {GeologyFindUniqueArgs} args - Arguments to find a Geology
   * @example
   * // Get one Geology
   * const geology = await prisma.geology.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GeologyFindUniqueArgs>(args: Prisma.SelectSubset<T, GeologyFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GeologyClient<runtime.Types.Result.GetResult<Prisma.$GeologyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Geology that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GeologyFindUniqueOrThrowArgs} args - Arguments to find a Geology
   * @example
   * // Get one Geology
   * const geology = await prisma.geology.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GeologyFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GeologyFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GeologyClient<runtime.Types.Result.GetResult<Prisma.$GeologyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Geology that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GeologyFindFirstArgs} args - Arguments to find a Geology
   * @example
   * // Get one Geology
   * const geology = await prisma.geology.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GeologyFindFirstArgs>(args?: Prisma.SelectSubset<T, GeologyFindFirstArgs<ExtArgs>>): Prisma.Prisma__GeologyClient<runtime.Types.Result.GetResult<Prisma.$GeologyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Geology that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GeologyFindFirstOrThrowArgs} args - Arguments to find a Geology
   * @example
   * // Get one Geology
   * const geology = await prisma.geology.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GeologyFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GeologyFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GeologyClient<runtime.Types.Result.GetResult<Prisma.$GeologyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Geologies that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GeologyFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Geologies
   * const geologies = await prisma.geology.findMany()
   * 
   * // Get first 10 Geologies
   * const geologies = await prisma.geology.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const geologyWithIdOnly = await prisma.geology.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends GeologyFindManyArgs>(args?: Prisma.SelectSubset<T, GeologyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GeologyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Geology.
   * @param {GeologyCreateArgs} args - Arguments to create a Geology.
   * @example
   * // Create one Geology
   * const Geology = await prisma.geology.create({
   *   data: {
   *     // ... data to create a Geology
   *   }
   * })
   * 
   */
  create<T extends GeologyCreateArgs>(args: Prisma.SelectSubset<T, GeologyCreateArgs<ExtArgs>>): Prisma.Prisma__GeologyClient<runtime.Types.Result.GetResult<Prisma.$GeologyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Geologies.
   * @param {GeologyCreateManyArgs} args - Arguments to create many Geologies.
   * @example
   * // Create many Geologies
   * const geology = await prisma.geology.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GeologyCreateManyArgs>(args?: Prisma.SelectSubset<T, GeologyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Geologies and returns the data saved in the database.
   * @param {GeologyCreateManyAndReturnArgs} args - Arguments to create many Geologies.
   * @example
   * // Create many Geologies
   * const geology = await prisma.geology.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Geologies and only return the `id`
   * const geologyWithIdOnly = await prisma.geology.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GeologyCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GeologyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GeologyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Geology.
   * @param {GeologyDeleteArgs} args - Arguments to delete one Geology.
   * @example
   * // Delete one Geology
   * const Geology = await prisma.geology.delete({
   *   where: {
   *     // ... filter to delete one Geology
   *   }
   * })
   * 
   */
  delete<T extends GeologyDeleteArgs>(args: Prisma.SelectSubset<T, GeologyDeleteArgs<ExtArgs>>): Prisma.Prisma__GeologyClient<runtime.Types.Result.GetResult<Prisma.$GeologyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Geology.
   * @param {GeologyUpdateArgs} args - Arguments to update one Geology.
   * @example
   * // Update one Geology
   * const geology = await prisma.geology.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GeologyUpdateArgs>(args: Prisma.SelectSubset<T, GeologyUpdateArgs<ExtArgs>>): Prisma.Prisma__GeologyClient<runtime.Types.Result.GetResult<Prisma.$GeologyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Geologies.
   * @param {GeologyDeleteManyArgs} args - Arguments to filter Geologies to delete.
   * @example
   * // Delete a few Geologies
   * const { count } = await prisma.geology.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GeologyDeleteManyArgs>(args?: Prisma.SelectSubset<T, GeologyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Geologies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GeologyUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Geologies
   * const geology = await prisma.geology.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GeologyUpdateManyArgs>(args: Prisma.SelectSubset<T, GeologyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Geologies and returns the data updated in the database.
   * @param {GeologyUpdateManyAndReturnArgs} args - Arguments to update many Geologies.
   * @example
   * // Update many Geologies
   * const geology = await prisma.geology.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Geologies and only return the `id`
   * const geologyWithIdOnly = await prisma.geology.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GeologyUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GeologyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GeologyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Geology.
   * @param {GeologyUpsertArgs} args - Arguments to update or create a Geology.
   * @example
   * // Update or create a Geology
   * const geology = await prisma.geology.upsert({
   *   create: {
   *     // ... data to create a Geology
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Geology we want to update
   *   }
   * })
   */
  upsert<T extends GeologyUpsertArgs>(args: Prisma.SelectSubset<T, GeologyUpsertArgs<ExtArgs>>): Prisma.Prisma__GeologyClient<runtime.Types.Result.GetResult<Prisma.$GeologyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Geologies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GeologyCountArgs} args - Arguments to filter Geologies to count.
   * @example
   * // Count the number of Geologies
   * const count = await prisma.geology.count({
   *   where: {
   *     // ... the filter for the Geologies we want to count
   *   }
   * })
  **/
  count<T extends GeologyCountArgs>(
    args?: Prisma.Subset<T, GeologyCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GeologyCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Geology.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GeologyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GeologyAggregateArgs>(args: Prisma.Subset<T, GeologyAggregateArgs>): Prisma.PrismaPromise<GetGeologyAggregateType<T>>

  /**
   * Group by Geology.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GeologyGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GeologyGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GeologyGroupByArgs['orderBy'] }
      : { orderBy?: GeologyGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GeologyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGeologyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Geology model
 */
readonly fields: GeologyFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Geology.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GeologyClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  wells<T extends Prisma.Geology$wellsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Geology$wellsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WellPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Geology model
 */
export interface GeologyFieldRefs {
  readonly id: Prisma.FieldRef<"Geology", 'String'>
  readonly sandName: Prisma.FieldRef<"Geology", 'String'>
  readonly formationCommonName: Prisma.FieldRef<"Geology", 'String'>
  readonly usableWaterStrata: Prisma.FieldRef<"Geology", 'String'>
  readonly shallowestProducingZone: Prisma.FieldRef<"Geology", 'String'>
  readonly saltwaterDisposalZone: Prisma.FieldRef<"Geology", 'String'>
}
    

// Custom InputTypes
/**
 * Geology findUnique
 */
export type GeologyFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Geology
   */
  select?: Prisma.GeologySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Geology
   */
  omit?: Prisma.GeologyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GeologyInclude<ExtArgs> | null
  /**
   * Filter, which Geology to fetch.
   */
  where: Prisma.GeologyWhereUniqueInput
}

/**
 * Geology findUniqueOrThrow
 */
export type GeologyFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Geology
   */
  select?: Prisma.GeologySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Geology
   */
  omit?: Prisma.GeologyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GeologyInclude<ExtArgs> | null
  /**
   * Filter, which Geology to fetch.
   */
  where: Prisma.GeologyWhereUniqueInput
}

/**
 * Geology findFirst
 */
export type GeologyFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Geology
   */
  select?: Prisma.GeologySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Geology
   */
  omit?: Prisma.GeologyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GeologyInclude<ExtArgs> | null
  /**
   * Filter, which Geology to fetch.
   */
  where?: Prisma.GeologyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Geologies to fetch.
   */
  orderBy?: Prisma.GeologyOrderByWithRelationInput | Prisma.GeologyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Geologies.
   */
  cursor?: Prisma.GeologyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Geologies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Geologies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Geologies.
   */
  distinct?: Prisma.GeologyScalarFieldEnum | Prisma.GeologyScalarFieldEnum[]
}

/**
 * Geology findFirstOrThrow
 */
export type GeologyFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Geology
   */
  select?: Prisma.GeologySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Geology
   */
  omit?: Prisma.GeologyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GeologyInclude<ExtArgs> | null
  /**
   * Filter, which Geology to fetch.
   */
  where?: Prisma.GeologyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Geologies to fetch.
   */
  orderBy?: Prisma.GeologyOrderByWithRelationInput | Prisma.GeologyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Geologies.
   */
  cursor?: Prisma.GeologyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Geologies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Geologies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Geologies.
   */
  distinct?: Prisma.GeologyScalarFieldEnum | Prisma.GeologyScalarFieldEnum[]
}

/**
 * Geology findMany
 */
export type GeologyFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Geology
   */
  select?: Prisma.GeologySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Geology
   */
  omit?: Prisma.GeologyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GeologyInclude<ExtArgs> | null
  /**
   * Filter, which Geologies to fetch.
   */
  where?: Prisma.GeologyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Geologies to fetch.
   */
  orderBy?: Prisma.GeologyOrderByWithRelationInput | Prisma.GeologyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Geologies.
   */
  cursor?: Prisma.GeologyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Geologies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Geologies.
   */
  skip?: number
  distinct?: Prisma.GeologyScalarFieldEnum | Prisma.GeologyScalarFieldEnum[]
}

/**
 * Geology create
 */
export type GeologyCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Geology
   */
  select?: Prisma.GeologySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Geology
   */
  omit?: Prisma.GeologyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GeologyInclude<ExtArgs> | null
  /**
   * The data needed to create a Geology.
   */
  data: Prisma.XOR<Prisma.GeologyCreateInput, Prisma.GeologyUncheckedCreateInput>
}

/**
 * Geology createMany
 */
export type GeologyCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Geologies.
   */
  data: Prisma.GeologyCreateManyInput | Prisma.GeologyCreateManyInput[]
}

/**
 * Geology createManyAndReturn
 */
export type GeologyCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Geology
   */
  select?: Prisma.GeologySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Geology
   */
  omit?: Prisma.GeologyOmit<ExtArgs> | null
  /**
   * The data used to create many Geologies.
   */
  data: Prisma.GeologyCreateManyInput | Prisma.GeologyCreateManyInput[]
}

/**
 * Geology update
 */
export type GeologyUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Geology
   */
  select?: Prisma.GeologySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Geology
   */
  omit?: Prisma.GeologyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GeologyInclude<ExtArgs> | null
  /**
   * The data needed to update a Geology.
   */
  data: Prisma.XOR<Prisma.GeologyUpdateInput, Prisma.GeologyUncheckedUpdateInput>
  /**
   * Choose, which Geology to update.
   */
  where: Prisma.GeologyWhereUniqueInput
}

/**
 * Geology updateMany
 */
export type GeologyUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Geologies.
   */
  data: Prisma.XOR<Prisma.GeologyUpdateManyMutationInput, Prisma.GeologyUncheckedUpdateManyInput>
  /**
   * Filter which Geologies to update
   */
  where?: Prisma.GeologyWhereInput
  /**
   * Limit how many Geologies to update.
   */
  limit?: number
}

/**
 * Geology updateManyAndReturn
 */
export type GeologyUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Geology
   */
  select?: Prisma.GeologySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Geology
   */
  omit?: Prisma.GeologyOmit<ExtArgs> | null
  /**
   * The data used to update Geologies.
   */
  data: Prisma.XOR<Prisma.GeologyUpdateManyMutationInput, Prisma.GeologyUncheckedUpdateManyInput>
  /**
   * Filter which Geologies to update
   */
  where?: Prisma.GeologyWhereInput
  /**
   * Limit how many Geologies to update.
   */
  limit?: number
}

/**
 * Geology upsert
 */
export type GeologyUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Geology
   */
  select?: Prisma.GeologySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Geology
   */
  omit?: Prisma.GeologyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GeologyInclude<ExtArgs> | null
  /**
   * The filter to search for the Geology to update in case it exists.
   */
  where: Prisma.GeologyWhereUniqueInput
  /**
   * In case the Geology found by the `where` argument doesn't exist, create a new Geology with this data.
   */
  create: Prisma.XOR<Prisma.GeologyCreateInput, Prisma.GeologyUncheckedCreateInput>
  /**
   * In case the Geology was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GeologyUpdateInput, Prisma.GeologyUncheckedUpdateInput>
}

/**
 * Geology delete
 */
export type GeologyDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Geology
   */
  select?: Prisma.GeologySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Geology
   */
  omit?: Prisma.GeologyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GeologyInclude<ExtArgs> | null
  /**
   * Filter which Geology to delete.
   */
  where: Prisma.GeologyWhereUniqueInput
}

/**
 * Geology deleteMany
 */
export type GeologyDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Geologies to delete
   */
  where?: Prisma.GeologyWhereInput
  /**
   * Limit how many Geologies to delete.
   */
  limit?: number
}

/**
 * Geology.wells
 */
export type Geology$wellsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Well
   */
  select?: Prisma.WellSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Well
   */
  omit?: Prisma.WellOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WellInclude<ExtArgs> | null
  where?: Prisma.WellWhereInput
  orderBy?: Prisma.WellOrderByWithRelationInput | Prisma.WellOrderByWithRelationInput[]
  cursor?: Prisma.WellWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.WellScalarFieldEnum | Prisma.WellScalarFieldEnum[]
}

/**
 * Geology without action
 */
export type GeologyDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Geology
   */
  select?: Prisma.GeologySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Geology
   */
  omit?: Prisma.GeologyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GeologyInclude<ExtArgs> | null
}
