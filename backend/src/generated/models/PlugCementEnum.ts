
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PlugCementEnum` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PlugCementEnum
 * 
 */
export type PlugCementEnumModel = runtime.Types.Result.DefaultSelection<Prisma.$PlugCementEnumPayload>

export type AggregatePlugCementEnum = {
  _count: PlugCementEnumCountAggregateOutputType | null
  _min: PlugCementEnumMinAggregateOutputType | null
  _max: PlugCementEnumMaxAggregateOutputType | null
}

export type PlugCementEnumMinAggregateOutputType = {
  type: string | null
}

export type PlugCementEnumMaxAggregateOutputType = {
  type: string | null
}

export type PlugCementEnumCountAggregateOutputType = {
  type: number
  _all: number
}


export type PlugCementEnumMinAggregateInputType = {
  type?: true
}

export type PlugCementEnumMaxAggregateInputType = {
  type?: true
}

export type PlugCementEnumCountAggregateInputType = {
  type?: true
  _all?: true
}

export type PlugCementEnumAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PlugCementEnum to aggregate.
   */
  where?: Prisma.PlugCementEnumWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlugCementEnums to fetch.
   */
  orderBy?: Prisma.PlugCementEnumOrderByWithRelationInput | Prisma.PlugCementEnumOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PlugCementEnumWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlugCementEnums from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlugCementEnums.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PlugCementEnums
  **/
  _count?: true | PlugCementEnumCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PlugCementEnumMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PlugCementEnumMaxAggregateInputType
}

export type GetPlugCementEnumAggregateType<T extends PlugCementEnumAggregateArgs> = {
      [P in keyof T & keyof AggregatePlugCementEnum]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePlugCementEnum[P]>
    : Prisma.GetScalarType<T[P], AggregatePlugCementEnum[P]>
}




export type PlugCementEnumGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlugCementEnumWhereInput
  orderBy?: Prisma.PlugCementEnumOrderByWithAggregationInput | Prisma.PlugCementEnumOrderByWithAggregationInput[]
  by: Prisma.PlugCementEnumScalarFieldEnum[] | Prisma.PlugCementEnumScalarFieldEnum
  having?: Prisma.PlugCementEnumScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PlugCementEnumCountAggregateInputType | true
  _min?: PlugCementEnumMinAggregateInputType
  _max?: PlugCementEnumMaxAggregateInputType
}

export type PlugCementEnumGroupByOutputType = {
  type: string
  _count: PlugCementEnumCountAggregateOutputType | null
  _min: PlugCementEnumMinAggregateOutputType | null
  _max: PlugCementEnumMaxAggregateOutputType | null
}

type GetPlugCementEnumGroupByPayload<T extends PlugCementEnumGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PlugCementEnumGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PlugCementEnumGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PlugCementEnumGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PlugCementEnumGroupByOutputType[P]>
      }
    >
  >



export type PlugCementEnumWhereInput = {
  AND?: Prisma.PlugCementEnumWhereInput | Prisma.PlugCementEnumWhereInput[]
  OR?: Prisma.PlugCementEnumWhereInput[]
  NOT?: Prisma.PlugCementEnumWhereInput | Prisma.PlugCementEnumWhereInput[]
  type?: Prisma.StringFilter<"PlugCementEnum"> | string
  plugCementTypes?: Prisma.PlugCementListRelationFilter
}

export type PlugCementEnumOrderByWithRelationInput = {
  type?: Prisma.SortOrder
  plugCementTypes?: Prisma.PlugCementOrderByRelationAggregateInput
}

export type PlugCementEnumWhereUniqueInput = Prisma.AtLeast<{
  type?: string
  AND?: Prisma.PlugCementEnumWhereInput | Prisma.PlugCementEnumWhereInput[]
  OR?: Prisma.PlugCementEnumWhereInput[]
  NOT?: Prisma.PlugCementEnumWhereInput | Prisma.PlugCementEnumWhereInput[]
  plugCementTypes?: Prisma.PlugCementListRelationFilter
}, "type">

export type PlugCementEnumOrderByWithAggregationInput = {
  type?: Prisma.SortOrder
  _count?: Prisma.PlugCementEnumCountOrderByAggregateInput
  _max?: Prisma.PlugCementEnumMaxOrderByAggregateInput
  _min?: Prisma.PlugCementEnumMinOrderByAggregateInput
}

export type PlugCementEnumScalarWhereWithAggregatesInput = {
  AND?: Prisma.PlugCementEnumScalarWhereWithAggregatesInput | Prisma.PlugCementEnumScalarWhereWithAggregatesInput[]
  OR?: Prisma.PlugCementEnumScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PlugCementEnumScalarWhereWithAggregatesInput | Prisma.PlugCementEnumScalarWhereWithAggregatesInput[]
  type?: Prisma.StringWithAggregatesFilter<"PlugCementEnum"> | string
}

export type PlugCementEnumCreateInput = {
  type: string
  plugCementTypes?: Prisma.PlugCementCreateNestedManyWithoutPlugCementEnumInput
}

export type PlugCementEnumUncheckedCreateInput = {
  type: string
  plugCementTypes?: Prisma.PlugCementUncheckedCreateNestedManyWithoutPlugCementEnumInput
}

export type PlugCementEnumUpdateInput = {
  type?: Prisma.StringFieldUpdateOperationsInput | string
  plugCementTypes?: Prisma.PlugCementUpdateManyWithoutPlugCementEnumNestedInput
}

export type PlugCementEnumUncheckedUpdateInput = {
  type?: Prisma.StringFieldUpdateOperationsInput | string
  plugCementTypes?: Prisma.PlugCementUncheckedUpdateManyWithoutPlugCementEnumNestedInput
}

export type PlugCementEnumCreateManyInput = {
  type: string
}

export type PlugCementEnumUpdateManyMutationInput = {
  type?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PlugCementEnumUncheckedUpdateManyInput = {
  type?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PlugCementEnumScalarRelationFilter = {
  is?: Prisma.PlugCementEnumWhereInput
  isNot?: Prisma.PlugCementEnumWhereInput
}

export type PlugCementEnumCountOrderByAggregateInput = {
  type?: Prisma.SortOrder
}

export type PlugCementEnumMaxOrderByAggregateInput = {
  type?: Prisma.SortOrder
}

export type PlugCementEnumMinOrderByAggregateInput = {
  type?: Prisma.SortOrder
}

export type PlugCementEnumCreateNestedOneWithoutPlugCementTypesInput = {
  create?: Prisma.XOR<Prisma.PlugCementEnumCreateWithoutPlugCementTypesInput, Prisma.PlugCementEnumUncheckedCreateWithoutPlugCementTypesInput>
  connectOrCreate?: Prisma.PlugCementEnumCreateOrConnectWithoutPlugCementTypesInput
  connect?: Prisma.PlugCementEnumWhereUniqueInput
}

export type PlugCementEnumUpdateOneRequiredWithoutPlugCementTypesNestedInput = {
  create?: Prisma.XOR<Prisma.PlugCementEnumCreateWithoutPlugCementTypesInput, Prisma.PlugCementEnumUncheckedCreateWithoutPlugCementTypesInput>
  connectOrCreate?: Prisma.PlugCementEnumCreateOrConnectWithoutPlugCementTypesInput
  upsert?: Prisma.PlugCementEnumUpsertWithoutPlugCementTypesInput
  connect?: Prisma.PlugCementEnumWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PlugCementEnumUpdateToOneWithWhereWithoutPlugCementTypesInput, Prisma.PlugCementEnumUpdateWithoutPlugCementTypesInput>, Prisma.PlugCementEnumUncheckedUpdateWithoutPlugCementTypesInput>
}

export type PlugCementEnumCreateWithoutPlugCementTypesInput = {
  type: string
}

export type PlugCementEnumUncheckedCreateWithoutPlugCementTypesInput = {
  type: string
}

export type PlugCementEnumCreateOrConnectWithoutPlugCementTypesInput = {
  where: Prisma.PlugCementEnumWhereUniqueInput
  create: Prisma.XOR<Prisma.PlugCementEnumCreateWithoutPlugCementTypesInput, Prisma.PlugCementEnumUncheckedCreateWithoutPlugCementTypesInput>
}

export type PlugCementEnumUpsertWithoutPlugCementTypesInput = {
  update: Prisma.XOR<Prisma.PlugCementEnumUpdateWithoutPlugCementTypesInput, Prisma.PlugCementEnumUncheckedUpdateWithoutPlugCementTypesInput>
  create: Prisma.XOR<Prisma.PlugCementEnumCreateWithoutPlugCementTypesInput, Prisma.PlugCementEnumUncheckedCreateWithoutPlugCementTypesInput>
  where?: Prisma.PlugCementEnumWhereInput
}

export type PlugCementEnumUpdateToOneWithWhereWithoutPlugCementTypesInput = {
  where?: Prisma.PlugCementEnumWhereInput
  data: Prisma.XOR<Prisma.PlugCementEnumUpdateWithoutPlugCementTypesInput, Prisma.PlugCementEnumUncheckedUpdateWithoutPlugCementTypesInput>
}

export type PlugCementEnumUpdateWithoutPlugCementTypesInput = {
  type?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PlugCementEnumUncheckedUpdateWithoutPlugCementTypesInput = {
  type?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type PlugCementEnumCountOutputType
 */

export type PlugCementEnumCountOutputType = {
  plugCementTypes: number
}

export type PlugCementEnumCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  plugCementTypes?: boolean | PlugCementEnumCountOutputTypeCountPlugCementTypesArgs
}

/**
 * PlugCementEnumCountOutputType without action
 */
export type PlugCementEnumCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCementEnumCountOutputType
   */
  select?: Prisma.PlugCementEnumCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PlugCementEnumCountOutputType without action
 */
export type PlugCementEnumCountOutputTypeCountPlugCementTypesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlugCementWhereInput
}


export type PlugCementEnumSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  type?: boolean
  plugCementTypes?: boolean | Prisma.PlugCementEnum$plugCementTypesArgs<ExtArgs>
  _count?: boolean | Prisma.PlugCementEnumCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["plugCementEnum"]>

export type PlugCementEnumSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  type?: boolean
}, ExtArgs["result"]["plugCementEnum"]>

export type PlugCementEnumSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  type?: boolean
}, ExtArgs["result"]["plugCementEnum"]>

export type PlugCementEnumSelectScalar = {
  type?: boolean
}

export type PlugCementEnumOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"type", ExtArgs["result"]["plugCementEnum"]>
export type PlugCementEnumInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  plugCementTypes?: boolean | Prisma.PlugCementEnum$plugCementTypesArgs<ExtArgs>
  _count?: boolean | Prisma.PlugCementEnumCountOutputTypeDefaultArgs<ExtArgs>
}
export type PlugCementEnumIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type PlugCementEnumIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $PlugCementEnumPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PlugCementEnum"
  objects: {
    plugCementTypes: Prisma.$PlugCementPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    type: string
  }, ExtArgs["result"]["plugCementEnum"]>
  composites: {}
}

export type PlugCementEnumGetPayload<S extends boolean | null | undefined | PlugCementEnumDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PlugCementEnumPayload, S>

export type PlugCementEnumCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PlugCementEnumFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PlugCementEnumCountAggregateInputType | true
  }

export interface PlugCementEnumDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlugCementEnum'], meta: { name: 'PlugCementEnum' } }
  /**
   * Find zero or one PlugCementEnum that matches the filter.
   * @param {PlugCementEnumFindUniqueArgs} args - Arguments to find a PlugCementEnum
   * @example
   * // Get one PlugCementEnum
   * const plugCementEnum = await prisma.plugCementEnum.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PlugCementEnumFindUniqueArgs>(args: Prisma.SelectSubset<T, PlugCementEnumFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PlugCementEnumClient<runtime.Types.Result.GetResult<Prisma.$PlugCementEnumPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PlugCementEnum that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PlugCementEnumFindUniqueOrThrowArgs} args - Arguments to find a PlugCementEnum
   * @example
   * // Get one PlugCementEnum
   * const plugCementEnum = await prisma.plugCementEnum.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PlugCementEnumFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PlugCementEnumFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlugCementEnumClient<runtime.Types.Result.GetResult<Prisma.$PlugCementEnumPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PlugCementEnum that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlugCementEnumFindFirstArgs} args - Arguments to find a PlugCementEnum
   * @example
   * // Get one PlugCementEnum
   * const plugCementEnum = await prisma.plugCementEnum.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PlugCementEnumFindFirstArgs>(args?: Prisma.SelectSubset<T, PlugCementEnumFindFirstArgs<ExtArgs>>): Prisma.Prisma__PlugCementEnumClient<runtime.Types.Result.GetResult<Prisma.$PlugCementEnumPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PlugCementEnum that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlugCementEnumFindFirstOrThrowArgs} args - Arguments to find a PlugCementEnum
   * @example
   * // Get one PlugCementEnum
   * const plugCementEnum = await prisma.plugCementEnum.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PlugCementEnumFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PlugCementEnumFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlugCementEnumClient<runtime.Types.Result.GetResult<Prisma.$PlugCementEnumPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PlugCementEnums that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlugCementEnumFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PlugCementEnums
   * const plugCementEnums = await prisma.plugCementEnum.findMany()
   * 
   * // Get first 10 PlugCementEnums
   * const plugCementEnums = await prisma.plugCementEnum.findMany({ take: 10 })
   * 
   * // Only select the `type`
   * const plugCementEnumWithTypeOnly = await prisma.plugCementEnum.findMany({ select: { type: true } })
   * 
   */
  findMany<T extends PlugCementEnumFindManyArgs>(args?: Prisma.SelectSubset<T, PlugCementEnumFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlugCementEnumPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PlugCementEnum.
   * @param {PlugCementEnumCreateArgs} args - Arguments to create a PlugCementEnum.
   * @example
   * // Create one PlugCementEnum
   * const PlugCementEnum = await prisma.plugCementEnum.create({
   *   data: {
   *     // ... data to create a PlugCementEnum
   *   }
   * })
   * 
   */
  create<T extends PlugCementEnumCreateArgs>(args: Prisma.SelectSubset<T, PlugCementEnumCreateArgs<ExtArgs>>): Prisma.Prisma__PlugCementEnumClient<runtime.Types.Result.GetResult<Prisma.$PlugCementEnumPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PlugCementEnums.
   * @param {PlugCementEnumCreateManyArgs} args - Arguments to create many PlugCementEnums.
   * @example
   * // Create many PlugCementEnums
   * const plugCementEnum = await prisma.plugCementEnum.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PlugCementEnumCreateManyArgs>(args?: Prisma.SelectSubset<T, PlugCementEnumCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PlugCementEnums and returns the data saved in the database.
   * @param {PlugCementEnumCreateManyAndReturnArgs} args - Arguments to create many PlugCementEnums.
   * @example
   * // Create many PlugCementEnums
   * const plugCementEnum = await prisma.plugCementEnum.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PlugCementEnums and only return the `type`
   * const plugCementEnumWithTypeOnly = await prisma.plugCementEnum.createManyAndReturn({
   *   select: { type: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PlugCementEnumCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PlugCementEnumCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlugCementEnumPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PlugCementEnum.
   * @param {PlugCementEnumDeleteArgs} args - Arguments to delete one PlugCementEnum.
   * @example
   * // Delete one PlugCementEnum
   * const PlugCementEnum = await prisma.plugCementEnum.delete({
   *   where: {
   *     // ... filter to delete one PlugCementEnum
   *   }
   * })
   * 
   */
  delete<T extends PlugCementEnumDeleteArgs>(args: Prisma.SelectSubset<T, PlugCementEnumDeleteArgs<ExtArgs>>): Prisma.Prisma__PlugCementEnumClient<runtime.Types.Result.GetResult<Prisma.$PlugCementEnumPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PlugCementEnum.
   * @param {PlugCementEnumUpdateArgs} args - Arguments to update one PlugCementEnum.
   * @example
   * // Update one PlugCementEnum
   * const plugCementEnum = await prisma.plugCementEnum.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PlugCementEnumUpdateArgs>(args: Prisma.SelectSubset<T, PlugCementEnumUpdateArgs<ExtArgs>>): Prisma.Prisma__PlugCementEnumClient<runtime.Types.Result.GetResult<Prisma.$PlugCementEnumPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PlugCementEnums.
   * @param {PlugCementEnumDeleteManyArgs} args - Arguments to filter PlugCementEnums to delete.
   * @example
   * // Delete a few PlugCementEnums
   * const { count } = await prisma.plugCementEnum.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PlugCementEnumDeleteManyArgs>(args?: Prisma.SelectSubset<T, PlugCementEnumDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PlugCementEnums.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlugCementEnumUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PlugCementEnums
   * const plugCementEnum = await prisma.plugCementEnum.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PlugCementEnumUpdateManyArgs>(args: Prisma.SelectSubset<T, PlugCementEnumUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PlugCementEnums and returns the data updated in the database.
   * @param {PlugCementEnumUpdateManyAndReturnArgs} args - Arguments to update many PlugCementEnums.
   * @example
   * // Update many PlugCementEnums
   * const plugCementEnum = await prisma.plugCementEnum.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PlugCementEnums and only return the `type`
   * const plugCementEnumWithTypeOnly = await prisma.plugCementEnum.updateManyAndReturn({
   *   select: { type: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PlugCementEnumUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PlugCementEnumUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlugCementEnumPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PlugCementEnum.
   * @param {PlugCementEnumUpsertArgs} args - Arguments to update or create a PlugCementEnum.
   * @example
   * // Update or create a PlugCementEnum
   * const plugCementEnum = await prisma.plugCementEnum.upsert({
   *   create: {
   *     // ... data to create a PlugCementEnum
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PlugCementEnum we want to update
   *   }
   * })
   */
  upsert<T extends PlugCementEnumUpsertArgs>(args: Prisma.SelectSubset<T, PlugCementEnumUpsertArgs<ExtArgs>>): Prisma.Prisma__PlugCementEnumClient<runtime.Types.Result.GetResult<Prisma.$PlugCementEnumPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PlugCementEnums.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlugCementEnumCountArgs} args - Arguments to filter PlugCementEnums to count.
   * @example
   * // Count the number of PlugCementEnums
   * const count = await prisma.plugCementEnum.count({
   *   where: {
   *     // ... the filter for the PlugCementEnums we want to count
   *   }
   * })
  **/
  count<T extends PlugCementEnumCountArgs>(
    args?: Prisma.Subset<T, PlugCementEnumCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PlugCementEnumCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PlugCementEnum.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlugCementEnumAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PlugCementEnumAggregateArgs>(args: Prisma.Subset<T, PlugCementEnumAggregateArgs>): Prisma.PrismaPromise<GetPlugCementEnumAggregateType<T>>

  /**
   * Group by PlugCementEnum.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlugCementEnumGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PlugCementEnumGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PlugCementEnumGroupByArgs['orderBy'] }
      : { orderBy?: PlugCementEnumGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PlugCementEnumGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlugCementEnumGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PlugCementEnum model
 */
readonly fields: PlugCementEnumFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PlugCementEnum.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PlugCementEnumClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  plugCementTypes<T extends Prisma.PlugCementEnum$plugCementTypesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PlugCementEnum$plugCementTypesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlugCementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PlugCementEnum model
 */
export interface PlugCementEnumFieldRefs {
  readonly type: Prisma.FieldRef<"PlugCementEnum", 'String'>
}
    

// Custom InputTypes
/**
 * PlugCementEnum findUnique
 */
export type PlugCementEnumFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCementEnum
   */
  select?: Prisma.PlugCementEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCementEnum
   */
  omit?: Prisma.PlugCementEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlugCementEnumInclude<ExtArgs> | null
  /**
   * Filter, which PlugCementEnum to fetch.
   */
  where: Prisma.PlugCementEnumWhereUniqueInput
}

/**
 * PlugCementEnum findUniqueOrThrow
 */
export type PlugCementEnumFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCementEnum
   */
  select?: Prisma.PlugCementEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCementEnum
   */
  omit?: Prisma.PlugCementEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlugCementEnumInclude<ExtArgs> | null
  /**
   * Filter, which PlugCementEnum to fetch.
   */
  where: Prisma.PlugCementEnumWhereUniqueInput
}

/**
 * PlugCementEnum findFirst
 */
export type PlugCementEnumFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCementEnum
   */
  select?: Prisma.PlugCementEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCementEnum
   */
  omit?: Prisma.PlugCementEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlugCementEnumInclude<ExtArgs> | null
  /**
   * Filter, which PlugCementEnum to fetch.
   */
  where?: Prisma.PlugCementEnumWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlugCementEnums to fetch.
   */
  orderBy?: Prisma.PlugCementEnumOrderByWithRelationInput | Prisma.PlugCementEnumOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PlugCementEnums.
   */
  cursor?: Prisma.PlugCementEnumWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlugCementEnums from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlugCementEnums.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PlugCementEnums.
   */
  distinct?: Prisma.PlugCementEnumScalarFieldEnum | Prisma.PlugCementEnumScalarFieldEnum[]
}

/**
 * PlugCementEnum findFirstOrThrow
 */
export type PlugCementEnumFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCementEnum
   */
  select?: Prisma.PlugCementEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCementEnum
   */
  omit?: Prisma.PlugCementEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlugCementEnumInclude<ExtArgs> | null
  /**
   * Filter, which PlugCementEnum to fetch.
   */
  where?: Prisma.PlugCementEnumWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlugCementEnums to fetch.
   */
  orderBy?: Prisma.PlugCementEnumOrderByWithRelationInput | Prisma.PlugCementEnumOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PlugCementEnums.
   */
  cursor?: Prisma.PlugCementEnumWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlugCementEnums from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlugCementEnums.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PlugCementEnums.
   */
  distinct?: Prisma.PlugCementEnumScalarFieldEnum | Prisma.PlugCementEnumScalarFieldEnum[]
}

/**
 * PlugCementEnum findMany
 */
export type PlugCementEnumFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCementEnum
   */
  select?: Prisma.PlugCementEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCementEnum
   */
  omit?: Prisma.PlugCementEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlugCementEnumInclude<ExtArgs> | null
  /**
   * Filter, which PlugCementEnums to fetch.
   */
  where?: Prisma.PlugCementEnumWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlugCementEnums to fetch.
   */
  orderBy?: Prisma.PlugCementEnumOrderByWithRelationInput | Prisma.PlugCementEnumOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PlugCementEnums.
   */
  cursor?: Prisma.PlugCementEnumWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlugCementEnums from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlugCementEnums.
   */
  skip?: number
  distinct?: Prisma.PlugCementEnumScalarFieldEnum | Prisma.PlugCementEnumScalarFieldEnum[]
}

/**
 * PlugCementEnum create
 */
export type PlugCementEnumCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCementEnum
   */
  select?: Prisma.PlugCementEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCementEnum
   */
  omit?: Prisma.PlugCementEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlugCementEnumInclude<ExtArgs> | null
  /**
   * The data needed to create a PlugCementEnum.
   */
  data: Prisma.XOR<Prisma.PlugCementEnumCreateInput, Prisma.PlugCementEnumUncheckedCreateInput>
}

/**
 * PlugCementEnum createMany
 */
export type PlugCementEnumCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PlugCementEnums.
   */
  data: Prisma.PlugCementEnumCreateManyInput | Prisma.PlugCementEnumCreateManyInput[]
}

/**
 * PlugCementEnum createManyAndReturn
 */
export type PlugCementEnumCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCementEnum
   */
  select?: Prisma.PlugCementEnumSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCementEnum
   */
  omit?: Prisma.PlugCementEnumOmit<ExtArgs> | null
  /**
   * The data used to create many PlugCementEnums.
   */
  data: Prisma.PlugCementEnumCreateManyInput | Prisma.PlugCementEnumCreateManyInput[]
}

/**
 * PlugCementEnum update
 */
export type PlugCementEnumUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCementEnum
   */
  select?: Prisma.PlugCementEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCementEnum
   */
  omit?: Prisma.PlugCementEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlugCementEnumInclude<ExtArgs> | null
  /**
   * The data needed to update a PlugCementEnum.
   */
  data: Prisma.XOR<Prisma.PlugCementEnumUpdateInput, Prisma.PlugCementEnumUncheckedUpdateInput>
  /**
   * Choose, which PlugCementEnum to update.
   */
  where: Prisma.PlugCementEnumWhereUniqueInput
}

/**
 * PlugCementEnum updateMany
 */
export type PlugCementEnumUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PlugCementEnums.
   */
  data: Prisma.XOR<Prisma.PlugCementEnumUpdateManyMutationInput, Prisma.PlugCementEnumUncheckedUpdateManyInput>
  /**
   * Filter which PlugCementEnums to update
   */
  where?: Prisma.PlugCementEnumWhereInput
  /**
   * Limit how many PlugCementEnums to update.
   */
  limit?: number
}

/**
 * PlugCementEnum updateManyAndReturn
 */
export type PlugCementEnumUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCementEnum
   */
  select?: Prisma.PlugCementEnumSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCementEnum
   */
  omit?: Prisma.PlugCementEnumOmit<ExtArgs> | null
  /**
   * The data used to update PlugCementEnums.
   */
  data: Prisma.XOR<Prisma.PlugCementEnumUpdateManyMutationInput, Prisma.PlugCementEnumUncheckedUpdateManyInput>
  /**
   * Filter which PlugCementEnums to update
   */
  where?: Prisma.PlugCementEnumWhereInput
  /**
   * Limit how many PlugCementEnums to update.
   */
  limit?: number
}

/**
 * PlugCementEnum upsert
 */
export type PlugCementEnumUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCementEnum
   */
  select?: Prisma.PlugCementEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCementEnum
   */
  omit?: Prisma.PlugCementEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlugCementEnumInclude<ExtArgs> | null
  /**
   * The filter to search for the PlugCementEnum to update in case it exists.
   */
  where: Prisma.PlugCementEnumWhereUniqueInput
  /**
   * In case the PlugCementEnum found by the `where` argument doesn't exist, create a new PlugCementEnum with this data.
   */
  create: Prisma.XOR<Prisma.PlugCementEnumCreateInput, Prisma.PlugCementEnumUncheckedCreateInput>
  /**
   * In case the PlugCementEnum was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PlugCementEnumUpdateInput, Prisma.PlugCementEnumUncheckedUpdateInput>
}

/**
 * PlugCementEnum delete
 */
export type PlugCementEnumDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCementEnum
   */
  select?: Prisma.PlugCementEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCementEnum
   */
  omit?: Prisma.PlugCementEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlugCementEnumInclude<ExtArgs> | null
  /**
   * Filter which PlugCementEnum to delete.
   */
  where: Prisma.PlugCementEnumWhereUniqueInput
}

/**
 * PlugCementEnum deleteMany
 */
export type PlugCementEnumDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PlugCementEnums to delete
   */
  where?: Prisma.PlugCementEnumWhereInput
  /**
   * Limit how many PlugCementEnums to delete.
   */
  limit?: number
}

/**
 * PlugCementEnum.plugCementTypes
 */
export type PlugCementEnum$plugCementTypesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCement
   */
  select?: Prisma.PlugCementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCement
   */
  omit?: Prisma.PlugCementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlugCementInclude<ExtArgs> | null
  where?: Prisma.PlugCementWhereInput
  orderBy?: Prisma.PlugCementOrderByWithRelationInput | Prisma.PlugCementOrderByWithRelationInput[]
  cursor?: Prisma.PlugCementWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PlugCementScalarFieldEnum | Prisma.PlugCementScalarFieldEnum[]
}

/**
 * PlugCementEnum without action
 */
export type PlugCementEnumDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCementEnum
   */
  select?: Prisma.PlugCementEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCementEnum
   */
  omit?: Prisma.PlugCementEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlugCementEnumInclude<ExtArgs> | null
}
