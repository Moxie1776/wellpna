
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `CasingEnum` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model CasingEnum
 * 
 */
export type CasingEnumModel = runtime.Types.Result.DefaultSelection<Prisma.$CasingEnumPayload>

export type AggregateCasingEnum = {
  _count: CasingEnumCountAggregateOutputType | null
  _avg: CasingEnumAvgAggregateOutputType | null
  _sum: CasingEnumSumAggregateOutputType | null
  _min: CasingEnumMinAggregateOutputType | null
  _max: CasingEnumMaxAggregateOutputType | null
}

export type CasingEnumAvgAggregateOutputType = {
  internalDiameter: number | null
  externalDiameter: number | null
  tocDepth: number | null
  weight: number | null
}

export type CasingEnumSumAggregateOutputType = {
  internalDiameter: number | null
  externalDiameter: number | null
  tocDepth: number | null
  weight: number | null
}

export type CasingEnumMinAggregateOutputType = {
  id: string | null
  internalDiameter: number | null
  externalDiameter: number | null
  tocDepth: number | null
  weight: number | null
  grade: string | null
}

export type CasingEnumMaxAggregateOutputType = {
  id: string | null
  internalDiameter: number | null
  externalDiameter: number | null
  tocDepth: number | null
  weight: number | null
  grade: string | null
}

export type CasingEnumCountAggregateOutputType = {
  id: number
  internalDiameter: number
  externalDiameter: number
  tocDepth: number
  weight: number
  grade: number
  _all: number
}


export type CasingEnumAvgAggregateInputType = {
  internalDiameter?: true
  externalDiameter?: true
  tocDepth?: true
  weight?: true
}

export type CasingEnumSumAggregateInputType = {
  internalDiameter?: true
  externalDiameter?: true
  tocDepth?: true
  weight?: true
}

export type CasingEnumMinAggregateInputType = {
  id?: true
  internalDiameter?: true
  externalDiameter?: true
  tocDepth?: true
  weight?: true
  grade?: true
}

export type CasingEnumMaxAggregateInputType = {
  id?: true
  internalDiameter?: true
  externalDiameter?: true
  tocDepth?: true
  weight?: true
  grade?: true
}

export type CasingEnumCountAggregateInputType = {
  id?: true
  internalDiameter?: true
  externalDiameter?: true
  tocDepth?: true
  weight?: true
  grade?: true
  _all?: true
}

export type CasingEnumAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CasingEnum to aggregate.
   */
  where?: Prisma.CasingEnumWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CasingEnums to fetch.
   */
  orderBy?: Prisma.CasingEnumOrderByWithRelationInput | Prisma.CasingEnumOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CasingEnumWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CasingEnums from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CasingEnums.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CasingEnums
  **/
  _count?: true | CasingEnumCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CasingEnumAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CasingEnumSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CasingEnumMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CasingEnumMaxAggregateInputType
}

export type GetCasingEnumAggregateType<T extends CasingEnumAggregateArgs> = {
      [P in keyof T & keyof AggregateCasingEnum]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCasingEnum[P]>
    : Prisma.GetScalarType<T[P], AggregateCasingEnum[P]>
}




export type CasingEnumGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CasingEnumWhereInput
  orderBy?: Prisma.CasingEnumOrderByWithAggregationInput | Prisma.CasingEnumOrderByWithAggregationInput[]
  by: Prisma.CasingEnumScalarFieldEnum[] | Prisma.CasingEnumScalarFieldEnum
  having?: Prisma.CasingEnumScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CasingEnumCountAggregateInputType | true
  _avg?: CasingEnumAvgAggregateInputType
  _sum?: CasingEnumSumAggregateInputType
  _min?: CasingEnumMinAggregateInputType
  _max?: CasingEnumMaxAggregateInputType
}

export type CasingEnumGroupByOutputType = {
  id: string
  internalDiameter: number
  externalDiameter: number
  tocDepth: number
  weight: number | null
  grade: string | null
  _count: CasingEnumCountAggregateOutputType | null
  _avg: CasingEnumAvgAggregateOutputType | null
  _sum: CasingEnumSumAggregateOutputType | null
  _min: CasingEnumMinAggregateOutputType | null
  _max: CasingEnumMaxAggregateOutputType | null
}

type GetCasingEnumGroupByPayload<T extends CasingEnumGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CasingEnumGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CasingEnumGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CasingEnumGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CasingEnumGroupByOutputType[P]>
      }
    >
  >



export type CasingEnumWhereInput = {
  AND?: Prisma.CasingEnumWhereInput | Prisma.CasingEnumWhereInput[]
  OR?: Prisma.CasingEnumWhereInput[]
  NOT?: Prisma.CasingEnumWhereInput | Prisma.CasingEnumWhereInput[]
  id?: Prisma.StringFilter<"CasingEnum"> | string
  internalDiameter?: Prisma.FloatFilter<"CasingEnum"> | number
  externalDiameter?: Prisma.FloatFilter<"CasingEnum"> | number
  tocDepth?: Prisma.IntFilter<"CasingEnum"> | number
  weight?: Prisma.FloatNullableFilter<"CasingEnum"> | number | null
  grade?: Prisma.StringNullableFilter<"CasingEnum"> | string | null
  casings?: Prisma.CasingListRelationFilter
}

export type CasingEnumOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  internalDiameter?: Prisma.SortOrder
  externalDiameter?: Prisma.SortOrder
  tocDepth?: Prisma.SortOrder
  weight?: Prisma.SortOrderInput | Prisma.SortOrder
  grade?: Prisma.SortOrderInput | Prisma.SortOrder
  casings?: Prisma.CasingOrderByRelationAggregateInput
}

export type CasingEnumWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.CasingEnumWhereInput | Prisma.CasingEnumWhereInput[]
  OR?: Prisma.CasingEnumWhereInput[]
  NOT?: Prisma.CasingEnumWhereInput | Prisma.CasingEnumWhereInput[]
  internalDiameter?: Prisma.FloatFilter<"CasingEnum"> | number
  externalDiameter?: Prisma.FloatFilter<"CasingEnum"> | number
  tocDepth?: Prisma.IntFilter<"CasingEnum"> | number
  weight?: Prisma.FloatNullableFilter<"CasingEnum"> | number | null
  grade?: Prisma.StringNullableFilter<"CasingEnum"> | string | null
  casings?: Prisma.CasingListRelationFilter
}, "id">

export type CasingEnumOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  internalDiameter?: Prisma.SortOrder
  externalDiameter?: Prisma.SortOrder
  tocDepth?: Prisma.SortOrder
  weight?: Prisma.SortOrderInput | Prisma.SortOrder
  grade?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.CasingEnumCountOrderByAggregateInput
  _avg?: Prisma.CasingEnumAvgOrderByAggregateInput
  _max?: Prisma.CasingEnumMaxOrderByAggregateInput
  _min?: Prisma.CasingEnumMinOrderByAggregateInput
  _sum?: Prisma.CasingEnumSumOrderByAggregateInput
}

export type CasingEnumScalarWhereWithAggregatesInput = {
  AND?: Prisma.CasingEnumScalarWhereWithAggregatesInput | Prisma.CasingEnumScalarWhereWithAggregatesInput[]
  OR?: Prisma.CasingEnumScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CasingEnumScalarWhereWithAggregatesInput | Prisma.CasingEnumScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"CasingEnum"> | string
  internalDiameter?: Prisma.FloatWithAggregatesFilter<"CasingEnum"> | number
  externalDiameter?: Prisma.FloatWithAggregatesFilter<"CasingEnum"> | number
  tocDepth?: Prisma.IntWithAggregatesFilter<"CasingEnum"> | number
  weight?: Prisma.FloatNullableWithAggregatesFilter<"CasingEnum"> | number | null
  grade?: Prisma.StringNullableWithAggregatesFilter<"CasingEnum"> | string | null
}

export type CasingEnumCreateInput = {
  id?: string
  internalDiameter: number
  externalDiameter: number
  tocDepth: number
  weight?: number | null
  grade?: string | null
  casings?: Prisma.CasingCreateNestedManyWithoutCasingEnumInput
}

export type CasingEnumUncheckedCreateInput = {
  id?: string
  internalDiameter: number
  externalDiameter: number
  tocDepth: number
  weight?: number | null
  grade?: string | null
  casings?: Prisma.CasingUncheckedCreateNestedManyWithoutCasingEnumInput
}

export type CasingEnumUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  internalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  externalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  tocDepth?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  casings?: Prisma.CasingUpdateManyWithoutCasingEnumNestedInput
}

export type CasingEnumUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  internalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  externalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  tocDepth?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  casings?: Prisma.CasingUncheckedUpdateManyWithoutCasingEnumNestedInput
}

export type CasingEnumCreateManyInput = {
  id?: string
  internalDiameter: number
  externalDiameter: number
  tocDepth: number
  weight?: number | null
  grade?: string | null
}

export type CasingEnumUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  internalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  externalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  tocDepth?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type CasingEnumUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  internalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  externalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  tocDepth?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type CasingEnumScalarRelationFilter = {
  is?: Prisma.CasingEnumWhereInput
  isNot?: Prisma.CasingEnumWhereInput
}

export type CasingEnumCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  internalDiameter?: Prisma.SortOrder
  externalDiameter?: Prisma.SortOrder
  tocDepth?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  grade?: Prisma.SortOrder
}

export type CasingEnumAvgOrderByAggregateInput = {
  internalDiameter?: Prisma.SortOrder
  externalDiameter?: Prisma.SortOrder
  tocDepth?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}

export type CasingEnumMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  internalDiameter?: Prisma.SortOrder
  externalDiameter?: Prisma.SortOrder
  tocDepth?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  grade?: Prisma.SortOrder
}

export type CasingEnumMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  internalDiameter?: Prisma.SortOrder
  externalDiameter?: Prisma.SortOrder
  tocDepth?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  grade?: Prisma.SortOrder
}

export type CasingEnumSumOrderByAggregateInput = {
  internalDiameter?: Prisma.SortOrder
  externalDiameter?: Prisma.SortOrder
  tocDepth?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}

export type CasingEnumCreateNestedOneWithoutCasingsInput = {
  create?: Prisma.XOR<Prisma.CasingEnumCreateWithoutCasingsInput, Prisma.CasingEnumUncheckedCreateWithoutCasingsInput>
  connectOrCreate?: Prisma.CasingEnumCreateOrConnectWithoutCasingsInput
  connect?: Prisma.CasingEnumWhereUniqueInput
}

export type CasingEnumUpdateOneRequiredWithoutCasingsNestedInput = {
  create?: Prisma.XOR<Prisma.CasingEnumCreateWithoutCasingsInput, Prisma.CasingEnumUncheckedCreateWithoutCasingsInput>
  connectOrCreate?: Prisma.CasingEnumCreateOrConnectWithoutCasingsInput
  upsert?: Prisma.CasingEnumUpsertWithoutCasingsInput
  connect?: Prisma.CasingEnumWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CasingEnumUpdateToOneWithWhereWithoutCasingsInput, Prisma.CasingEnumUpdateWithoutCasingsInput>, Prisma.CasingEnumUncheckedUpdateWithoutCasingsInput>
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableFloatFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type CasingEnumCreateWithoutCasingsInput = {
  id?: string
  internalDiameter: number
  externalDiameter: number
  tocDepth: number
  weight?: number | null
  grade?: string | null
}

export type CasingEnumUncheckedCreateWithoutCasingsInput = {
  id?: string
  internalDiameter: number
  externalDiameter: number
  tocDepth: number
  weight?: number | null
  grade?: string | null
}

export type CasingEnumCreateOrConnectWithoutCasingsInput = {
  where: Prisma.CasingEnumWhereUniqueInput
  create: Prisma.XOR<Prisma.CasingEnumCreateWithoutCasingsInput, Prisma.CasingEnumUncheckedCreateWithoutCasingsInput>
}

export type CasingEnumUpsertWithoutCasingsInput = {
  update: Prisma.XOR<Prisma.CasingEnumUpdateWithoutCasingsInput, Prisma.CasingEnumUncheckedUpdateWithoutCasingsInput>
  create: Prisma.XOR<Prisma.CasingEnumCreateWithoutCasingsInput, Prisma.CasingEnumUncheckedCreateWithoutCasingsInput>
  where?: Prisma.CasingEnumWhereInput
}

export type CasingEnumUpdateToOneWithWhereWithoutCasingsInput = {
  where?: Prisma.CasingEnumWhereInput
  data: Prisma.XOR<Prisma.CasingEnumUpdateWithoutCasingsInput, Prisma.CasingEnumUncheckedUpdateWithoutCasingsInput>
}

export type CasingEnumUpdateWithoutCasingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  internalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  externalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  tocDepth?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type CasingEnumUncheckedUpdateWithoutCasingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  internalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  externalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  tocDepth?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type CasingEnumCountOutputType
 */

export type CasingEnumCountOutputType = {
  casings: number
}

export type CasingEnumCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  casings?: boolean | CasingEnumCountOutputTypeCountCasingsArgs
}

/**
 * CasingEnumCountOutputType without action
 */
export type CasingEnumCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CasingEnumCountOutputType
   */
  select?: Prisma.CasingEnumCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CasingEnumCountOutputType without action
 */
export type CasingEnumCountOutputTypeCountCasingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CasingWhereInput
}


export type CasingEnumSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  internalDiameter?: boolean
  externalDiameter?: boolean
  tocDepth?: boolean
  weight?: boolean
  grade?: boolean
  casings?: boolean | Prisma.CasingEnum$casingsArgs<ExtArgs>
  _count?: boolean | Prisma.CasingEnumCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["casingEnum"]>

export type CasingEnumSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  internalDiameter?: boolean
  externalDiameter?: boolean
  tocDepth?: boolean
  weight?: boolean
  grade?: boolean
}, ExtArgs["result"]["casingEnum"]>

export type CasingEnumSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  internalDiameter?: boolean
  externalDiameter?: boolean
  tocDepth?: boolean
  weight?: boolean
  grade?: boolean
}, ExtArgs["result"]["casingEnum"]>

export type CasingEnumSelectScalar = {
  id?: boolean
  internalDiameter?: boolean
  externalDiameter?: boolean
  tocDepth?: boolean
  weight?: boolean
  grade?: boolean
}

export type CasingEnumOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "internalDiameter" | "externalDiameter" | "tocDepth" | "weight" | "grade", ExtArgs["result"]["casingEnum"]>
export type CasingEnumInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  casings?: boolean | Prisma.CasingEnum$casingsArgs<ExtArgs>
  _count?: boolean | Prisma.CasingEnumCountOutputTypeDefaultArgs<ExtArgs>
}
export type CasingEnumIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type CasingEnumIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $CasingEnumPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CasingEnum"
  objects: {
    casings: Prisma.$CasingPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    internalDiameter: number
    externalDiameter: number
    tocDepth: number
    weight: number | null
    grade: string | null
  }, ExtArgs["result"]["casingEnum"]>
  composites: {}
}

export type CasingEnumGetPayload<S extends boolean | null | undefined | CasingEnumDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CasingEnumPayload, S>

export type CasingEnumCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CasingEnumFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CasingEnumCountAggregateInputType | true
  }

export interface CasingEnumDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CasingEnum'], meta: { name: 'CasingEnum' } }
  /**
   * Find zero or one CasingEnum that matches the filter.
   * @param {CasingEnumFindUniqueArgs} args - Arguments to find a CasingEnum
   * @example
   * // Get one CasingEnum
   * const casingEnum = await prisma.casingEnum.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CasingEnumFindUniqueArgs>(args: Prisma.SelectSubset<T, CasingEnumFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CasingEnumClient<runtime.Types.Result.GetResult<Prisma.$CasingEnumPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CasingEnum that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CasingEnumFindUniqueOrThrowArgs} args - Arguments to find a CasingEnum
   * @example
   * // Get one CasingEnum
   * const casingEnum = await prisma.casingEnum.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CasingEnumFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CasingEnumFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CasingEnumClient<runtime.Types.Result.GetResult<Prisma.$CasingEnumPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CasingEnum that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CasingEnumFindFirstArgs} args - Arguments to find a CasingEnum
   * @example
   * // Get one CasingEnum
   * const casingEnum = await prisma.casingEnum.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CasingEnumFindFirstArgs>(args?: Prisma.SelectSubset<T, CasingEnumFindFirstArgs<ExtArgs>>): Prisma.Prisma__CasingEnumClient<runtime.Types.Result.GetResult<Prisma.$CasingEnumPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CasingEnum that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CasingEnumFindFirstOrThrowArgs} args - Arguments to find a CasingEnum
   * @example
   * // Get one CasingEnum
   * const casingEnum = await prisma.casingEnum.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CasingEnumFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CasingEnumFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CasingEnumClient<runtime.Types.Result.GetResult<Prisma.$CasingEnumPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CasingEnums that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CasingEnumFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CasingEnums
   * const casingEnums = await prisma.casingEnum.findMany()
   * 
   * // Get first 10 CasingEnums
   * const casingEnums = await prisma.casingEnum.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const casingEnumWithIdOnly = await prisma.casingEnum.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CasingEnumFindManyArgs>(args?: Prisma.SelectSubset<T, CasingEnumFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CasingEnumPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CasingEnum.
   * @param {CasingEnumCreateArgs} args - Arguments to create a CasingEnum.
   * @example
   * // Create one CasingEnum
   * const CasingEnum = await prisma.casingEnum.create({
   *   data: {
   *     // ... data to create a CasingEnum
   *   }
   * })
   * 
   */
  create<T extends CasingEnumCreateArgs>(args: Prisma.SelectSubset<T, CasingEnumCreateArgs<ExtArgs>>): Prisma.Prisma__CasingEnumClient<runtime.Types.Result.GetResult<Prisma.$CasingEnumPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CasingEnums.
   * @param {CasingEnumCreateManyArgs} args - Arguments to create many CasingEnums.
   * @example
   * // Create many CasingEnums
   * const casingEnum = await prisma.casingEnum.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CasingEnumCreateManyArgs>(args?: Prisma.SelectSubset<T, CasingEnumCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CasingEnums and returns the data saved in the database.
   * @param {CasingEnumCreateManyAndReturnArgs} args - Arguments to create many CasingEnums.
   * @example
   * // Create many CasingEnums
   * const casingEnum = await prisma.casingEnum.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CasingEnums and only return the `id`
   * const casingEnumWithIdOnly = await prisma.casingEnum.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CasingEnumCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CasingEnumCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CasingEnumPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CasingEnum.
   * @param {CasingEnumDeleteArgs} args - Arguments to delete one CasingEnum.
   * @example
   * // Delete one CasingEnum
   * const CasingEnum = await prisma.casingEnum.delete({
   *   where: {
   *     // ... filter to delete one CasingEnum
   *   }
   * })
   * 
   */
  delete<T extends CasingEnumDeleteArgs>(args: Prisma.SelectSubset<T, CasingEnumDeleteArgs<ExtArgs>>): Prisma.Prisma__CasingEnumClient<runtime.Types.Result.GetResult<Prisma.$CasingEnumPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CasingEnum.
   * @param {CasingEnumUpdateArgs} args - Arguments to update one CasingEnum.
   * @example
   * // Update one CasingEnum
   * const casingEnum = await prisma.casingEnum.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CasingEnumUpdateArgs>(args: Prisma.SelectSubset<T, CasingEnumUpdateArgs<ExtArgs>>): Prisma.Prisma__CasingEnumClient<runtime.Types.Result.GetResult<Prisma.$CasingEnumPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CasingEnums.
   * @param {CasingEnumDeleteManyArgs} args - Arguments to filter CasingEnums to delete.
   * @example
   * // Delete a few CasingEnums
   * const { count } = await prisma.casingEnum.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CasingEnumDeleteManyArgs>(args?: Prisma.SelectSubset<T, CasingEnumDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CasingEnums.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CasingEnumUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CasingEnums
   * const casingEnum = await prisma.casingEnum.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CasingEnumUpdateManyArgs>(args: Prisma.SelectSubset<T, CasingEnumUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CasingEnums and returns the data updated in the database.
   * @param {CasingEnumUpdateManyAndReturnArgs} args - Arguments to update many CasingEnums.
   * @example
   * // Update many CasingEnums
   * const casingEnum = await prisma.casingEnum.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CasingEnums and only return the `id`
   * const casingEnumWithIdOnly = await prisma.casingEnum.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CasingEnumUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CasingEnumUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CasingEnumPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CasingEnum.
   * @param {CasingEnumUpsertArgs} args - Arguments to update or create a CasingEnum.
   * @example
   * // Update or create a CasingEnum
   * const casingEnum = await prisma.casingEnum.upsert({
   *   create: {
   *     // ... data to create a CasingEnum
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CasingEnum we want to update
   *   }
   * })
   */
  upsert<T extends CasingEnumUpsertArgs>(args: Prisma.SelectSubset<T, CasingEnumUpsertArgs<ExtArgs>>): Prisma.Prisma__CasingEnumClient<runtime.Types.Result.GetResult<Prisma.$CasingEnumPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CasingEnums.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CasingEnumCountArgs} args - Arguments to filter CasingEnums to count.
   * @example
   * // Count the number of CasingEnums
   * const count = await prisma.casingEnum.count({
   *   where: {
   *     // ... the filter for the CasingEnums we want to count
   *   }
   * })
  **/
  count<T extends CasingEnumCountArgs>(
    args?: Prisma.Subset<T, CasingEnumCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CasingEnumCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CasingEnum.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CasingEnumAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CasingEnumAggregateArgs>(args: Prisma.Subset<T, CasingEnumAggregateArgs>): Prisma.PrismaPromise<GetCasingEnumAggregateType<T>>

  /**
   * Group by CasingEnum.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CasingEnumGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CasingEnumGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CasingEnumGroupByArgs['orderBy'] }
      : { orderBy?: CasingEnumGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CasingEnumGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCasingEnumGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CasingEnum model
 */
readonly fields: CasingEnumFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CasingEnum.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CasingEnumClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  casings<T extends Prisma.CasingEnum$casingsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CasingEnum$casingsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CasingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CasingEnum model
 */
export interface CasingEnumFieldRefs {
  readonly id: Prisma.FieldRef<"CasingEnum", 'String'>
  readonly internalDiameter: Prisma.FieldRef<"CasingEnum", 'Float'>
  readonly externalDiameter: Prisma.FieldRef<"CasingEnum", 'Float'>
  readonly tocDepth: Prisma.FieldRef<"CasingEnum", 'Int'>
  readonly weight: Prisma.FieldRef<"CasingEnum", 'Float'>
  readonly grade: Prisma.FieldRef<"CasingEnum", 'String'>
}
    

// Custom InputTypes
/**
 * CasingEnum findUnique
 */
export type CasingEnumFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CasingEnum
   */
  select?: Prisma.CasingEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CasingEnum
   */
  omit?: Prisma.CasingEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CasingEnumInclude<ExtArgs> | null
  /**
   * Filter, which CasingEnum to fetch.
   */
  where: Prisma.CasingEnumWhereUniqueInput
}

/**
 * CasingEnum findUniqueOrThrow
 */
export type CasingEnumFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CasingEnum
   */
  select?: Prisma.CasingEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CasingEnum
   */
  omit?: Prisma.CasingEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CasingEnumInclude<ExtArgs> | null
  /**
   * Filter, which CasingEnum to fetch.
   */
  where: Prisma.CasingEnumWhereUniqueInput
}

/**
 * CasingEnum findFirst
 */
export type CasingEnumFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CasingEnum
   */
  select?: Prisma.CasingEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CasingEnum
   */
  omit?: Prisma.CasingEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CasingEnumInclude<ExtArgs> | null
  /**
   * Filter, which CasingEnum to fetch.
   */
  where?: Prisma.CasingEnumWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CasingEnums to fetch.
   */
  orderBy?: Prisma.CasingEnumOrderByWithRelationInput | Prisma.CasingEnumOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CasingEnums.
   */
  cursor?: Prisma.CasingEnumWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CasingEnums from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CasingEnums.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CasingEnums.
   */
  distinct?: Prisma.CasingEnumScalarFieldEnum | Prisma.CasingEnumScalarFieldEnum[]
}

/**
 * CasingEnum findFirstOrThrow
 */
export type CasingEnumFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CasingEnum
   */
  select?: Prisma.CasingEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CasingEnum
   */
  omit?: Prisma.CasingEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CasingEnumInclude<ExtArgs> | null
  /**
   * Filter, which CasingEnum to fetch.
   */
  where?: Prisma.CasingEnumWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CasingEnums to fetch.
   */
  orderBy?: Prisma.CasingEnumOrderByWithRelationInput | Prisma.CasingEnumOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CasingEnums.
   */
  cursor?: Prisma.CasingEnumWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CasingEnums from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CasingEnums.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CasingEnums.
   */
  distinct?: Prisma.CasingEnumScalarFieldEnum | Prisma.CasingEnumScalarFieldEnum[]
}

/**
 * CasingEnum findMany
 */
export type CasingEnumFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CasingEnum
   */
  select?: Prisma.CasingEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CasingEnum
   */
  omit?: Prisma.CasingEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CasingEnumInclude<ExtArgs> | null
  /**
   * Filter, which CasingEnums to fetch.
   */
  where?: Prisma.CasingEnumWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CasingEnums to fetch.
   */
  orderBy?: Prisma.CasingEnumOrderByWithRelationInput | Prisma.CasingEnumOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CasingEnums.
   */
  cursor?: Prisma.CasingEnumWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CasingEnums from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CasingEnums.
   */
  skip?: number
  distinct?: Prisma.CasingEnumScalarFieldEnum | Prisma.CasingEnumScalarFieldEnum[]
}

/**
 * CasingEnum create
 */
export type CasingEnumCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CasingEnum
   */
  select?: Prisma.CasingEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CasingEnum
   */
  omit?: Prisma.CasingEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CasingEnumInclude<ExtArgs> | null
  /**
   * The data needed to create a CasingEnum.
   */
  data: Prisma.XOR<Prisma.CasingEnumCreateInput, Prisma.CasingEnumUncheckedCreateInput>
}

/**
 * CasingEnum createMany
 */
export type CasingEnumCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CasingEnums.
   */
  data: Prisma.CasingEnumCreateManyInput | Prisma.CasingEnumCreateManyInput[]
}

/**
 * CasingEnum createManyAndReturn
 */
export type CasingEnumCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CasingEnum
   */
  select?: Prisma.CasingEnumSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CasingEnum
   */
  omit?: Prisma.CasingEnumOmit<ExtArgs> | null
  /**
   * The data used to create many CasingEnums.
   */
  data: Prisma.CasingEnumCreateManyInput | Prisma.CasingEnumCreateManyInput[]
}

/**
 * CasingEnum update
 */
export type CasingEnumUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CasingEnum
   */
  select?: Prisma.CasingEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CasingEnum
   */
  omit?: Prisma.CasingEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CasingEnumInclude<ExtArgs> | null
  /**
   * The data needed to update a CasingEnum.
   */
  data: Prisma.XOR<Prisma.CasingEnumUpdateInput, Prisma.CasingEnumUncheckedUpdateInput>
  /**
   * Choose, which CasingEnum to update.
   */
  where: Prisma.CasingEnumWhereUniqueInput
}

/**
 * CasingEnum updateMany
 */
export type CasingEnumUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CasingEnums.
   */
  data: Prisma.XOR<Prisma.CasingEnumUpdateManyMutationInput, Prisma.CasingEnumUncheckedUpdateManyInput>
  /**
   * Filter which CasingEnums to update
   */
  where?: Prisma.CasingEnumWhereInput
  /**
   * Limit how many CasingEnums to update.
   */
  limit?: number
}

/**
 * CasingEnum updateManyAndReturn
 */
export type CasingEnumUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CasingEnum
   */
  select?: Prisma.CasingEnumSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CasingEnum
   */
  omit?: Prisma.CasingEnumOmit<ExtArgs> | null
  /**
   * The data used to update CasingEnums.
   */
  data: Prisma.XOR<Prisma.CasingEnumUpdateManyMutationInput, Prisma.CasingEnumUncheckedUpdateManyInput>
  /**
   * Filter which CasingEnums to update
   */
  where?: Prisma.CasingEnumWhereInput
  /**
   * Limit how many CasingEnums to update.
   */
  limit?: number
}

/**
 * CasingEnum upsert
 */
export type CasingEnumUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CasingEnum
   */
  select?: Prisma.CasingEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CasingEnum
   */
  omit?: Prisma.CasingEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CasingEnumInclude<ExtArgs> | null
  /**
   * The filter to search for the CasingEnum to update in case it exists.
   */
  where: Prisma.CasingEnumWhereUniqueInput
  /**
   * In case the CasingEnum found by the `where` argument doesn't exist, create a new CasingEnum with this data.
   */
  create: Prisma.XOR<Prisma.CasingEnumCreateInput, Prisma.CasingEnumUncheckedCreateInput>
  /**
   * In case the CasingEnum was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CasingEnumUpdateInput, Prisma.CasingEnumUncheckedUpdateInput>
}

/**
 * CasingEnum delete
 */
export type CasingEnumDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CasingEnum
   */
  select?: Prisma.CasingEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CasingEnum
   */
  omit?: Prisma.CasingEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CasingEnumInclude<ExtArgs> | null
  /**
   * Filter which CasingEnum to delete.
   */
  where: Prisma.CasingEnumWhereUniqueInput
}

/**
 * CasingEnum deleteMany
 */
export type CasingEnumDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CasingEnums to delete
   */
  where?: Prisma.CasingEnumWhereInput
  /**
   * Limit how many CasingEnums to delete.
   */
  limit?: number
}

/**
 * CasingEnum.casings
 */
export type CasingEnum$casingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Casing
   */
  select?: Prisma.CasingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Casing
   */
  omit?: Prisma.CasingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CasingInclude<ExtArgs> | null
  where?: Prisma.CasingWhereInput
  orderBy?: Prisma.CasingOrderByWithRelationInput | Prisma.CasingOrderByWithRelationInput[]
  cursor?: Prisma.CasingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CasingScalarFieldEnum | Prisma.CasingScalarFieldEnum[]
}

/**
 * CasingEnum without action
 */
export type CasingEnumDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CasingEnum
   */
  select?: Prisma.CasingEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CasingEnum
   */
  omit?: Prisma.CasingEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CasingEnumInclude<ExtArgs> | null
}
