
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `TubingEnum` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TubingEnum
 * 
 */
export type TubingEnumModel = runtime.Types.Result.DefaultSelection<Prisma.$TubingEnumPayload>

export type AggregateTubingEnum = {
  _count: TubingEnumCountAggregateOutputType | null
  _avg: TubingEnumAvgAggregateOutputType | null
  _sum: TubingEnumSumAggregateOutputType | null
  _min: TubingEnumMinAggregateOutputType | null
  _max: TubingEnumMaxAggregateOutputType | null
}

export type TubingEnumAvgAggregateOutputType = {
  internalDiameter: number | null
  externalDiameter: number | null
  weight: number | null
}

export type TubingEnumSumAggregateOutputType = {
  internalDiameter: number | null
  externalDiameter: number | null
  weight: number | null
}

export type TubingEnumMinAggregateOutputType = {
  id: string | null
  internalDiameter: number | null
  externalDiameter: number | null
  weight: number | null
  grade: string | null
  name: string | null
}

export type TubingEnumMaxAggregateOutputType = {
  id: string | null
  internalDiameter: number | null
  externalDiameter: number | null
  weight: number | null
  grade: string | null
  name: string | null
}

export type TubingEnumCountAggregateOutputType = {
  id: number
  internalDiameter: number
  externalDiameter: number
  weight: number
  grade: number
  name: number
  _all: number
}


export type TubingEnumAvgAggregateInputType = {
  internalDiameter?: true
  externalDiameter?: true
  weight?: true
}

export type TubingEnumSumAggregateInputType = {
  internalDiameter?: true
  externalDiameter?: true
  weight?: true
}

export type TubingEnumMinAggregateInputType = {
  id?: true
  internalDiameter?: true
  externalDiameter?: true
  weight?: true
  grade?: true
  name?: true
}

export type TubingEnumMaxAggregateInputType = {
  id?: true
  internalDiameter?: true
  externalDiameter?: true
  weight?: true
  grade?: true
  name?: true
}

export type TubingEnumCountAggregateInputType = {
  id?: true
  internalDiameter?: true
  externalDiameter?: true
  weight?: true
  grade?: true
  name?: true
  _all?: true
}

export type TubingEnumAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TubingEnum to aggregate.
   */
  where?: Prisma.TubingEnumWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TubingEnums to fetch.
   */
  orderBy?: Prisma.TubingEnumOrderByWithRelationInput | Prisma.TubingEnumOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TubingEnumWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TubingEnums from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TubingEnums.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TubingEnums
  **/
  _count?: true | TubingEnumCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TubingEnumAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TubingEnumSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TubingEnumMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TubingEnumMaxAggregateInputType
}

export type GetTubingEnumAggregateType<T extends TubingEnumAggregateArgs> = {
      [P in keyof T & keyof AggregateTubingEnum]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTubingEnum[P]>
    : Prisma.GetScalarType<T[P], AggregateTubingEnum[P]>
}




export type TubingEnumGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TubingEnumWhereInput
  orderBy?: Prisma.TubingEnumOrderByWithAggregationInput | Prisma.TubingEnumOrderByWithAggregationInput[]
  by: Prisma.TubingEnumScalarFieldEnum[] | Prisma.TubingEnumScalarFieldEnum
  having?: Prisma.TubingEnumScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TubingEnumCountAggregateInputType | true
  _avg?: TubingEnumAvgAggregateInputType
  _sum?: TubingEnumSumAggregateInputType
  _min?: TubingEnumMinAggregateInputType
  _max?: TubingEnumMaxAggregateInputType
}

export type TubingEnumGroupByOutputType = {
  id: string
  internalDiameter: number
  externalDiameter: number
  weight: number
  grade: string
  name: string
  _count: TubingEnumCountAggregateOutputType | null
  _avg: TubingEnumAvgAggregateOutputType | null
  _sum: TubingEnumSumAggregateOutputType | null
  _min: TubingEnumMinAggregateOutputType | null
  _max: TubingEnumMaxAggregateOutputType | null
}

type GetTubingEnumGroupByPayload<T extends TubingEnumGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TubingEnumGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TubingEnumGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TubingEnumGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TubingEnumGroupByOutputType[P]>
      }
    >
  >



export type TubingEnumWhereInput = {
  AND?: Prisma.TubingEnumWhereInput | Prisma.TubingEnumWhereInput[]
  OR?: Prisma.TubingEnumWhereInput[]
  NOT?: Prisma.TubingEnumWhereInput | Prisma.TubingEnumWhereInput[]
  id?: Prisma.StringFilter<"TubingEnum"> | string
  internalDiameter?: Prisma.FloatFilter<"TubingEnum"> | number
  externalDiameter?: Prisma.FloatFilter<"TubingEnum"> | number
  weight?: Prisma.FloatFilter<"TubingEnum"> | number
  grade?: Prisma.StringFilter<"TubingEnum"> | string
  name?: Prisma.StringFilter<"TubingEnum"> | string
  tubings?: Prisma.TubingListRelationFilter
}

export type TubingEnumOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  internalDiameter?: Prisma.SortOrder
  externalDiameter?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  grade?: Prisma.SortOrder
  name?: Prisma.SortOrder
  tubings?: Prisma.TubingOrderByRelationAggregateInput
}

export type TubingEnumWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TubingEnumWhereInput | Prisma.TubingEnumWhereInput[]
  OR?: Prisma.TubingEnumWhereInput[]
  NOT?: Prisma.TubingEnumWhereInput | Prisma.TubingEnumWhereInput[]
  internalDiameter?: Prisma.FloatFilter<"TubingEnum"> | number
  externalDiameter?: Prisma.FloatFilter<"TubingEnum"> | number
  weight?: Prisma.FloatFilter<"TubingEnum"> | number
  grade?: Prisma.StringFilter<"TubingEnum"> | string
  name?: Prisma.StringFilter<"TubingEnum"> | string
  tubings?: Prisma.TubingListRelationFilter
}, "id">

export type TubingEnumOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  internalDiameter?: Prisma.SortOrder
  externalDiameter?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  grade?: Prisma.SortOrder
  name?: Prisma.SortOrder
  _count?: Prisma.TubingEnumCountOrderByAggregateInput
  _avg?: Prisma.TubingEnumAvgOrderByAggregateInput
  _max?: Prisma.TubingEnumMaxOrderByAggregateInput
  _min?: Prisma.TubingEnumMinOrderByAggregateInput
  _sum?: Prisma.TubingEnumSumOrderByAggregateInput
}

export type TubingEnumScalarWhereWithAggregatesInput = {
  AND?: Prisma.TubingEnumScalarWhereWithAggregatesInput | Prisma.TubingEnumScalarWhereWithAggregatesInput[]
  OR?: Prisma.TubingEnumScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TubingEnumScalarWhereWithAggregatesInput | Prisma.TubingEnumScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TubingEnum"> | string
  internalDiameter?: Prisma.FloatWithAggregatesFilter<"TubingEnum"> | number
  externalDiameter?: Prisma.FloatWithAggregatesFilter<"TubingEnum"> | number
  weight?: Prisma.FloatWithAggregatesFilter<"TubingEnum"> | number
  grade?: Prisma.StringWithAggregatesFilter<"TubingEnum"> | string
  name?: Prisma.StringWithAggregatesFilter<"TubingEnum"> | string
}

export type TubingEnumCreateInput = {
  id?: string
  internalDiameter: number
  externalDiameter: number
  weight: number
  grade: string
  name: string
  tubings?: Prisma.TubingCreateNestedManyWithoutTubingEnumInput
}

export type TubingEnumUncheckedCreateInput = {
  id?: string
  internalDiameter: number
  externalDiameter: number
  weight: number
  grade: string
  name: string
  tubings?: Prisma.TubingUncheckedCreateNestedManyWithoutTubingEnumInput
}

export type TubingEnumUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  internalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  externalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  weight?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  tubings?: Prisma.TubingUpdateManyWithoutTubingEnumNestedInput
}

export type TubingEnumUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  internalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  externalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  weight?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  tubings?: Prisma.TubingUncheckedUpdateManyWithoutTubingEnumNestedInput
}

export type TubingEnumCreateManyInput = {
  id?: string
  internalDiameter: number
  externalDiameter: number
  weight: number
  grade: string
  name: string
}

export type TubingEnumUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  internalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  externalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  weight?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TubingEnumUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  internalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  externalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  weight?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TubingEnumScalarRelationFilter = {
  is?: Prisma.TubingEnumWhereInput
  isNot?: Prisma.TubingEnumWhereInput
}

export type TubingEnumCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  internalDiameter?: Prisma.SortOrder
  externalDiameter?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  grade?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type TubingEnumAvgOrderByAggregateInput = {
  internalDiameter?: Prisma.SortOrder
  externalDiameter?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}

export type TubingEnumMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  internalDiameter?: Prisma.SortOrder
  externalDiameter?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  grade?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type TubingEnumMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  internalDiameter?: Prisma.SortOrder
  externalDiameter?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  grade?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type TubingEnumSumOrderByAggregateInput = {
  internalDiameter?: Prisma.SortOrder
  externalDiameter?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}

export type TubingEnumCreateNestedOneWithoutTubingsInput = {
  create?: Prisma.XOR<Prisma.TubingEnumCreateWithoutTubingsInput, Prisma.TubingEnumUncheckedCreateWithoutTubingsInput>
  connectOrCreate?: Prisma.TubingEnumCreateOrConnectWithoutTubingsInput
  connect?: Prisma.TubingEnumWhereUniqueInput
}

export type TubingEnumUpdateOneRequiredWithoutTubingsNestedInput = {
  create?: Prisma.XOR<Prisma.TubingEnumCreateWithoutTubingsInput, Prisma.TubingEnumUncheckedCreateWithoutTubingsInput>
  connectOrCreate?: Prisma.TubingEnumCreateOrConnectWithoutTubingsInput
  upsert?: Prisma.TubingEnumUpsertWithoutTubingsInput
  connect?: Prisma.TubingEnumWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TubingEnumUpdateToOneWithWhereWithoutTubingsInput, Prisma.TubingEnumUpdateWithoutTubingsInput>, Prisma.TubingEnumUncheckedUpdateWithoutTubingsInput>
}

export type TubingEnumCreateWithoutTubingsInput = {
  id?: string
  internalDiameter: number
  externalDiameter: number
  weight: number
  grade: string
  name: string
}

export type TubingEnumUncheckedCreateWithoutTubingsInput = {
  id?: string
  internalDiameter: number
  externalDiameter: number
  weight: number
  grade: string
  name: string
}

export type TubingEnumCreateOrConnectWithoutTubingsInput = {
  where: Prisma.TubingEnumWhereUniqueInput
  create: Prisma.XOR<Prisma.TubingEnumCreateWithoutTubingsInput, Prisma.TubingEnumUncheckedCreateWithoutTubingsInput>
}

export type TubingEnumUpsertWithoutTubingsInput = {
  update: Prisma.XOR<Prisma.TubingEnumUpdateWithoutTubingsInput, Prisma.TubingEnumUncheckedUpdateWithoutTubingsInput>
  create: Prisma.XOR<Prisma.TubingEnumCreateWithoutTubingsInput, Prisma.TubingEnumUncheckedCreateWithoutTubingsInput>
  where?: Prisma.TubingEnumWhereInput
}

export type TubingEnumUpdateToOneWithWhereWithoutTubingsInput = {
  where?: Prisma.TubingEnumWhereInput
  data: Prisma.XOR<Prisma.TubingEnumUpdateWithoutTubingsInput, Prisma.TubingEnumUncheckedUpdateWithoutTubingsInput>
}

export type TubingEnumUpdateWithoutTubingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  internalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  externalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  weight?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TubingEnumUncheckedUpdateWithoutTubingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  internalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  externalDiameter?: Prisma.FloatFieldUpdateOperationsInput | number
  weight?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type TubingEnumCountOutputType
 */

export type TubingEnumCountOutputType = {
  tubings: number
}

export type TubingEnumCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tubings?: boolean | TubingEnumCountOutputTypeCountTubingsArgs
}

/**
 * TubingEnumCountOutputType without action
 */
export type TubingEnumCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TubingEnumCountOutputType
   */
  select?: Prisma.TubingEnumCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TubingEnumCountOutputType without action
 */
export type TubingEnumCountOutputTypeCountTubingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TubingWhereInput
}


export type TubingEnumSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  internalDiameter?: boolean
  externalDiameter?: boolean
  weight?: boolean
  grade?: boolean
  name?: boolean
  tubings?: boolean | Prisma.TubingEnum$tubingsArgs<ExtArgs>
  _count?: boolean | Prisma.TubingEnumCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tubingEnum"]>

export type TubingEnumSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  internalDiameter?: boolean
  externalDiameter?: boolean
  weight?: boolean
  grade?: boolean
  name?: boolean
}, ExtArgs["result"]["tubingEnum"]>

export type TubingEnumSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  internalDiameter?: boolean
  externalDiameter?: boolean
  weight?: boolean
  grade?: boolean
  name?: boolean
}, ExtArgs["result"]["tubingEnum"]>

export type TubingEnumSelectScalar = {
  id?: boolean
  internalDiameter?: boolean
  externalDiameter?: boolean
  weight?: boolean
  grade?: boolean
  name?: boolean
}

export type TubingEnumOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "internalDiameter" | "externalDiameter" | "weight" | "grade" | "name", ExtArgs["result"]["tubingEnum"]>
export type TubingEnumInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tubings?: boolean | Prisma.TubingEnum$tubingsArgs<ExtArgs>
  _count?: boolean | Prisma.TubingEnumCountOutputTypeDefaultArgs<ExtArgs>
}
export type TubingEnumIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type TubingEnumIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $TubingEnumPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TubingEnum"
  objects: {
    tubings: Prisma.$TubingPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    internalDiameter: number
    externalDiameter: number
    weight: number
    grade: string
    name: string
  }, ExtArgs["result"]["tubingEnum"]>
  composites: {}
}

export type TubingEnumGetPayload<S extends boolean | null | undefined | TubingEnumDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TubingEnumPayload, S>

export type TubingEnumCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TubingEnumFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TubingEnumCountAggregateInputType | true
  }

export interface TubingEnumDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TubingEnum'], meta: { name: 'TubingEnum' } }
  /**
   * Find zero or one TubingEnum that matches the filter.
   * @param {TubingEnumFindUniqueArgs} args - Arguments to find a TubingEnum
   * @example
   * // Get one TubingEnum
   * const tubingEnum = await prisma.tubingEnum.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TubingEnumFindUniqueArgs>(args: Prisma.SelectSubset<T, TubingEnumFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TubingEnumClient<runtime.Types.Result.GetResult<Prisma.$TubingEnumPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TubingEnum that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TubingEnumFindUniqueOrThrowArgs} args - Arguments to find a TubingEnum
   * @example
   * // Get one TubingEnum
   * const tubingEnum = await prisma.tubingEnum.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TubingEnumFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TubingEnumFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TubingEnumClient<runtime.Types.Result.GetResult<Prisma.$TubingEnumPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TubingEnum that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TubingEnumFindFirstArgs} args - Arguments to find a TubingEnum
   * @example
   * // Get one TubingEnum
   * const tubingEnum = await prisma.tubingEnum.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TubingEnumFindFirstArgs>(args?: Prisma.SelectSubset<T, TubingEnumFindFirstArgs<ExtArgs>>): Prisma.Prisma__TubingEnumClient<runtime.Types.Result.GetResult<Prisma.$TubingEnumPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TubingEnum that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TubingEnumFindFirstOrThrowArgs} args - Arguments to find a TubingEnum
   * @example
   * // Get one TubingEnum
   * const tubingEnum = await prisma.tubingEnum.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TubingEnumFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TubingEnumFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TubingEnumClient<runtime.Types.Result.GetResult<Prisma.$TubingEnumPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TubingEnums that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TubingEnumFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TubingEnums
   * const tubingEnums = await prisma.tubingEnum.findMany()
   * 
   * // Get first 10 TubingEnums
   * const tubingEnums = await prisma.tubingEnum.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const tubingEnumWithIdOnly = await prisma.tubingEnum.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TubingEnumFindManyArgs>(args?: Prisma.SelectSubset<T, TubingEnumFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TubingEnumPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TubingEnum.
   * @param {TubingEnumCreateArgs} args - Arguments to create a TubingEnum.
   * @example
   * // Create one TubingEnum
   * const TubingEnum = await prisma.tubingEnum.create({
   *   data: {
   *     // ... data to create a TubingEnum
   *   }
   * })
   * 
   */
  create<T extends TubingEnumCreateArgs>(args: Prisma.SelectSubset<T, TubingEnumCreateArgs<ExtArgs>>): Prisma.Prisma__TubingEnumClient<runtime.Types.Result.GetResult<Prisma.$TubingEnumPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TubingEnums.
   * @param {TubingEnumCreateManyArgs} args - Arguments to create many TubingEnums.
   * @example
   * // Create many TubingEnums
   * const tubingEnum = await prisma.tubingEnum.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TubingEnumCreateManyArgs>(args?: Prisma.SelectSubset<T, TubingEnumCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TubingEnums and returns the data saved in the database.
   * @param {TubingEnumCreateManyAndReturnArgs} args - Arguments to create many TubingEnums.
   * @example
   * // Create many TubingEnums
   * const tubingEnum = await prisma.tubingEnum.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TubingEnums and only return the `id`
   * const tubingEnumWithIdOnly = await prisma.tubingEnum.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TubingEnumCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TubingEnumCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TubingEnumPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TubingEnum.
   * @param {TubingEnumDeleteArgs} args - Arguments to delete one TubingEnum.
   * @example
   * // Delete one TubingEnum
   * const TubingEnum = await prisma.tubingEnum.delete({
   *   where: {
   *     // ... filter to delete one TubingEnum
   *   }
   * })
   * 
   */
  delete<T extends TubingEnumDeleteArgs>(args: Prisma.SelectSubset<T, TubingEnumDeleteArgs<ExtArgs>>): Prisma.Prisma__TubingEnumClient<runtime.Types.Result.GetResult<Prisma.$TubingEnumPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TubingEnum.
   * @param {TubingEnumUpdateArgs} args - Arguments to update one TubingEnum.
   * @example
   * // Update one TubingEnum
   * const tubingEnum = await prisma.tubingEnum.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TubingEnumUpdateArgs>(args: Prisma.SelectSubset<T, TubingEnumUpdateArgs<ExtArgs>>): Prisma.Prisma__TubingEnumClient<runtime.Types.Result.GetResult<Prisma.$TubingEnumPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TubingEnums.
   * @param {TubingEnumDeleteManyArgs} args - Arguments to filter TubingEnums to delete.
   * @example
   * // Delete a few TubingEnums
   * const { count } = await prisma.tubingEnum.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TubingEnumDeleteManyArgs>(args?: Prisma.SelectSubset<T, TubingEnumDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TubingEnums.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TubingEnumUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TubingEnums
   * const tubingEnum = await prisma.tubingEnum.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TubingEnumUpdateManyArgs>(args: Prisma.SelectSubset<T, TubingEnumUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TubingEnums and returns the data updated in the database.
   * @param {TubingEnumUpdateManyAndReturnArgs} args - Arguments to update many TubingEnums.
   * @example
   * // Update many TubingEnums
   * const tubingEnum = await prisma.tubingEnum.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TubingEnums and only return the `id`
   * const tubingEnumWithIdOnly = await prisma.tubingEnum.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TubingEnumUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TubingEnumUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TubingEnumPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TubingEnum.
   * @param {TubingEnumUpsertArgs} args - Arguments to update or create a TubingEnum.
   * @example
   * // Update or create a TubingEnum
   * const tubingEnum = await prisma.tubingEnum.upsert({
   *   create: {
   *     // ... data to create a TubingEnum
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TubingEnum we want to update
   *   }
   * })
   */
  upsert<T extends TubingEnumUpsertArgs>(args: Prisma.SelectSubset<T, TubingEnumUpsertArgs<ExtArgs>>): Prisma.Prisma__TubingEnumClient<runtime.Types.Result.GetResult<Prisma.$TubingEnumPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TubingEnums.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TubingEnumCountArgs} args - Arguments to filter TubingEnums to count.
   * @example
   * // Count the number of TubingEnums
   * const count = await prisma.tubingEnum.count({
   *   where: {
   *     // ... the filter for the TubingEnums we want to count
   *   }
   * })
  **/
  count<T extends TubingEnumCountArgs>(
    args?: Prisma.Subset<T, TubingEnumCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TubingEnumCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TubingEnum.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TubingEnumAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TubingEnumAggregateArgs>(args: Prisma.Subset<T, TubingEnumAggregateArgs>): Prisma.PrismaPromise<GetTubingEnumAggregateType<T>>

  /**
   * Group by TubingEnum.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TubingEnumGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TubingEnumGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TubingEnumGroupByArgs['orderBy'] }
      : { orderBy?: TubingEnumGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TubingEnumGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTubingEnumGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TubingEnum model
 */
readonly fields: TubingEnumFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TubingEnum.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TubingEnumClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  tubings<T extends Prisma.TubingEnum$tubingsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TubingEnum$tubingsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TubingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TubingEnum model
 */
export interface TubingEnumFieldRefs {
  readonly id: Prisma.FieldRef<"TubingEnum", 'String'>
  readonly internalDiameter: Prisma.FieldRef<"TubingEnum", 'Float'>
  readonly externalDiameter: Prisma.FieldRef<"TubingEnum", 'Float'>
  readonly weight: Prisma.FieldRef<"TubingEnum", 'Float'>
  readonly grade: Prisma.FieldRef<"TubingEnum", 'String'>
  readonly name: Prisma.FieldRef<"TubingEnum", 'String'>
}
    

// Custom InputTypes
/**
 * TubingEnum findUnique
 */
export type TubingEnumFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TubingEnum
   */
  select?: Prisma.TubingEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TubingEnum
   */
  omit?: Prisma.TubingEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TubingEnumInclude<ExtArgs> | null
  /**
   * Filter, which TubingEnum to fetch.
   */
  where: Prisma.TubingEnumWhereUniqueInput
}

/**
 * TubingEnum findUniqueOrThrow
 */
export type TubingEnumFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TubingEnum
   */
  select?: Prisma.TubingEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TubingEnum
   */
  omit?: Prisma.TubingEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TubingEnumInclude<ExtArgs> | null
  /**
   * Filter, which TubingEnum to fetch.
   */
  where: Prisma.TubingEnumWhereUniqueInput
}

/**
 * TubingEnum findFirst
 */
export type TubingEnumFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TubingEnum
   */
  select?: Prisma.TubingEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TubingEnum
   */
  omit?: Prisma.TubingEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TubingEnumInclude<ExtArgs> | null
  /**
   * Filter, which TubingEnum to fetch.
   */
  where?: Prisma.TubingEnumWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TubingEnums to fetch.
   */
  orderBy?: Prisma.TubingEnumOrderByWithRelationInput | Prisma.TubingEnumOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TubingEnums.
   */
  cursor?: Prisma.TubingEnumWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TubingEnums from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TubingEnums.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TubingEnums.
   */
  distinct?: Prisma.TubingEnumScalarFieldEnum | Prisma.TubingEnumScalarFieldEnum[]
}

/**
 * TubingEnum findFirstOrThrow
 */
export type TubingEnumFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TubingEnum
   */
  select?: Prisma.TubingEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TubingEnum
   */
  omit?: Prisma.TubingEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TubingEnumInclude<ExtArgs> | null
  /**
   * Filter, which TubingEnum to fetch.
   */
  where?: Prisma.TubingEnumWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TubingEnums to fetch.
   */
  orderBy?: Prisma.TubingEnumOrderByWithRelationInput | Prisma.TubingEnumOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TubingEnums.
   */
  cursor?: Prisma.TubingEnumWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TubingEnums from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TubingEnums.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TubingEnums.
   */
  distinct?: Prisma.TubingEnumScalarFieldEnum | Prisma.TubingEnumScalarFieldEnum[]
}

/**
 * TubingEnum findMany
 */
export type TubingEnumFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TubingEnum
   */
  select?: Prisma.TubingEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TubingEnum
   */
  omit?: Prisma.TubingEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TubingEnumInclude<ExtArgs> | null
  /**
   * Filter, which TubingEnums to fetch.
   */
  where?: Prisma.TubingEnumWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TubingEnums to fetch.
   */
  orderBy?: Prisma.TubingEnumOrderByWithRelationInput | Prisma.TubingEnumOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TubingEnums.
   */
  cursor?: Prisma.TubingEnumWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TubingEnums from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TubingEnums.
   */
  skip?: number
  distinct?: Prisma.TubingEnumScalarFieldEnum | Prisma.TubingEnumScalarFieldEnum[]
}

/**
 * TubingEnum create
 */
export type TubingEnumCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TubingEnum
   */
  select?: Prisma.TubingEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TubingEnum
   */
  omit?: Prisma.TubingEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TubingEnumInclude<ExtArgs> | null
  /**
   * The data needed to create a TubingEnum.
   */
  data: Prisma.XOR<Prisma.TubingEnumCreateInput, Prisma.TubingEnumUncheckedCreateInput>
}

/**
 * TubingEnum createMany
 */
export type TubingEnumCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TubingEnums.
   */
  data: Prisma.TubingEnumCreateManyInput | Prisma.TubingEnumCreateManyInput[]
}

/**
 * TubingEnum createManyAndReturn
 */
export type TubingEnumCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TubingEnum
   */
  select?: Prisma.TubingEnumSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TubingEnum
   */
  omit?: Prisma.TubingEnumOmit<ExtArgs> | null
  /**
   * The data used to create many TubingEnums.
   */
  data: Prisma.TubingEnumCreateManyInput | Prisma.TubingEnumCreateManyInput[]
}

/**
 * TubingEnum update
 */
export type TubingEnumUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TubingEnum
   */
  select?: Prisma.TubingEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TubingEnum
   */
  omit?: Prisma.TubingEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TubingEnumInclude<ExtArgs> | null
  /**
   * The data needed to update a TubingEnum.
   */
  data: Prisma.XOR<Prisma.TubingEnumUpdateInput, Prisma.TubingEnumUncheckedUpdateInput>
  /**
   * Choose, which TubingEnum to update.
   */
  where: Prisma.TubingEnumWhereUniqueInput
}

/**
 * TubingEnum updateMany
 */
export type TubingEnumUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TubingEnums.
   */
  data: Prisma.XOR<Prisma.TubingEnumUpdateManyMutationInput, Prisma.TubingEnumUncheckedUpdateManyInput>
  /**
   * Filter which TubingEnums to update
   */
  where?: Prisma.TubingEnumWhereInput
  /**
   * Limit how many TubingEnums to update.
   */
  limit?: number
}

/**
 * TubingEnum updateManyAndReturn
 */
export type TubingEnumUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TubingEnum
   */
  select?: Prisma.TubingEnumSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TubingEnum
   */
  omit?: Prisma.TubingEnumOmit<ExtArgs> | null
  /**
   * The data used to update TubingEnums.
   */
  data: Prisma.XOR<Prisma.TubingEnumUpdateManyMutationInput, Prisma.TubingEnumUncheckedUpdateManyInput>
  /**
   * Filter which TubingEnums to update
   */
  where?: Prisma.TubingEnumWhereInput
  /**
   * Limit how many TubingEnums to update.
   */
  limit?: number
}

/**
 * TubingEnum upsert
 */
export type TubingEnumUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TubingEnum
   */
  select?: Prisma.TubingEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TubingEnum
   */
  omit?: Prisma.TubingEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TubingEnumInclude<ExtArgs> | null
  /**
   * The filter to search for the TubingEnum to update in case it exists.
   */
  where: Prisma.TubingEnumWhereUniqueInput
  /**
   * In case the TubingEnum found by the `where` argument doesn't exist, create a new TubingEnum with this data.
   */
  create: Prisma.XOR<Prisma.TubingEnumCreateInput, Prisma.TubingEnumUncheckedCreateInput>
  /**
   * In case the TubingEnum was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TubingEnumUpdateInput, Prisma.TubingEnumUncheckedUpdateInput>
}

/**
 * TubingEnum delete
 */
export type TubingEnumDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TubingEnum
   */
  select?: Prisma.TubingEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TubingEnum
   */
  omit?: Prisma.TubingEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TubingEnumInclude<ExtArgs> | null
  /**
   * Filter which TubingEnum to delete.
   */
  where: Prisma.TubingEnumWhereUniqueInput
}

/**
 * TubingEnum deleteMany
 */
export type TubingEnumDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TubingEnums to delete
   */
  where?: Prisma.TubingEnumWhereInput
  /**
   * Limit how many TubingEnums to delete.
   */
  limit?: number
}

/**
 * TubingEnum.tubings
 */
export type TubingEnum$tubingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tubing
   */
  select?: Prisma.TubingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tubing
   */
  omit?: Prisma.TubingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TubingInclude<ExtArgs> | null
  where?: Prisma.TubingWhereInput
  orderBy?: Prisma.TubingOrderByWithRelationInput | Prisma.TubingOrderByWithRelationInput[]
  cursor?: Prisma.TubingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TubingScalarFieldEnum | Prisma.TubingScalarFieldEnum[]
}

/**
 * TubingEnum without action
 */
export type TubingEnumDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TubingEnum
   */
  select?: Prisma.TubingEnumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TubingEnum
   */
  omit?: Prisma.TubingEnumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TubingEnumInclude<ExtArgs> | null
}
