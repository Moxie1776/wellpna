
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Tubing` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Tubing
 * 
 */
export type TubingModel = runtime.Types.Result.DefaultSelection<Prisma.$TubingPayload>

export type AggregateTubing = {
  _count: TubingCountAggregateOutputType | null
  _avg: TubingAvgAggregateOutputType | null
  _sum: TubingSumAggregateOutputType | null
  _min: TubingMinAggregateOutputType | null
  _max: TubingMaxAggregateOutputType | null
}

export type TubingAvgAggregateOutputType = {
  depth: number | null
  joints: number | null
  size: number | null
}

export type TubingSumAggregateOutputType = {
  depth: number | null
  joints: number | null
  size: number | null
}

export type TubingMinAggregateOutputType = {
  id: string | null
  api: string | null
  tubingEnumId: string | null
  depth: number | null
  joints: number | null
  size: number | null
  grade: string | null
}

export type TubingMaxAggregateOutputType = {
  id: string | null
  api: string | null
  tubingEnumId: string | null
  depth: number | null
  joints: number | null
  size: number | null
  grade: string | null
}

export type TubingCountAggregateOutputType = {
  id: number
  api: number
  tubingEnumId: number
  depth: number
  joints: number
  size: number
  grade: number
  _all: number
}


export type TubingAvgAggregateInputType = {
  depth?: true
  joints?: true
  size?: true
}

export type TubingSumAggregateInputType = {
  depth?: true
  joints?: true
  size?: true
}

export type TubingMinAggregateInputType = {
  id?: true
  api?: true
  tubingEnumId?: true
  depth?: true
  joints?: true
  size?: true
  grade?: true
}

export type TubingMaxAggregateInputType = {
  id?: true
  api?: true
  tubingEnumId?: true
  depth?: true
  joints?: true
  size?: true
  grade?: true
}

export type TubingCountAggregateInputType = {
  id?: true
  api?: true
  tubingEnumId?: true
  depth?: true
  joints?: true
  size?: true
  grade?: true
  _all?: true
}

export type TubingAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Tubing to aggregate.
   */
  where?: Prisma.TubingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tubings to fetch.
   */
  orderBy?: Prisma.TubingOrderByWithRelationInput | Prisma.TubingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TubingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tubings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tubings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Tubings
  **/
  _count?: true | TubingCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TubingAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TubingSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TubingMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TubingMaxAggregateInputType
}

export type GetTubingAggregateType<T extends TubingAggregateArgs> = {
      [P in keyof T & keyof AggregateTubing]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTubing[P]>
    : Prisma.GetScalarType<T[P], AggregateTubing[P]>
}




export type TubingGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TubingWhereInput
  orderBy?: Prisma.TubingOrderByWithAggregationInput | Prisma.TubingOrderByWithAggregationInput[]
  by: Prisma.TubingScalarFieldEnum[] | Prisma.TubingScalarFieldEnum
  having?: Prisma.TubingScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TubingCountAggregateInputType | true
  _avg?: TubingAvgAggregateInputType
  _sum?: TubingSumAggregateInputType
  _min?: TubingMinAggregateInputType
  _max?: TubingMaxAggregateInputType
}

export type TubingGroupByOutputType = {
  id: string
  api: string
  tubingEnumId: string
  depth: number
  joints: number
  size: number
  grade: string
  _count: TubingCountAggregateOutputType | null
  _avg: TubingAvgAggregateOutputType | null
  _sum: TubingSumAggregateOutputType | null
  _min: TubingMinAggregateOutputType | null
  _max: TubingMaxAggregateOutputType | null
}

type GetTubingGroupByPayload<T extends TubingGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TubingGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TubingGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TubingGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TubingGroupByOutputType[P]>
      }
    >
  >



export type TubingWhereInput = {
  AND?: Prisma.TubingWhereInput | Prisma.TubingWhereInput[]
  OR?: Prisma.TubingWhereInput[]
  NOT?: Prisma.TubingWhereInput | Prisma.TubingWhereInput[]
  id?: Prisma.StringFilter<"Tubing"> | string
  api?: Prisma.StringFilter<"Tubing"> | string
  tubingEnumId?: Prisma.StringFilter<"Tubing"> | string
  depth?: Prisma.IntFilter<"Tubing"> | number
  joints?: Prisma.IntFilter<"Tubing"> | number
  size?: Prisma.FloatFilter<"Tubing"> | number
  grade?: Prisma.StringFilter<"Tubing"> | string
  tubingEnum?: Prisma.XOR<Prisma.TubingEnumScalarRelationFilter, Prisma.TubingEnumWhereInput>
  well?: Prisma.XOR<Prisma.WellScalarRelationFilter, Prisma.WellWhereInput>
}

export type TubingOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  tubingEnumId?: Prisma.SortOrder
  depth?: Prisma.SortOrder
  joints?: Prisma.SortOrder
  size?: Prisma.SortOrder
  grade?: Prisma.SortOrder
  tubingEnum?: Prisma.TubingEnumOrderByWithRelationInput
  well?: Prisma.WellOrderByWithRelationInput
}

export type TubingWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TubingWhereInput | Prisma.TubingWhereInput[]
  OR?: Prisma.TubingWhereInput[]
  NOT?: Prisma.TubingWhereInput | Prisma.TubingWhereInput[]
  api?: Prisma.StringFilter<"Tubing"> | string
  tubingEnumId?: Prisma.StringFilter<"Tubing"> | string
  depth?: Prisma.IntFilter<"Tubing"> | number
  joints?: Prisma.IntFilter<"Tubing"> | number
  size?: Prisma.FloatFilter<"Tubing"> | number
  grade?: Prisma.StringFilter<"Tubing"> | string
  tubingEnum?: Prisma.XOR<Prisma.TubingEnumScalarRelationFilter, Prisma.TubingEnumWhereInput>
  well?: Prisma.XOR<Prisma.WellScalarRelationFilter, Prisma.WellWhereInput>
}, "id">

export type TubingOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  tubingEnumId?: Prisma.SortOrder
  depth?: Prisma.SortOrder
  joints?: Prisma.SortOrder
  size?: Prisma.SortOrder
  grade?: Prisma.SortOrder
  _count?: Prisma.TubingCountOrderByAggregateInput
  _avg?: Prisma.TubingAvgOrderByAggregateInput
  _max?: Prisma.TubingMaxOrderByAggregateInput
  _min?: Prisma.TubingMinOrderByAggregateInput
  _sum?: Prisma.TubingSumOrderByAggregateInput
}

export type TubingScalarWhereWithAggregatesInput = {
  AND?: Prisma.TubingScalarWhereWithAggregatesInput | Prisma.TubingScalarWhereWithAggregatesInput[]
  OR?: Prisma.TubingScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TubingScalarWhereWithAggregatesInput | Prisma.TubingScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Tubing"> | string
  api?: Prisma.StringWithAggregatesFilter<"Tubing"> | string
  tubingEnumId?: Prisma.StringWithAggregatesFilter<"Tubing"> | string
  depth?: Prisma.IntWithAggregatesFilter<"Tubing"> | number
  joints?: Prisma.IntWithAggregatesFilter<"Tubing"> | number
  size?: Prisma.FloatWithAggregatesFilter<"Tubing"> | number
  grade?: Prisma.StringWithAggregatesFilter<"Tubing"> | string
}

export type TubingCreateInput = {
  id?: string
  depth: number
  joints: number
  size: number
  grade: string
  tubingEnum: Prisma.TubingEnumCreateNestedOneWithoutTubingsInput
  well: Prisma.WellCreateNestedOneWithoutTubingsInput
}

export type TubingUncheckedCreateInput = {
  id?: string
  api: string
  tubingEnumId: string
  depth: number
  joints: number
  size: number
  grade: string
}

export type TubingUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  depth?: Prisma.IntFieldUpdateOperationsInput | number
  joints?: Prisma.IntFieldUpdateOperationsInput | number
  size?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.StringFieldUpdateOperationsInput | string
  tubingEnum?: Prisma.TubingEnumUpdateOneRequiredWithoutTubingsNestedInput
  well?: Prisma.WellUpdateOneRequiredWithoutTubingsNestedInput
}

export type TubingUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  api?: Prisma.StringFieldUpdateOperationsInput | string
  tubingEnumId?: Prisma.StringFieldUpdateOperationsInput | string
  depth?: Prisma.IntFieldUpdateOperationsInput | number
  joints?: Prisma.IntFieldUpdateOperationsInput | number
  size?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TubingCreateManyInput = {
  id?: string
  api: string
  tubingEnumId: string
  depth: number
  joints: number
  size: number
  grade: string
}

export type TubingUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  depth?: Prisma.IntFieldUpdateOperationsInput | number
  joints?: Prisma.IntFieldUpdateOperationsInput | number
  size?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TubingUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  api?: Prisma.StringFieldUpdateOperationsInput | string
  tubingEnumId?: Prisma.StringFieldUpdateOperationsInput | string
  depth?: Prisma.IntFieldUpdateOperationsInput | number
  joints?: Prisma.IntFieldUpdateOperationsInput | number
  size?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TubingCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  tubingEnumId?: Prisma.SortOrder
  depth?: Prisma.SortOrder
  joints?: Prisma.SortOrder
  size?: Prisma.SortOrder
  grade?: Prisma.SortOrder
}

export type TubingAvgOrderByAggregateInput = {
  depth?: Prisma.SortOrder
  joints?: Prisma.SortOrder
  size?: Prisma.SortOrder
}

export type TubingMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  tubingEnumId?: Prisma.SortOrder
  depth?: Prisma.SortOrder
  joints?: Prisma.SortOrder
  size?: Prisma.SortOrder
  grade?: Prisma.SortOrder
}

export type TubingMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  tubingEnumId?: Prisma.SortOrder
  depth?: Prisma.SortOrder
  joints?: Prisma.SortOrder
  size?: Prisma.SortOrder
  grade?: Prisma.SortOrder
}

export type TubingSumOrderByAggregateInput = {
  depth?: Prisma.SortOrder
  joints?: Prisma.SortOrder
  size?: Prisma.SortOrder
}

export type TubingListRelationFilter = {
  every?: Prisma.TubingWhereInput
  some?: Prisma.TubingWhereInput
  none?: Prisma.TubingWhereInput
}

export type TubingOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TubingCreateNestedManyWithoutTubingEnumInput = {
  create?: Prisma.XOR<Prisma.TubingCreateWithoutTubingEnumInput, Prisma.TubingUncheckedCreateWithoutTubingEnumInput> | Prisma.TubingCreateWithoutTubingEnumInput[] | Prisma.TubingUncheckedCreateWithoutTubingEnumInput[]
  connectOrCreate?: Prisma.TubingCreateOrConnectWithoutTubingEnumInput | Prisma.TubingCreateOrConnectWithoutTubingEnumInput[]
  createMany?: Prisma.TubingCreateManyTubingEnumInputEnvelope
  connect?: Prisma.TubingWhereUniqueInput | Prisma.TubingWhereUniqueInput[]
}

export type TubingUncheckedCreateNestedManyWithoutTubingEnumInput = {
  create?: Prisma.XOR<Prisma.TubingCreateWithoutTubingEnumInput, Prisma.TubingUncheckedCreateWithoutTubingEnumInput> | Prisma.TubingCreateWithoutTubingEnumInput[] | Prisma.TubingUncheckedCreateWithoutTubingEnumInput[]
  connectOrCreate?: Prisma.TubingCreateOrConnectWithoutTubingEnumInput | Prisma.TubingCreateOrConnectWithoutTubingEnumInput[]
  createMany?: Prisma.TubingCreateManyTubingEnumInputEnvelope
  connect?: Prisma.TubingWhereUniqueInput | Prisma.TubingWhereUniqueInput[]
}

export type TubingUpdateManyWithoutTubingEnumNestedInput = {
  create?: Prisma.XOR<Prisma.TubingCreateWithoutTubingEnumInput, Prisma.TubingUncheckedCreateWithoutTubingEnumInput> | Prisma.TubingCreateWithoutTubingEnumInput[] | Prisma.TubingUncheckedCreateWithoutTubingEnumInput[]
  connectOrCreate?: Prisma.TubingCreateOrConnectWithoutTubingEnumInput | Prisma.TubingCreateOrConnectWithoutTubingEnumInput[]
  upsert?: Prisma.TubingUpsertWithWhereUniqueWithoutTubingEnumInput | Prisma.TubingUpsertWithWhereUniqueWithoutTubingEnumInput[]
  createMany?: Prisma.TubingCreateManyTubingEnumInputEnvelope
  set?: Prisma.TubingWhereUniqueInput | Prisma.TubingWhereUniqueInput[]
  disconnect?: Prisma.TubingWhereUniqueInput | Prisma.TubingWhereUniqueInput[]
  delete?: Prisma.TubingWhereUniqueInput | Prisma.TubingWhereUniqueInput[]
  connect?: Prisma.TubingWhereUniqueInput | Prisma.TubingWhereUniqueInput[]
  update?: Prisma.TubingUpdateWithWhereUniqueWithoutTubingEnumInput | Prisma.TubingUpdateWithWhereUniqueWithoutTubingEnumInput[]
  updateMany?: Prisma.TubingUpdateManyWithWhereWithoutTubingEnumInput | Prisma.TubingUpdateManyWithWhereWithoutTubingEnumInput[]
  deleteMany?: Prisma.TubingScalarWhereInput | Prisma.TubingScalarWhereInput[]
}

export type TubingUncheckedUpdateManyWithoutTubingEnumNestedInput = {
  create?: Prisma.XOR<Prisma.TubingCreateWithoutTubingEnumInput, Prisma.TubingUncheckedCreateWithoutTubingEnumInput> | Prisma.TubingCreateWithoutTubingEnumInput[] | Prisma.TubingUncheckedCreateWithoutTubingEnumInput[]
  connectOrCreate?: Prisma.TubingCreateOrConnectWithoutTubingEnumInput | Prisma.TubingCreateOrConnectWithoutTubingEnumInput[]
  upsert?: Prisma.TubingUpsertWithWhereUniqueWithoutTubingEnumInput | Prisma.TubingUpsertWithWhereUniqueWithoutTubingEnumInput[]
  createMany?: Prisma.TubingCreateManyTubingEnumInputEnvelope
  set?: Prisma.TubingWhereUniqueInput | Prisma.TubingWhereUniqueInput[]
  disconnect?: Prisma.TubingWhereUniqueInput | Prisma.TubingWhereUniqueInput[]
  delete?: Prisma.TubingWhereUniqueInput | Prisma.TubingWhereUniqueInput[]
  connect?: Prisma.TubingWhereUniqueInput | Prisma.TubingWhereUniqueInput[]
  update?: Prisma.TubingUpdateWithWhereUniqueWithoutTubingEnumInput | Prisma.TubingUpdateWithWhereUniqueWithoutTubingEnumInput[]
  updateMany?: Prisma.TubingUpdateManyWithWhereWithoutTubingEnumInput | Prisma.TubingUpdateManyWithWhereWithoutTubingEnumInput[]
  deleteMany?: Prisma.TubingScalarWhereInput | Prisma.TubingScalarWhereInput[]
}

export type TubingCreateNestedManyWithoutWellInput = {
  create?: Prisma.XOR<Prisma.TubingCreateWithoutWellInput, Prisma.TubingUncheckedCreateWithoutWellInput> | Prisma.TubingCreateWithoutWellInput[] | Prisma.TubingUncheckedCreateWithoutWellInput[]
  connectOrCreate?: Prisma.TubingCreateOrConnectWithoutWellInput | Prisma.TubingCreateOrConnectWithoutWellInput[]
  createMany?: Prisma.TubingCreateManyWellInputEnvelope
  connect?: Prisma.TubingWhereUniqueInput | Prisma.TubingWhereUniqueInput[]
}

export type TubingUncheckedCreateNestedManyWithoutWellInput = {
  create?: Prisma.XOR<Prisma.TubingCreateWithoutWellInput, Prisma.TubingUncheckedCreateWithoutWellInput> | Prisma.TubingCreateWithoutWellInput[] | Prisma.TubingUncheckedCreateWithoutWellInput[]
  connectOrCreate?: Prisma.TubingCreateOrConnectWithoutWellInput | Prisma.TubingCreateOrConnectWithoutWellInput[]
  createMany?: Prisma.TubingCreateManyWellInputEnvelope
  connect?: Prisma.TubingWhereUniqueInput | Prisma.TubingWhereUniqueInput[]
}

export type TubingUpdateManyWithoutWellNestedInput = {
  create?: Prisma.XOR<Prisma.TubingCreateWithoutWellInput, Prisma.TubingUncheckedCreateWithoutWellInput> | Prisma.TubingCreateWithoutWellInput[] | Prisma.TubingUncheckedCreateWithoutWellInput[]
  connectOrCreate?: Prisma.TubingCreateOrConnectWithoutWellInput | Prisma.TubingCreateOrConnectWithoutWellInput[]
  upsert?: Prisma.TubingUpsertWithWhereUniqueWithoutWellInput | Prisma.TubingUpsertWithWhereUniqueWithoutWellInput[]
  createMany?: Prisma.TubingCreateManyWellInputEnvelope
  set?: Prisma.TubingWhereUniqueInput | Prisma.TubingWhereUniqueInput[]
  disconnect?: Prisma.TubingWhereUniqueInput | Prisma.TubingWhereUniqueInput[]
  delete?: Prisma.TubingWhereUniqueInput | Prisma.TubingWhereUniqueInput[]
  connect?: Prisma.TubingWhereUniqueInput | Prisma.TubingWhereUniqueInput[]
  update?: Prisma.TubingUpdateWithWhereUniqueWithoutWellInput | Prisma.TubingUpdateWithWhereUniqueWithoutWellInput[]
  updateMany?: Prisma.TubingUpdateManyWithWhereWithoutWellInput | Prisma.TubingUpdateManyWithWhereWithoutWellInput[]
  deleteMany?: Prisma.TubingScalarWhereInput | Prisma.TubingScalarWhereInput[]
}

export type TubingUncheckedUpdateManyWithoutWellNestedInput = {
  create?: Prisma.XOR<Prisma.TubingCreateWithoutWellInput, Prisma.TubingUncheckedCreateWithoutWellInput> | Prisma.TubingCreateWithoutWellInput[] | Prisma.TubingUncheckedCreateWithoutWellInput[]
  connectOrCreate?: Prisma.TubingCreateOrConnectWithoutWellInput | Prisma.TubingCreateOrConnectWithoutWellInput[]
  upsert?: Prisma.TubingUpsertWithWhereUniqueWithoutWellInput | Prisma.TubingUpsertWithWhereUniqueWithoutWellInput[]
  createMany?: Prisma.TubingCreateManyWellInputEnvelope
  set?: Prisma.TubingWhereUniqueInput | Prisma.TubingWhereUniqueInput[]
  disconnect?: Prisma.TubingWhereUniqueInput | Prisma.TubingWhereUniqueInput[]
  delete?: Prisma.TubingWhereUniqueInput | Prisma.TubingWhereUniqueInput[]
  connect?: Prisma.TubingWhereUniqueInput | Prisma.TubingWhereUniqueInput[]
  update?: Prisma.TubingUpdateWithWhereUniqueWithoutWellInput | Prisma.TubingUpdateWithWhereUniqueWithoutWellInput[]
  updateMany?: Prisma.TubingUpdateManyWithWhereWithoutWellInput | Prisma.TubingUpdateManyWithWhereWithoutWellInput[]
  deleteMany?: Prisma.TubingScalarWhereInput | Prisma.TubingScalarWhereInput[]
}

export type TubingCreateWithoutTubingEnumInput = {
  id?: string
  depth: number
  joints: number
  size: number
  grade: string
  well: Prisma.WellCreateNestedOneWithoutTubingsInput
}

export type TubingUncheckedCreateWithoutTubingEnumInput = {
  id?: string
  api: string
  depth: number
  joints: number
  size: number
  grade: string
}

export type TubingCreateOrConnectWithoutTubingEnumInput = {
  where: Prisma.TubingWhereUniqueInput
  create: Prisma.XOR<Prisma.TubingCreateWithoutTubingEnumInput, Prisma.TubingUncheckedCreateWithoutTubingEnumInput>
}

export type TubingCreateManyTubingEnumInputEnvelope = {
  data: Prisma.TubingCreateManyTubingEnumInput | Prisma.TubingCreateManyTubingEnumInput[]
}

export type TubingUpsertWithWhereUniqueWithoutTubingEnumInput = {
  where: Prisma.TubingWhereUniqueInput
  update: Prisma.XOR<Prisma.TubingUpdateWithoutTubingEnumInput, Prisma.TubingUncheckedUpdateWithoutTubingEnumInput>
  create: Prisma.XOR<Prisma.TubingCreateWithoutTubingEnumInput, Prisma.TubingUncheckedCreateWithoutTubingEnumInput>
}

export type TubingUpdateWithWhereUniqueWithoutTubingEnumInput = {
  where: Prisma.TubingWhereUniqueInput
  data: Prisma.XOR<Prisma.TubingUpdateWithoutTubingEnumInput, Prisma.TubingUncheckedUpdateWithoutTubingEnumInput>
}

export type TubingUpdateManyWithWhereWithoutTubingEnumInput = {
  where: Prisma.TubingScalarWhereInput
  data: Prisma.XOR<Prisma.TubingUpdateManyMutationInput, Prisma.TubingUncheckedUpdateManyWithoutTubingEnumInput>
}

export type TubingScalarWhereInput = {
  AND?: Prisma.TubingScalarWhereInput | Prisma.TubingScalarWhereInput[]
  OR?: Prisma.TubingScalarWhereInput[]
  NOT?: Prisma.TubingScalarWhereInput | Prisma.TubingScalarWhereInput[]
  id?: Prisma.StringFilter<"Tubing"> | string
  api?: Prisma.StringFilter<"Tubing"> | string
  tubingEnumId?: Prisma.StringFilter<"Tubing"> | string
  depth?: Prisma.IntFilter<"Tubing"> | number
  joints?: Prisma.IntFilter<"Tubing"> | number
  size?: Prisma.FloatFilter<"Tubing"> | number
  grade?: Prisma.StringFilter<"Tubing"> | string
}

export type TubingCreateWithoutWellInput = {
  id?: string
  depth: number
  joints: number
  size: number
  grade: string
  tubingEnum: Prisma.TubingEnumCreateNestedOneWithoutTubingsInput
}

export type TubingUncheckedCreateWithoutWellInput = {
  id?: string
  tubingEnumId: string
  depth: number
  joints: number
  size: number
  grade: string
}

export type TubingCreateOrConnectWithoutWellInput = {
  where: Prisma.TubingWhereUniqueInput
  create: Prisma.XOR<Prisma.TubingCreateWithoutWellInput, Prisma.TubingUncheckedCreateWithoutWellInput>
}

export type TubingCreateManyWellInputEnvelope = {
  data: Prisma.TubingCreateManyWellInput | Prisma.TubingCreateManyWellInput[]
}

export type TubingUpsertWithWhereUniqueWithoutWellInput = {
  where: Prisma.TubingWhereUniqueInput
  update: Prisma.XOR<Prisma.TubingUpdateWithoutWellInput, Prisma.TubingUncheckedUpdateWithoutWellInput>
  create: Prisma.XOR<Prisma.TubingCreateWithoutWellInput, Prisma.TubingUncheckedCreateWithoutWellInput>
}

export type TubingUpdateWithWhereUniqueWithoutWellInput = {
  where: Prisma.TubingWhereUniqueInput
  data: Prisma.XOR<Prisma.TubingUpdateWithoutWellInput, Prisma.TubingUncheckedUpdateWithoutWellInput>
}

export type TubingUpdateManyWithWhereWithoutWellInput = {
  where: Prisma.TubingScalarWhereInput
  data: Prisma.XOR<Prisma.TubingUpdateManyMutationInput, Prisma.TubingUncheckedUpdateManyWithoutWellInput>
}

export type TubingCreateManyTubingEnumInput = {
  id?: string
  api: string
  depth: number
  joints: number
  size: number
  grade: string
}

export type TubingUpdateWithoutTubingEnumInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  depth?: Prisma.IntFieldUpdateOperationsInput | number
  joints?: Prisma.IntFieldUpdateOperationsInput | number
  size?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.StringFieldUpdateOperationsInput | string
  well?: Prisma.WellUpdateOneRequiredWithoutTubingsNestedInput
}

export type TubingUncheckedUpdateWithoutTubingEnumInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  api?: Prisma.StringFieldUpdateOperationsInput | string
  depth?: Prisma.IntFieldUpdateOperationsInput | number
  joints?: Prisma.IntFieldUpdateOperationsInput | number
  size?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TubingUncheckedUpdateManyWithoutTubingEnumInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  api?: Prisma.StringFieldUpdateOperationsInput | string
  depth?: Prisma.IntFieldUpdateOperationsInput | number
  joints?: Prisma.IntFieldUpdateOperationsInput | number
  size?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TubingCreateManyWellInput = {
  id?: string
  tubingEnumId: string
  depth: number
  joints: number
  size: number
  grade: string
}

export type TubingUpdateWithoutWellInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  depth?: Prisma.IntFieldUpdateOperationsInput | number
  joints?: Prisma.IntFieldUpdateOperationsInput | number
  size?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.StringFieldUpdateOperationsInput | string
  tubingEnum?: Prisma.TubingEnumUpdateOneRequiredWithoutTubingsNestedInput
}

export type TubingUncheckedUpdateWithoutWellInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tubingEnumId?: Prisma.StringFieldUpdateOperationsInput | string
  depth?: Prisma.IntFieldUpdateOperationsInput | number
  joints?: Prisma.IntFieldUpdateOperationsInput | number
  size?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TubingUncheckedUpdateManyWithoutWellInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tubingEnumId?: Prisma.StringFieldUpdateOperationsInput | string
  depth?: Prisma.IntFieldUpdateOperationsInput | number
  joints?: Prisma.IntFieldUpdateOperationsInput | number
  size?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.StringFieldUpdateOperationsInput | string
}



export type TubingSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  api?: boolean
  tubingEnumId?: boolean
  depth?: boolean
  joints?: boolean
  size?: boolean
  grade?: boolean
  tubingEnum?: boolean | Prisma.TubingEnumDefaultArgs<ExtArgs>
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tubing"]>

export type TubingSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  api?: boolean
  tubingEnumId?: boolean
  depth?: boolean
  joints?: boolean
  size?: boolean
  grade?: boolean
  tubingEnum?: boolean | Prisma.TubingEnumDefaultArgs<ExtArgs>
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tubing"]>

export type TubingSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  api?: boolean
  tubingEnumId?: boolean
  depth?: boolean
  joints?: boolean
  size?: boolean
  grade?: boolean
  tubingEnum?: boolean | Prisma.TubingEnumDefaultArgs<ExtArgs>
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tubing"]>

export type TubingSelectScalar = {
  id?: boolean
  api?: boolean
  tubingEnumId?: boolean
  depth?: boolean
  joints?: boolean
  size?: boolean
  grade?: boolean
}

export type TubingOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "api" | "tubingEnumId" | "depth" | "joints" | "size" | "grade", ExtArgs["result"]["tubing"]>
export type TubingInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tubingEnum?: boolean | Prisma.TubingEnumDefaultArgs<ExtArgs>
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}
export type TubingIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tubingEnum?: boolean | Prisma.TubingEnumDefaultArgs<ExtArgs>
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}
export type TubingIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tubingEnum?: boolean | Prisma.TubingEnumDefaultArgs<ExtArgs>
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}

export type $TubingPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Tubing"
  objects: {
    tubingEnum: Prisma.$TubingEnumPayload<ExtArgs>
    well: Prisma.$WellPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    api: string
    tubingEnumId: string
    depth: number
    joints: number
    size: number
    grade: string
  }, ExtArgs["result"]["tubing"]>
  composites: {}
}

export type TubingGetPayload<S extends boolean | null | undefined | TubingDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TubingPayload, S>

export type TubingCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TubingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TubingCountAggregateInputType | true
  }

export interface TubingDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tubing'], meta: { name: 'Tubing' } }
  /**
   * Find zero or one Tubing that matches the filter.
   * @param {TubingFindUniqueArgs} args - Arguments to find a Tubing
   * @example
   * // Get one Tubing
   * const tubing = await prisma.tubing.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TubingFindUniqueArgs>(args: Prisma.SelectSubset<T, TubingFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TubingClient<runtime.Types.Result.GetResult<Prisma.$TubingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Tubing that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TubingFindUniqueOrThrowArgs} args - Arguments to find a Tubing
   * @example
   * // Get one Tubing
   * const tubing = await prisma.tubing.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TubingFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TubingFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TubingClient<runtime.Types.Result.GetResult<Prisma.$TubingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tubing that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TubingFindFirstArgs} args - Arguments to find a Tubing
   * @example
   * // Get one Tubing
   * const tubing = await prisma.tubing.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TubingFindFirstArgs>(args?: Prisma.SelectSubset<T, TubingFindFirstArgs<ExtArgs>>): Prisma.Prisma__TubingClient<runtime.Types.Result.GetResult<Prisma.$TubingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tubing that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TubingFindFirstOrThrowArgs} args - Arguments to find a Tubing
   * @example
   * // Get one Tubing
   * const tubing = await prisma.tubing.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TubingFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TubingFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TubingClient<runtime.Types.Result.GetResult<Prisma.$TubingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Tubings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TubingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Tubings
   * const tubings = await prisma.tubing.findMany()
   * 
   * // Get first 10 Tubings
   * const tubings = await prisma.tubing.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const tubingWithIdOnly = await prisma.tubing.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TubingFindManyArgs>(args?: Prisma.SelectSubset<T, TubingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TubingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Tubing.
   * @param {TubingCreateArgs} args - Arguments to create a Tubing.
   * @example
   * // Create one Tubing
   * const Tubing = await prisma.tubing.create({
   *   data: {
   *     // ... data to create a Tubing
   *   }
   * })
   * 
   */
  create<T extends TubingCreateArgs>(args: Prisma.SelectSubset<T, TubingCreateArgs<ExtArgs>>): Prisma.Prisma__TubingClient<runtime.Types.Result.GetResult<Prisma.$TubingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Tubings.
   * @param {TubingCreateManyArgs} args - Arguments to create many Tubings.
   * @example
   * // Create many Tubings
   * const tubing = await prisma.tubing.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TubingCreateManyArgs>(args?: Prisma.SelectSubset<T, TubingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Tubings and returns the data saved in the database.
   * @param {TubingCreateManyAndReturnArgs} args - Arguments to create many Tubings.
   * @example
   * // Create many Tubings
   * const tubing = await prisma.tubing.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Tubings and only return the `id`
   * const tubingWithIdOnly = await prisma.tubing.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TubingCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TubingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TubingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Tubing.
   * @param {TubingDeleteArgs} args - Arguments to delete one Tubing.
   * @example
   * // Delete one Tubing
   * const Tubing = await prisma.tubing.delete({
   *   where: {
   *     // ... filter to delete one Tubing
   *   }
   * })
   * 
   */
  delete<T extends TubingDeleteArgs>(args: Prisma.SelectSubset<T, TubingDeleteArgs<ExtArgs>>): Prisma.Prisma__TubingClient<runtime.Types.Result.GetResult<Prisma.$TubingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Tubing.
   * @param {TubingUpdateArgs} args - Arguments to update one Tubing.
   * @example
   * // Update one Tubing
   * const tubing = await prisma.tubing.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TubingUpdateArgs>(args: Prisma.SelectSubset<T, TubingUpdateArgs<ExtArgs>>): Prisma.Prisma__TubingClient<runtime.Types.Result.GetResult<Prisma.$TubingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Tubings.
   * @param {TubingDeleteManyArgs} args - Arguments to filter Tubings to delete.
   * @example
   * // Delete a few Tubings
   * const { count } = await prisma.tubing.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TubingDeleteManyArgs>(args?: Prisma.SelectSubset<T, TubingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tubings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TubingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Tubings
   * const tubing = await prisma.tubing.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TubingUpdateManyArgs>(args: Prisma.SelectSubset<T, TubingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tubings and returns the data updated in the database.
   * @param {TubingUpdateManyAndReturnArgs} args - Arguments to update many Tubings.
   * @example
   * // Update many Tubings
   * const tubing = await prisma.tubing.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Tubings and only return the `id`
   * const tubingWithIdOnly = await prisma.tubing.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TubingUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TubingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TubingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Tubing.
   * @param {TubingUpsertArgs} args - Arguments to update or create a Tubing.
   * @example
   * // Update or create a Tubing
   * const tubing = await prisma.tubing.upsert({
   *   create: {
   *     // ... data to create a Tubing
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Tubing we want to update
   *   }
   * })
   */
  upsert<T extends TubingUpsertArgs>(args: Prisma.SelectSubset<T, TubingUpsertArgs<ExtArgs>>): Prisma.Prisma__TubingClient<runtime.Types.Result.GetResult<Prisma.$TubingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Tubings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TubingCountArgs} args - Arguments to filter Tubings to count.
   * @example
   * // Count the number of Tubings
   * const count = await prisma.tubing.count({
   *   where: {
   *     // ... the filter for the Tubings we want to count
   *   }
   * })
  **/
  count<T extends TubingCountArgs>(
    args?: Prisma.Subset<T, TubingCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TubingCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Tubing.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TubingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TubingAggregateArgs>(args: Prisma.Subset<T, TubingAggregateArgs>): Prisma.PrismaPromise<GetTubingAggregateType<T>>

  /**
   * Group by Tubing.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TubingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TubingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TubingGroupByArgs['orderBy'] }
      : { orderBy?: TubingGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TubingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTubingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Tubing model
 */
readonly fields: TubingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Tubing.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TubingClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  tubingEnum<T extends Prisma.TubingEnumDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TubingEnumDefaultArgs<ExtArgs>>): Prisma.Prisma__TubingEnumClient<runtime.Types.Result.GetResult<Prisma.$TubingEnumPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  well<T extends Prisma.WellDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WellDefaultArgs<ExtArgs>>): Prisma.Prisma__WellClient<runtime.Types.Result.GetResult<Prisma.$WellPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Tubing model
 */
export interface TubingFieldRefs {
  readonly id: Prisma.FieldRef<"Tubing", 'String'>
  readonly api: Prisma.FieldRef<"Tubing", 'String'>
  readonly tubingEnumId: Prisma.FieldRef<"Tubing", 'String'>
  readonly depth: Prisma.FieldRef<"Tubing", 'Int'>
  readonly joints: Prisma.FieldRef<"Tubing", 'Int'>
  readonly size: Prisma.FieldRef<"Tubing", 'Float'>
  readonly grade: Prisma.FieldRef<"Tubing", 'String'>
}
    

// Custom InputTypes
/**
 * Tubing findUnique
 */
export type TubingFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tubing
   */
  select?: Prisma.TubingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tubing
   */
  omit?: Prisma.TubingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TubingInclude<ExtArgs> | null
  /**
   * Filter, which Tubing to fetch.
   */
  where: Prisma.TubingWhereUniqueInput
}

/**
 * Tubing findUniqueOrThrow
 */
export type TubingFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tubing
   */
  select?: Prisma.TubingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tubing
   */
  omit?: Prisma.TubingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TubingInclude<ExtArgs> | null
  /**
   * Filter, which Tubing to fetch.
   */
  where: Prisma.TubingWhereUniqueInput
}

/**
 * Tubing findFirst
 */
export type TubingFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tubing
   */
  select?: Prisma.TubingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tubing
   */
  omit?: Prisma.TubingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TubingInclude<ExtArgs> | null
  /**
   * Filter, which Tubing to fetch.
   */
  where?: Prisma.TubingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tubings to fetch.
   */
  orderBy?: Prisma.TubingOrderByWithRelationInput | Prisma.TubingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Tubings.
   */
  cursor?: Prisma.TubingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tubings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tubings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Tubings.
   */
  distinct?: Prisma.TubingScalarFieldEnum | Prisma.TubingScalarFieldEnum[]
}

/**
 * Tubing findFirstOrThrow
 */
export type TubingFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tubing
   */
  select?: Prisma.TubingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tubing
   */
  omit?: Prisma.TubingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TubingInclude<ExtArgs> | null
  /**
   * Filter, which Tubing to fetch.
   */
  where?: Prisma.TubingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tubings to fetch.
   */
  orderBy?: Prisma.TubingOrderByWithRelationInput | Prisma.TubingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Tubings.
   */
  cursor?: Prisma.TubingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tubings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tubings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Tubings.
   */
  distinct?: Prisma.TubingScalarFieldEnum | Prisma.TubingScalarFieldEnum[]
}

/**
 * Tubing findMany
 */
export type TubingFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tubing
   */
  select?: Prisma.TubingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tubing
   */
  omit?: Prisma.TubingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TubingInclude<ExtArgs> | null
  /**
   * Filter, which Tubings to fetch.
   */
  where?: Prisma.TubingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tubings to fetch.
   */
  orderBy?: Prisma.TubingOrderByWithRelationInput | Prisma.TubingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Tubings.
   */
  cursor?: Prisma.TubingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tubings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tubings.
   */
  skip?: number
  distinct?: Prisma.TubingScalarFieldEnum | Prisma.TubingScalarFieldEnum[]
}

/**
 * Tubing create
 */
export type TubingCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tubing
   */
  select?: Prisma.TubingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tubing
   */
  omit?: Prisma.TubingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TubingInclude<ExtArgs> | null
  /**
   * The data needed to create a Tubing.
   */
  data: Prisma.XOR<Prisma.TubingCreateInput, Prisma.TubingUncheckedCreateInput>
}

/**
 * Tubing createMany
 */
export type TubingCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Tubings.
   */
  data: Prisma.TubingCreateManyInput | Prisma.TubingCreateManyInput[]
}

/**
 * Tubing createManyAndReturn
 */
export type TubingCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tubing
   */
  select?: Prisma.TubingSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Tubing
   */
  omit?: Prisma.TubingOmit<ExtArgs> | null
  /**
   * The data used to create many Tubings.
   */
  data: Prisma.TubingCreateManyInput | Prisma.TubingCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TubingIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Tubing update
 */
export type TubingUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tubing
   */
  select?: Prisma.TubingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tubing
   */
  omit?: Prisma.TubingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TubingInclude<ExtArgs> | null
  /**
   * The data needed to update a Tubing.
   */
  data: Prisma.XOR<Prisma.TubingUpdateInput, Prisma.TubingUncheckedUpdateInput>
  /**
   * Choose, which Tubing to update.
   */
  where: Prisma.TubingWhereUniqueInput
}

/**
 * Tubing updateMany
 */
export type TubingUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Tubings.
   */
  data: Prisma.XOR<Prisma.TubingUpdateManyMutationInput, Prisma.TubingUncheckedUpdateManyInput>
  /**
   * Filter which Tubings to update
   */
  where?: Prisma.TubingWhereInput
  /**
   * Limit how many Tubings to update.
   */
  limit?: number
}

/**
 * Tubing updateManyAndReturn
 */
export type TubingUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tubing
   */
  select?: Prisma.TubingSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Tubing
   */
  omit?: Prisma.TubingOmit<ExtArgs> | null
  /**
   * The data used to update Tubings.
   */
  data: Prisma.XOR<Prisma.TubingUpdateManyMutationInput, Prisma.TubingUncheckedUpdateManyInput>
  /**
   * Filter which Tubings to update
   */
  where?: Prisma.TubingWhereInput
  /**
   * Limit how many Tubings to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TubingIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Tubing upsert
 */
export type TubingUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tubing
   */
  select?: Prisma.TubingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tubing
   */
  omit?: Prisma.TubingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TubingInclude<ExtArgs> | null
  /**
   * The filter to search for the Tubing to update in case it exists.
   */
  where: Prisma.TubingWhereUniqueInput
  /**
   * In case the Tubing found by the `where` argument doesn't exist, create a new Tubing with this data.
   */
  create: Prisma.XOR<Prisma.TubingCreateInput, Prisma.TubingUncheckedCreateInput>
  /**
   * In case the Tubing was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TubingUpdateInput, Prisma.TubingUncheckedUpdateInput>
}

/**
 * Tubing delete
 */
export type TubingDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tubing
   */
  select?: Prisma.TubingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tubing
   */
  omit?: Prisma.TubingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TubingInclude<ExtArgs> | null
  /**
   * Filter which Tubing to delete.
   */
  where: Prisma.TubingWhereUniqueInput
}

/**
 * Tubing deleteMany
 */
export type TubingDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Tubings to delete
   */
  where?: Prisma.TubingWhereInput
  /**
   * Limit how many Tubings to delete.
   */
  limit?: number
}

/**
 * Tubing without action
 */
export type TubingDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tubing
   */
  select?: Prisma.TubingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tubing
   */
  omit?: Prisma.TubingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TubingInclude<ExtArgs> | null
}
