
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Rods` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Rods
 * 
 */
export type RodsModel = runtime.Types.Result.DefaultSelection<Prisma.$RodsPayload>

export type AggregateRods = {
  _count: RodsCountAggregateOutputType | null
  _avg: RodsAvgAggregateOutputType | null
  _sum: RodsSumAggregateOutputType | null
  _min: RodsMinAggregateOutputType | null
  _max: RodsMaxAggregateOutputType | null
}

export type RodsAvgAggregateOutputType = {
  joints: number | null
}

export type RodsSumAggregateOutputType = {
  joints: number | null
}

export type RodsMinAggregateOutputType = {
  id: string | null
  api: string | null
  joints: number | null
  rodEnumId: string | null
}

export type RodsMaxAggregateOutputType = {
  id: string | null
  api: string | null
  joints: number | null
  rodEnumId: string | null
}

export type RodsCountAggregateOutputType = {
  id: number
  api: number
  joints: number
  rodEnumId: number
  _all: number
}


export type RodsAvgAggregateInputType = {
  joints?: true
}

export type RodsSumAggregateInputType = {
  joints?: true
}

export type RodsMinAggregateInputType = {
  id?: true
  api?: true
  joints?: true
  rodEnumId?: true
}

export type RodsMaxAggregateInputType = {
  id?: true
  api?: true
  joints?: true
  rodEnumId?: true
}

export type RodsCountAggregateInputType = {
  id?: true
  api?: true
  joints?: true
  rodEnumId?: true
  _all?: true
}

export type RodsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Rods to aggregate.
   */
  where?: Prisma.RodsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Rods to fetch.
   */
  orderBy?: Prisma.RodsOrderByWithRelationInput | Prisma.RodsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RodsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Rods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Rods.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Rods
  **/
  _count?: true | RodsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: RodsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: RodsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RodsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RodsMaxAggregateInputType
}

export type GetRodsAggregateType<T extends RodsAggregateArgs> = {
      [P in keyof T & keyof AggregateRods]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRods[P]>
    : Prisma.GetScalarType<T[P], AggregateRods[P]>
}




export type RodsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RodsWhereInput
  orderBy?: Prisma.RodsOrderByWithAggregationInput | Prisma.RodsOrderByWithAggregationInput[]
  by: Prisma.RodsScalarFieldEnum[] | Prisma.RodsScalarFieldEnum
  having?: Prisma.RodsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RodsCountAggregateInputType | true
  _avg?: RodsAvgAggregateInputType
  _sum?: RodsSumAggregateInputType
  _min?: RodsMinAggregateInputType
  _max?: RodsMaxAggregateInputType
}

export type RodsGroupByOutputType = {
  id: string
  api: string
  joints: number
  rodEnumId: string
  _count: RodsCountAggregateOutputType | null
  _avg: RodsAvgAggregateOutputType | null
  _sum: RodsSumAggregateOutputType | null
  _min: RodsMinAggregateOutputType | null
  _max: RodsMaxAggregateOutputType | null
}

type GetRodsGroupByPayload<T extends RodsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RodsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RodsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RodsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RodsGroupByOutputType[P]>
      }
    >
  >



export type RodsWhereInput = {
  AND?: Prisma.RodsWhereInput | Prisma.RodsWhereInput[]
  OR?: Prisma.RodsWhereInput[]
  NOT?: Prisma.RodsWhereInput | Prisma.RodsWhereInput[]
  id?: Prisma.StringFilter<"Rods"> | string
  api?: Prisma.StringFilter<"Rods"> | string
  joints?: Prisma.IntFilter<"Rods"> | number
  rodEnumId?: Prisma.StringFilter<"Rods"> | string
  rodEnum?: Prisma.XOR<Prisma.RodEnumScalarRelationFilter, Prisma.RodEnumWhereInput>
  well?: Prisma.XOR<Prisma.WellScalarRelationFilter, Prisma.WellWhereInput>
}

export type RodsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  joints?: Prisma.SortOrder
  rodEnumId?: Prisma.SortOrder
  rodEnum?: Prisma.RodEnumOrderByWithRelationInput
  well?: Prisma.WellOrderByWithRelationInput
}

export type RodsWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.RodsWhereInput | Prisma.RodsWhereInput[]
  OR?: Prisma.RodsWhereInput[]
  NOT?: Prisma.RodsWhereInput | Prisma.RodsWhereInput[]
  api?: Prisma.StringFilter<"Rods"> | string
  joints?: Prisma.IntFilter<"Rods"> | number
  rodEnumId?: Prisma.StringFilter<"Rods"> | string
  rodEnum?: Prisma.XOR<Prisma.RodEnumScalarRelationFilter, Prisma.RodEnumWhereInput>
  well?: Prisma.XOR<Prisma.WellScalarRelationFilter, Prisma.WellWhereInput>
}, "id">

export type RodsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  joints?: Prisma.SortOrder
  rodEnumId?: Prisma.SortOrder
  _count?: Prisma.RodsCountOrderByAggregateInput
  _avg?: Prisma.RodsAvgOrderByAggregateInput
  _max?: Prisma.RodsMaxOrderByAggregateInput
  _min?: Prisma.RodsMinOrderByAggregateInput
  _sum?: Prisma.RodsSumOrderByAggregateInput
}

export type RodsScalarWhereWithAggregatesInput = {
  AND?: Prisma.RodsScalarWhereWithAggregatesInput | Prisma.RodsScalarWhereWithAggregatesInput[]
  OR?: Prisma.RodsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RodsScalarWhereWithAggregatesInput | Prisma.RodsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Rods"> | string
  api?: Prisma.StringWithAggregatesFilter<"Rods"> | string
  joints?: Prisma.IntWithAggregatesFilter<"Rods"> | number
  rodEnumId?: Prisma.StringWithAggregatesFilter<"Rods"> | string
}

export type RodsCreateInput = {
  id?: string
  joints: number
  rodEnum: Prisma.RodEnumCreateNestedOneWithoutRodsInput
  well: Prisma.WellCreateNestedOneWithoutRodsInput
}

export type RodsUncheckedCreateInput = {
  id?: string
  api: string
  joints: number
  rodEnumId: string
}

export type RodsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  joints?: Prisma.IntFieldUpdateOperationsInput | number
  rodEnum?: Prisma.RodEnumUpdateOneRequiredWithoutRodsNestedInput
  well?: Prisma.WellUpdateOneRequiredWithoutRodsNestedInput
}

export type RodsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  api?: Prisma.StringFieldUpdateOperationsInput | string
  joints?: Prisma.IntFieldUpdateOperationsInput | number
  rodEnumId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type RodsCreateManyInput = {
  id?: string
  api: string
  joints: number
  rodEnumId: string
}

export type RodsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  joints?: Prisma.IntFieldUpdateOperationsInput | number
}

export type RodsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  api?: Prisma.StringFieldUpdateOperationsInput | string
  joints?: Prisma.IntFieldUpdateOperationsInput | number
  rodEnumId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type RodsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  joints?: Prisma.SortOrder
  rodEnumId?: Prisma.SortOrder
}

export type RodsAvgOrderByAggregateInput = {
  joints?: Prisma.SortOrder
}

export type RodsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  joints?: Prisma.SortOrder
  rodEnumId?: Prisma.SortOrder
}

export type RodsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  joints?: Prisma.SortOrder
  rodEnumId?: Prisma.SortOrder
}

export type RodsSumOrderByAggregateInput = {
  joints?: Prisma.SortOrder
}

export type RodsListRelationFilter = {
  every?: Prisma.RodsWhereInput
  some?: Prisma.RodsWhereInput
  none?: Prisma.RodsWhereInput
}

export type RodsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type RodsCreateNestedManyWithoutRodEnumInput = {
  create?: Prisma.XOR<Prisma.RodsCreateWithoutRodEnumInput, Prisma.RodsUncheckedCreateWithoutRodEnumInput> | Prisma.RodsCreateWithoutRodEnumInput[] | Prisma.RodsUncheckedCreateWithoutRodEnumInput[]
  connectOrCreate?: Prisma.RodsCreateOrConnectWithoutRodEnumInput | Prisma.RodsCreateOrConnectWithoutRodEnumInput[]
  createMany?: Prisma.RodsCreateManyRodEnumInputEnvelope
  connect?: Prisma.RodsWhereUniqueInput | Prisma.RodsWhereUniqueInput[]
}

export type RodsUncheckedCreateNestedManyWithoutRodEnumInput = {
  create?: Prisma.XOR<Prisma.RodsCreateWithoutRodEnumInput, Prisma.RodsUncheckedCreateWithoutRodEnumInput> | Prisma.RodsCreateWithoutRodEnumInput[] | Prisma.RodsUncheckedCreateWithoutRodEnumInput[]
  connectOrCreate?: Prisma.RodsCreateOrConnectWithoutRodEnumInput | Prisma.RodsCreateOrConnectWithoutRodEnumInput[]
  createMany?: Prisma.RodsCreateManyRodEnumInputEnvelope
  connect?: Prisma.RodsWhereUniqueInput | Prisma.RodsWhereUniqueInput[]
}

export type RodsUpdateManyWithoutRodEnumNestedInput = {
  create?: Prisma.XOR<Prisma.RodsCreateWithoutRodEnumInput, Prisma.RodsUncheckedCreateWithoutRodEnumInput> | Prisma.RodsCreateWithoutRodEnumInput[] | Prisma.RodsUncheckedCreateWithoutRodEnumInput[]
  connectOrCreate?: Prisma.RodsCreateOrConnectWithoutRodEnumInput | Prisma.RodsCreateOrConnectWithoutRodEnumInput[]
  upsert?: Prisma.RodsUpsertWithWhereUniqueWithoutRodEnumInput | Prisma.RodsUpsertWithWhereUniqueWithoutRodEnumInput[]
  createMany?: Prisma.RodsCreateManyRodEnumInputEnvelope
  set?: Prisma.RodsWhereUniqueInput | Prisma.RodsWhereUniqueInput[]
  disconnect?: Prisma.RodsWhereUniqueInput | Prisma.RodsWhereUniqueInput[]
  delete?: Prisma.RodsWhereUniqueInput | Prisma.RodsWhereUniqueInput[]
  connect?: Prisma.RodsWhereUniqueInput | Prisma.RodsWhereUniqueInput[]
  update?: Prisma.RodsUpdateWithWhereUniqueWithoutRodEnumInput | Prisma.RodsUpdateWithWhereUniqueWithoutRodEnumInput[]
  updateMany?: Prisma.RodsUpdateManyWithWhereWithoutRodEnumInput | Prisma.RodsUpdateManyWithWhereWithoutRodEnumInput[]
  deleteMany?: Prisma.RodsScalarWhereInput | Prisma.RodsScalarWhereInput[]
}

export type RodsUncheckedUpdateManyWithoutRodEnumNestedInput = {
  create?: Prisma.XOR<Prisma.RodsCreateWithoutRodEnumInput, Prisma.RodsUncheckedCreateWithoutRodEnumInput> | Prisma.RodsCreateWithoutRodEnumInput[] | Prisma.RodsUncheckedCreateWithoutRodEnumInput[]
  connectOrCreate?: Prisma.RodsCreateOrConnectWithoutRodEnumInput | Prisma.RodsCreateOrConnectWithoutRodEnumInput[]
  upsert?: Prisma.RodsUpsertWithWhereUniqueWithoutRodEnumInput | Prisma.RodsUpsertWithWhereUniqueWithoutRodEnumInput[]
  createMany?: Prisma.RodsCreateManyRodEnumInputEnvelope
  set?: Prisma.RodsWhereUniqueInput | Prisma.RodsWhereUniqueInput[]
  disconnect?: Prisma.RodsWhereUniqueInput | Prisma.RodsWhereUniqueInput[]
  delete?: Prisma.RodsWhereUniqueInput | Prisma.RodsWhereUniqueInput[]
  connect?: Prisma.RodsWhereUniqueInput | Prisma.RodsWhereUniqueInput[]
  update?: Prisma.RodsUpdateWithWhereUniqueWithoutRodEnumInput | Prisma.RodsUpdateWithWhereUniqueWithoutRodEnumInput[]
  updateMany?: Prisma.RodsUpdateManyWithWhereWithoutRodEnumInput | Prisma.RodsUpdateManyWithWhereWithoutRodEnumInput[]
  deleteMany?: Prisma.RodsScalarWhereInput | Prisma.RodsScalarWhereInput[]
}

export type RodsCreateNestedManyWithoutWellInput = {
  create?: Prisma.XOR<Prisma.RodsCreateWithoutWellInput, Prisma.RodsUncheckedCreateWithoutWellInput> | Prisma.RodsCreateWithoutWellInput[] | Prisma.RodsUncheckedCreateWithoutWellInput[]
  connectOrCreate?: Prisma.RodsCreateOrConnectWithoutWellInput | Prisma.RodsCreateOrConnectWithoutWellInput[]
  createMany?: Prisma.RodsCreateManyWellInputEnvelope
  connect?: Prisma.RodsWhereUniqueInput | Prisma.RodsWhereUniqueInput[]
}

export type RodsUncheckedCreateNestedManyWithoutWellInput = {
  create?: Prisma.XOR<Prisma.RodsCreateWithoutWellInput, Prisma.RodsUncheckedCreateWithoutWellInput> | Prisma.RodsCreateWithoutWellInput[] | Prisma.RodsUncheckedCreateWithoutWellInput[]
  connectOrCreate?: Prisma.RodsCreateOrConnectWithoutWellInput | Prisma.RodsCreateOrConnectWithoutWellInput[]
  createMany?: Prisma.RodsCreateManyWellInputEnvelope
  connect?: Prisma.RodsWhereUniqueInput | Prisma.RodsWhereUniqueInput[]
}

export type RodsUpdateManyWithoutWellNestedInput = {
  create?: Prisma.XOR<Prisma.RodsCreateWithoutWellInput, Prisma.RodsUncheckedCreateWithoutWellInput> | Prisma.RodsCreateWithoutWellInput[] | Prisma.RodsUncheckedCreateWithoutWellInput[]
  connectOrCreate?: Prisma.RodsCreateOrConnectWithoutWellInput | Prisma.RodsCreateOrConnectWithoutWellInput[]
  upsert?: Prisma.RodsUpsertWithWhereUniqueWithoutWellInput | Prisma.RodsUpsertWithWhereUniqueWithoutWellInput[]
  createMany?: Prisma.RodsCreateManyWellInputEnvelope
  set?: Prisma.RodsWhereUniqueInput | Prisma.RodsWhereUniqueInput[]
  disconnect?: Prisma.RodsWhereUniqueInput | Prisma.RodsWhereUniqueInput[]
  delete?: Prisma.RodsWhereUniqueInput | Prisma.RodsWhereUniqueInput[]
  connect?: Prisma.RodsWhereUniqueInput | Prisma.RodsWhereUniqueInput[]
  update?: Prisma.RodsUpdateWithWhereUniqueWithoutWellInput | Prisma.RodsUpdateWithWhereUniqueWithoutWellInput[]
  updateMany?: Prisma.RodsUpdateManyWithWhereWithoutWellInput | Prisma.RodsUpdateManyWithWhereWithoutWellInput[]
  deleteMany?: Prisma.RodsScalarWhereInput | Prisma.RodsScalarWhereInput[]
}

export type RodsUncheckedUpdateManyWithoutWellNestedInput = {
  create?: Prisma.XOR<Prisma.RodsCreateWithoutWellInput, Prisma.RodsUncheckedCreateWithoutWellInput> | Prisma.RodsCreateWithoutWellInput[] | Prisma.RodsUncheckedCreateWithoutWellInput[]
  connectOrCreate?: Prisma.RodsCreateOrConnectWithoutWellInput | Prisma.RodsCreateOrConnectWithoutWellInput[]
  upsert?: Prisma.RodsUpsertWithWhereUniqueWithoutWellInput | Prisma.RodsUpsertWithWhereUniqueWithoutWellInput[]
  createMany?: Prisma.RodsCreateManyWellInputEnvelope
  set?: Prisma.RodsWhereUniqueInput | Prisma.RodsWhereUniqueInput[]
  disconnect?: Prisma.RodsWhereUniqueInput | Prisma.RodsWhereUniqueInput[]
  delete?: Prisma.RodsWhereUniqueInput | Prisma.RodsWhereUniqueInput[]
  connect?: Prisma.RodsWhereUniqueInput | Prisma.RodsWhereUniqueInput[]
  update?: Prisma.RodsUpdateWithWhereUniqueWithoutWellInput | Prisma.RodsUpdateWithWhereUniqueWithoutWellInput[]
  updateMany?: Prisma.RodsUpdateManyWithWhereWithoutWellInput | Prisma.RodsUpdateManyWithWhereWithoutWellInput[]
  deleteMany?: Prisma.RodsScalarWhereInput | Prisma.RodsScalarWhereInput[]
}

export type RodsCreateWithoutRodEnumInput = {
  id?: string
  joints: number
  well: Prisma.WellCreateNestedOneWithoutRodsInput
}

export type RodsUncheckedCreateWithoutRodEnumInput = {
  id?: string
  api: string
  joints: number
}

export type RodsCreateOrConnectWithoutRodEnumInput = {
  where: Prisma.RodsWhereUniqueInput
  create: Prisma.XOR<Prisma.RodsCreateWithoutRodEnumInput, Prisma.RodsUncheckedCreateWithoutRodEnumInput>
}

export type RodsCreateManyRodEnumInputEnvelope = {
  data: Prisma.RodsCreateManyRodEnumInput | Prisma.RodsCreateManyRodEnumInput[]
}

export type RodsUpsertWithWhereUniqueWithoutRodEnumInput = {
  where: Prisma.RodsWhereUniqueInput
  update: Prisma.XOR<Prisma.RodsUpdateWithoutRodEnumInput, Prisma.RodsUncheckedUpdateWithoutRodEnumInput>
  create: Prisma.XOR<Prisma.RodsCreateWithoutRodEnumInput, Prisma.RodsUncheckedCreateWithoutRodEnumInput>
}

export type RodsUpdateWithWhereUniqueWithoutRodEnumInput = {
  where: Prisma.RodsWhereUniqueInput
  data: Prisma.XOR<Prisma.RodsUpdateWithoutRodEnumInput, Prisma.RodsUncheckedUpdateWithoutRodEnumInput>
}

export type RodsUpdateManyWithWhereWithoutRodEnumInput = {
  where: Prisma.RodsScalarWhereInput
  data: Prisma.XOR<Prisma.RodsUpdateManyMutationInput, Prisma.RodsUncheckedUpdateManyWithoutRodEnumInput>
}

export type RodsScalarWhereInput = {
  AND?: Prisma.RodsScalarWhereInput | Prisma.RodsScalarWhereInput[]
  OR?: Prisma.RodsScalarWhereInput[]
  NOT?: Prisma.RodsScalarWhereInput | Prisma.RodsScalarWhereInput[]
  id?: Prisma.StringFilter<"Rods"> | string
  api?: Prisma.StringFilter<"Rods"> | string
  joints?: Prisma.IntFilter<"Rods"> | number
  rodEnumId?: Prisma.StringFilter<"Rods"> | string
}

export type RodsCreateWithoutWellInput = {
  id?: string
  joints: number
  rodEnum: Prisma.RodEnumCreateNestedOneWithoutRodsInput
}

export type RodsUncheckedCreateWithoutWellInput = {
  id?: string
  joints: number
  rodEnumId: string
}

export type RodsCreateOrConnectWithoutWellInput = {
  where: Prisma.RodsWhereUniqueInput
  create: Prisma.XOR<Prisma.RodsCreateWithoutWellInput, Prisma.RodsUncheckedCreateWithoutWellInput>
}

export type RodsCreateManyWellInputEnvelope = {
  data: Prisma.RodsCreateManyWellInput | Prisma.RodsCreateManyWellInput[]
}

export type RodsUpsertWithWhereUniqueWithoutWellInput = {
  where: Prisma.RodsWhereUniqueInput
  update: Prisma.XOR<Prisma.RodsUpdateWithoutWellInput, Prisma.RodsUncheckedUpdateWithoutWellInput>
  create: Prisma.XOR<Prisma.RodsCreateWithoutWellInput, Prisma.RodsUncheckedCreateWithoutWellInput>
}

export type RodsUpdateWithWhereUniqueWithoutWellInput = {
  where: Prisma.RodsWhereUniqueInput
  data: Prisma.XOR<Prisma.RodsUpdateWithoutWellInput, Prisma.RodsUncheckedUpdateWithoutWellInput>
}

export type RodsUpdateManyWithWhereWithoutWellInput = {
  where: Prisma.RodsScalarWhereInput
  data: Prisma.XOR<Prisma.RodsUpdateManyMutationInput, Prisma.RodsUncheckedUpdateManyWithoutWellInput>
}

export type RodsCreateManyRodEnumInput = {
  id?: string
  api: string
  joints: number
}

export type RodsUpdateWithoutRodEnumInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  joints?: Prisma.IntFieldUpdateOperationsInput | number
  well?: Prisma.WellUpdateOneRequiredWithoutRodsNestedInput
}

export type RodsUncheckedUpdateWithoutRodEnumInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  api?: Prisma.StringFieldUpdateOperationsInput | string
  joints?: Prisma.IntFieldUpdateOperationsInput | number
}

export type RodsUncheckedUpdateManyWithoutRodEnumInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  api?: Prisma.StringFieldUpdateOperationsInput | string
  joints?: Prisma.IntFieldUpdateOperationsInput | number
}

export type RodsCreateManyWellInput = {
  id?: string
  joints: number
  rodEnumId: string
}

export type RodsUpdateWithoutWellInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  joints?: Prisma.IntFieldUpdateOperationsInput | number
  rodEnum?: Prisma.RodEnumUpdateOneRequiredWithoutRodsNestedInput
}

export type RodsUncheckedUpdateWithoutWellInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  joints?: Prisma.IntFieldUpdateOperationsInput | number
  rodEnumId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type RodsUncheckedUpdateManyWithoutWellInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  joints?: Prisma.IntFieldUpdateOperationsInput | number
  rodEnumId?: Prisma.StringFieldUpdateOperationsInput | string
}



export type RodsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  api?: boolean
  joints?: boolean
  rodEnumId?: boolean
  rodEnum?: boolean | Prisma.RodEnumDefaultArgs<ExtArgs>
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}, ExtArgs["result"]["rods"]>

export type RodsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  api?: boolean
  joints?: boolean
  rodEnumId?: boolean
  rodEnum?: boolean | Prisma.RodEnumDefaultArgs<ExtArgs>
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}, ExtArgs["result"]["rods"]>

export type RodsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  api?: boolean
  joints?: boolean
  rodEnumId?: boolean
  rodEnum?: boolean | Prisma.RodEnumDefaultArgs<ExtArgs>
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}, ExtArgs["result"]["rods"]>

export type RodsSelectScalar = {
  id?: boolean
  api?: boolean
  joints?: boolean
  rodEnumId?: boolean
}

export type RodsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "api" | "joints" | "rodEnumId", ExtArgs["result"]["rods"]>
export type RodsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  rodEnum?: boolean | Prisma.RodEnumDefaultArgs<ExtArgs>
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}
export type RodsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  rodEnum?: boolean | Prisma.RodEnumDefaultArgs<ExtArgs>
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}
export type RodsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  rodEnum?: boolean | Prisma.RodEnumDefaultArgs<ExtArgs>
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}

export type $RodsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Rods"
  objects: {
    rodEnum: Prisma.$RodEnumPayload<ExtArgs>
    well: Prisma.$WellPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    api: string
    joints: number
    rodEnumId: string
  }, ExtArgs["result"]["rods"]>
  composites: {}
}

export type RodsGetPayload<S extends boolean | null | undefined | RodsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RodsPayload, S>

export type RodsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RodsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RodsCountAggregateInputType | true
  }

export interface RodsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rods'], meta: { name: 'Rods' } }
  /**
   * Find zero or one Rods that matches the filter.
   * @param {RodsFindUniqueArgs} args - Arguments to find a Rods
   * @example
   * // Get one Rods
   * const rods = await prisma.rods.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RodsFindUniqueArgs>(args: Prisma.SelectSubset<T, RodsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RodsClient<runtime.Types.Result.GetResult<Prisma.$RodsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Rods that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RodsFindUniqueOrThrowArgs} args - Arguments to find a Rods
   * @example
   * // Get one Rods
   * const rods = await prisma.rods.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RodsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RodsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RodsClient<runtime.Types.Result.GetResult<Prisma.$RodsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Rods that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RodsFindFirstArgs} args - Arguments to find a Rods
   * @example
   * // Get one Rods
   * const rods = await prisma.rods.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RodsFindFirstArgs>(args?: Prisma.SelectSubset<T, RodsFindFirstArgs<ExtArgs>>): Prisma.Prisma__RodsClient<runtime.Types.Result.GetResult<Prisma.$RodsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Rods that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RodsFindFirstOrThrowArgs} args - Arguments to find a Rods
   * @example
   * // Get one Rods
   * const rods = await prisma.rods.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RodsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RodsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RodsClient<runtime.Types.Result.GetResult<Prisma.$RodsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Rods that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RodsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Rods
   * const rods = await prisma.rods.findMany()
   * 
   * // Get first 10 Rods
   * const rods = await prisma.rods.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const rodsWithIdOnly = await prisma.rods.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RodsFindManyArgs>(args?: Prisma.SelectSubset<T, RodsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RodsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Rods.
   * @param {RodsCreateArgs} args - Arguments to create a Rods.
   * @example
   * // Create one Rods
   * const Rods = await prisma.rods.create({
   *   data: {
   *     // ... data to create a Rods
   *   }
   * })
   * 
   */
  create<T extends RodsCreateArgs>(args: Prisma.SelectSubset<T, RodsCreateArgs<ExtArgs>>): Prisma.Prisma__RodsClient<runtime.Types.Result.GetResult<Prisma.$RodsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Rods.
   * @param {RodsCreateManyArgs} args - Arguments to create many Rods.
   * @example
   * // Create many Rods
   * const rods = await prisma.rods.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RodsCreateManyArgs>(args?: Prisma.SelectSubset<T, RodsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Rods and returns the data saved in the database.
   * @param {RodsCreateManyAndReturnArgs} args - Arguments to create many Rods.
   * @example
   * // Create many Rods
   * const rods = await prisma.rods.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Rods and only return the `id`
   * const rodsWithIdOnly = await prisma.rods.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends RodsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, RodsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RodsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Rods.
   * @param {RodsDeleteArgs} args - Arguments to delete one Rods.
   * @example
   * // Delete one Rods
   * const Rods = await prisma.rods.delete({
   *   where: {
   *     // ... filter to delete one Rods
   *   }
   * })
   * 
   */
  delete<T extends RodsDeleteArgs>(args: Prisma.SelectSubset<T, RodsDeleteArgs<ExtArgs>>): Prisma.Prisma__RodsClient<runtime.Types.Result.GetResult<Prisma.$RodsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Rods.
   * @param {RodsUpdateArgs} args - Arguments to update one Rods.
   * @example
   * // Update one Rods
   * const rods = await prisma.rods.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RodsUpdateArgs>(args: Prisma.SelectSubset<T, RodsUpdateArgs<ExtArgs>>): Prisma.Prisma__RodsClient<runtime.Types.Result.GetResult<Prisma.$RodsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Rods.
   * @param {RodsDeleteManyArgs} args - Arguments to filter Rods to delete.
   * @example
   * // Delete a few Rods
   * const { count } = await prisma.rods.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RodsDeleteManyArgs>(args?: Prisma.SelectSubset<T, RodsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Rods.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RodsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Rods
   * const rods = await prisma.rods.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RodsUpdateManyArgs>(args: Prisma.SelectSubset<T, RodsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Rods and returns the data updated in the database.
   * @param {RodsUpdateManyAndReturnArgs} args - Arguments to update many Rods.
   * @example
   * // Update many Rods
   * const rods = await prisma.rods.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Rods and only return the `id`
   * const rodsWithIdOnly = await prisma.rods.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends RodsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, RodsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RodsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Rods.
   * @param {RodsUpsertArgs} args - Arguments to update or create a Rods.
   * @example
   * // Update or create a Rods
   * const rods = await prisma.rods.upsert({
   *   create: {
   *     // ... data to create a Rods
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Rods we want to update
   *   }
   * })
   */
  upsert<T extends RodsUpsertArgs>(args: Prisma.SelectSubset<T, RodsUpsertArgs<ExtArgs>>): Prisma.Prisma__RodsClient<runtime.Types.Result.GetResult<Prisma.$RodsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Rods.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RodsCountArgs} args - Arguments to filter Rods to count.
   * @example
   * // Count the number of Rods
   * const count = await prisma.rods.count({
   *   where: {
   *     // ... the filter for the Rods we want to count
   *   }
   * })
  **/
  count<T extends RodsCountArgs>(
    args?: Prisma.Subset<T, RodsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RodsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Rods.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RodsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RodsAggregateArgs>(args: Prisma.Subset<T, RodsAggregateArgs>): Prisma.PrismaPromise<GetRodsAggregateType<T>>

  /**
   * Group by Rods.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RodsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RodsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RodsGroupByArgs['orderBy'] }
      : { orderBy?: RodsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RodsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRodsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Rods model
 */
readonly fields: RodsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Rods.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RodsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  rodEnum<T extends Prisma.RodEnumDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.RodEnumDefaultArgs<ExtArgs>>): Prisma.Prisma__RodEnumClient<runtime.Types.Result.GetResult<Prisma.$RodEnumPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  well<T extends Prisma.WellDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WellDefaultArgs<ExtArgs>>): Prisma.Prisma__WellClient<runtime.Types.Result.GetResult<Prisma.$WellPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Rods model
 */
export interface RodsFieldRefs {
  readonly id: Prisma.FieldRef<"Rods", 'String'>
  readonly api: Prisma.FieldRef<"Rods", 'String'>
  readonly joints: Prisma.FieldRef<"Rods", 'Int'>
  readonly rodEnumId: Prisma.FieldRef<"Rods", 'String'>
}
    

// Custom InputTypes
/**
 * Rods findUnique
 */
export type RodsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rods
   */
  select?: Prisma.RodsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rods
   */
  omit?: Prisma.RodsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RodsInclude<ExtArgs> | null
  /**
   * Filter, which Rods to fetch.
   */
  where: Prisma.RodsWhereUniqueInput
}

/**
 * Rods findUniqueOrThrow
 */
export type RodsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rods
   */
  select?: Prisma.RodsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rods
   */
  omit?: Prisma.RodsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RodsInclude<ExtArgs> | null
  /**
   * Filter, which Rods to fetch.
   */
  where: Prisma.RodsWhereUniqueInput
}

/**
 * Rods findFirst
 */
export type RodsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rods
   */
  select?: Prisma.RodsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rods
   */
  omit?: Prisma.RodsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RodsInclude<ExtArgs> | null
  /**
   * Filter, which Rods to fetch.
   */
  where?: Prisma.RodsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Rods to fetch.
   */
  orderBy?: Prisma.RodsOrderByWithRelationInput | Prisma.RodsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Rods.
   */
  cursor?: Prisma.RodsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Rods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Rods.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Rods.
   */
  distinct?: Prisma.RodsScalarFieldEnum | Prisma.RodsScalarFieldEnum[]
}

/**
 * Rods findFirstOrThrow
 */
export type RodsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rods
   */
  select?: Prisma.RodsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rods
   */
  omit?: Prisma.RodsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RodsInclude<ExtArgs> | null
  /**
   * Filter, which Rods to fetch.
   */
  where?: Prisma.RodsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Rods to fetch.
   */
  orderBy?: Prisma.RodsOrderByWithRelationInput | Prisma.RodsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Rods.
   */
  cursor?: Prisma.RodsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Rods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Rods.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Rods.
   */
  distinct?: Prisma.RodsScalarFieldEnum | Prisma.RodsScalarFieldEnum[]
}

/**
 * Rods findMany
 */
export type RodsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rods
   */
  select?: Prisma.RodsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rods
   */
  omit?: Prisma.RodsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RodsInclude<ExtArgs> | null
  /**
   * Filter, which Rods to fetch.
   */
  where?: Prisma.RodsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Rods to fetch.
   */
  orderBy?: Prisma.RodsOrderByWithRelationInput | Prisma.RodsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Rods.
   */
  cursor?: Prisma.RodsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Rods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Rods.
   */
  skip?: number
  distinct?: Prisma.RodsScalarFieldEnum | Prisma.RodsScalarFieldEnum[]
}

/**
 * Rods create
 */
export type RodsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rods
   */
  select?: Prisma.RodsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rods
   */
  omit?: Prisma.RodsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RodsInclude<ExtArgs> | null
  /**
   * The data needed to create a Rods.
   */
  data: Prisma.XOR<Prisma.RodsCreateInput, Prisma.RodsUncheckedCreateInput>
}

/**
 * Rods createMany
 */
export type RodsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Rods.
   */
  data: Prisma.RodsCreateManyInput | Prisma.RodsCreateManyInput[]
}

/**
 * Rods createManyAndReturn
 */
export type RodsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rods
   */
  select?: Prisma.RodsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Rods
   */
  omit?: Prisma.RodsOmit<ExtArgs> | null
  /**
   * The data used to create many Rods.
   */
  data: Prisma.RodsCreateManyInput | Prisma.RodsCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RodsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Rods update
 */
export type RodsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rods
   */
  select?: Prisma.RodsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rods
   */
  omit?: Prisma.RodsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RodsInclude<ExtArgs> | null
  /**
   * The data needed to update a Rods.
   */
  data: Prisma.XOR<Prisma.RodsUpdateInput, Prisma.RodsUncheckedUpdateInput>
  /**
   * Choose, which Rods to update.
   */
  where: Prisma.RodsWhereUniqueInput
}

/**
 * Rods updateMany
 */
export type RodsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Rods.
   */
  data: Prisma.XOR<Prisma.RodsUpdateManyMutationInput, Prisma.RodsUncheckedUpdateManyInput>
  /**
   * Filter which Rods to update
   */
  where?: Prisma.RodsWhereInput
  /**
   * Limit how many Rods to update.
   */
  limit?: number
}

/**
 * Rods updateManyAndReturn
 */
export type RodsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rods
   */
  select?: Prisma.RodsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Rods
   */
  omit?: Prisma.RodsOmit<ExtArgs> | null
  /**
   * The data used to update Rods.
   */
  data: Prisma.XOR<Prisma.RodsUpdateManyMutationInput, Prisma.RodsUncheckedUpdateManyInput>
  /**
   * Filter which Rods to update
   */
  where?: Prisma.RodsWhereInput
  /**
   * Limit how many Rods to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RodsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Rods upsert
 */
export type RodsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rods
   */
  select?: Prisma.RodsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rods
   */
  omit?: Prisma.RodsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RodsInclude<ExtArgs> | null
  /**
   * The filter to search for the Rods to update in case it exists.
   */
  where: Prisma.RodsWhereUniqueInput
  /**
   * In case the Rods found by the `where` argument doesn't exist, create a new Rods with this data.
   */
  create: Prisma.XOR<Prisma.RodsCreateInput, Prisma.RodsUncheckedCreateInput>
  /**
   * In case the Rods was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RodsUpdateInput, Prisma.RodsUncheckedUpdateInput>
}

/**
 * Rods delete
 */
export type RodsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rods
   */
  select?: Prisma.RodsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rods
   */
  omit?: Prisma.RodsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RodsInclude<ExtArgs> | null
  /**
   * Filter which Rods to delete.
   */
  where: Prisma.RodsWhereUniqueInput
}

/**
 * Rods deleteMany
 */
export type RodsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Rods to delete
   */
  where?: Prisma.RodsWhereInput
  /**
   * Limit how many Rods to delete.
   */
  limit?: number
}

/**
 * Rods without action
 */
export type RodsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rods
   */
  select?: Prisma.RodsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rods
   */
  omit?: Prisma.RodsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RodsInclude<ExtArgs> | null
}
