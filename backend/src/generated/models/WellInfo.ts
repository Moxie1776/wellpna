
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `WellInfo` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model WellInfo
 * 
 */
export type WellInfoModel = runtime.Types.Result.DefaultSelection<Prisma.$WellInfoPayload>

export type AggregateWellInfo = {
  _count: WellInfoCountAggregateOutputType | null
  _avg: WellInfoAvgAggregateOutputType | null
  _sum: WellInfoSumAggregateOutputType | null
  _min: WellInfoMinAggregateOutputType | null
  _max: WellInfoMaxAggregateOutputType | null
}

export type WellInfoAvgAggregateOutputType = {
  totalDepth: number | null
}

export type WellInfoSumAggregateOutputType = {
  totalDepth: number | null
}

export type WellInfoMinAggregateOutputType = {
  id: string | null
  api: string | null
  districtNo: string | null
  drillingPermitNo: string | null
  wellNo: string | null
  field: string | null
  lease: string | null
  completionType: string | null
  totalDepth: number | null
  wellType: string | null
}

export type WellInfoMaxAggregateOutputType = {
  id: string | null
  api: string | null
  districtNo: string | null
  drillingPermitNo: string | null
  wellNo: string | null
  field: string | null
  lease: string | null
  completionType: string | null
  totalDepth: number | null
  wellType: string | null
}

export type WellInfoCountAggregateOutputType = {
  id: number
  api: number
  districtNo: number
  drillingPermitNo: number
  wellNo: number
  field: number
  lease: number
  completionType: number
  totalDepth: number
  wellType: number
  _all: number
}


export type WellInfoAvgAggregateInputType = {
  totalDepth?: true
}

export type WellInfoSumAggregateInputType = {
  totalDepth?: true
}

export type WellInfoMinAggregateInputType = {
  id?: true
  api?: true
  districtNo?: true
  drillingPermitNo?: true
  wellNo?: true
  field?: true
  lease?: true
  completionType?: true
  totalDepth?: true
  wellType?: true
}

export type WellInfoMaxAggregateInputType = {
  id?: true
  api?: true
  districtNo?: true
  drillingPermitNo?: true
  wellNo?: true
  field?: true
  lease?: true
  completionType?: true
  totalDepth?: true
  wellType?: true
}

export type WellInfoCountAggregateInputType = {
  id?: true
  api?: true
  districtNo?: true
  drillingPermitNo?: true
  wellNo?: true
  field?: true
  lease?: true
  completionType?: true
  totalDepth?: true
  wellType?: true
  _all?: true
}

export type WellInfoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WellInfo to aggregate.
   */
  where?: Prisma.WellInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WellInfos to fetch.
   */
  orderBy?: Prisma.WellInfoOrderByWithRelationInput | Prisma.WellInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WellInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WellInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WellInfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned WellInfos
  **/
  _count?: true | WellInfoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WellInfoAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WellInfoSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WellInfoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WellInfoMaxAggregateInputType
}

export type GetWellInfoAggregateType<T extends WellInfoAggregateArgs> = {
      [P in keyof T & keyof AggregateWellInfo]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWellInfo[P]>
    : Prisma.GetScalarType<T[P], AggregateWellInfo[P]>
}




export type WellInfoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WellInfoWhereInput
  orderBy?: Prisma.WellInfoOrderByWithAggregationInput | Prisma.WellInfoOrderByWithAggregationInput[]
  by: Prisma.WellInfoScalarFieldEnum[] | Prisma.WellInfoScalarFieldEnum
  having?: Prisma.WellInfoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WellInfoCountAggregateInputType | true
  _avg?: WellInfoAvgAggregateInputType
  _sum?: WellInfoSumAggregateInputType
  _min?: WellInfoMinAggregateInputType
  _max?: WellInfoMaxAggregateInputType
}

export type WellInfoGroupByOutputType = {
  id: string
  api: string
  districtNo: string
  drillingPermitNo: string
  wellNo: string
  field: string
  lease: string
  completionType: string
  totalDepth: number
  wellType: string
  _count: WellInfoCountAggregateOutputType | null
  _avg: WellInfoAvgAggregateOutputType | null
  _sum: WellInfoSumAggregateOutputType | null
  _min: WellInfoMinAggregateOutputType | null
  _max: WellInfoMaxAggregateOutputType | null
}

type GetWellInfoGroupByPayload<T extends WellInfoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WellInfoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WellInfoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WellInfoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WellInfoGroupByOutputType[P]>
      }
    >
  >



export type WellInfoWhereInput = {
  AND?: Prisma.WellInfoWhereInput | Prisma.WellInfoWhereInput[]
  OR?: Prisma.WellInfoWhereInput[]
  NOT?: Prisma.WellInfoWhereInput | Prisma.WellInfoWhereInput[]
  id?: Prisma.StringFilter<"WellInfo"> | string
  api?: Prisma.StringFilter<"WellInfo"> | string
  districtNo?: Prisma.StringFilter<"WellInfo"> | string
  drillingPermitNo?: Prisma.StringFilter<"WellInfo"> | string
  wellNo?: Prisma.StringFilter<"WellInfo"> | string
  field?: Prisma.StringFilter<"WellInfo"> | string
  lease?: Prisma.StringFilter<"WellInfo"> | string
  completionType?: Prisma.StringFilter<"WellInfo"> | string
  totalDepth?: Prisma.IntFilter<"WellInfo"> | number
  wellType?: Prisma.StringFilter<"WellInfo"> | string
  well?: Prisma.XOR<Prisma.WellScalarRelationFilter, Prisma.WellWhereInput>
}

export type WellInfoOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  districtNo?: Prisma.SortOrder
  drillingPermitNo?: Prisma.SortOrder
  wellNo?: Prisma.SortOrder
  field?: Prisma.SortOrder
  lease?: Prisma.SortOrder
  completionType?: Prisma.SortOrder
  totalDepth?: Prisma.SortOrder
  wellType?: Prisma.SortOrder
  well?: Prisma.WellOrderByWithRelationInput
}

export type WellInfoWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  api?: string
  AND?: Prisma.WellInfoWhereInput | Prisma.WellInfoWhereInput[]
  OR?: Prisma.WellInfoWhereInput[]
  NOT?: Prisma.WellInfoWhereInput | Prisma.WellInfoWhereInput[]
  districtNo?: Prisma.StringFilter<"WellInfo"> | string
  drillingPermitNo?: Prisma.StringFilter<"WellInfo"> | string
  wellNo?: Prisma.StringFilter<"WellInfo"> | string
  field?: Prisma.StringFilter<"WellInfo"> | string
  lease?: Prisma.StringFilter<"WellInfo"> | string
  completionType?: Prisma.StringFilter<"WellInfo"> | string
  totalDepth?: Prisma.IntFilter<"WellInfo"> | number
  wellType?: Prisma.StringFilter<"WellInfo"> | string
  well?: Prisma.XOR<Prisma.WellScalarRelationFilter, Prisma.WellWhereInput>
}, "id" | "api">

export type WellInfoOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  districtNo?: Prisma.SortOrder
  drillingPermitNo?: Prisma.SortOrder
  wellNo?: Prisma.SortOrder
  field?: Prisma.SortOrder
  lease?: Prisma.SortOrder
  completionType?: Prisma.SortOrder
  totalDepth?: Prisma.SortOrder
  wellType?: Prisma.SortOrder
  _count?: Prisma.WellInfoCountOrderByAggregateInput
  _avg?: Prisma.WellInfoAvgOrderByAggregateInput
  _max?: Prisma.WellInfoMaxOrderByAggregateInput
  _min?: Prisma.WellInfoMinOrderByAggregateInput
  _sum?: Prisma.WellInfoSumOrderByAggregateInput
}

export type WellInfoScalarWhereWithAggregatesInput = {
  AND?: Prisma.WellInfoScalarWhereWithAggregatesInput | Prisma.WellInfoScalarWhereWithAggregatesInput[]
  OR?: Prisma.WellInfoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WellInfoScalarWhereWithAggregatesInput | Prisma.WellInfoScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"WellInfo"> | string
  api?: Prisma.StringWithAggregatesFilter<"WellInfo"> | string
  districtNo?: Prisma.StringWithAggregatesFilter<"WellInfo"> | string
  drillingPermitNo?: Prisma.StringWithAggregatesFilter<"WellInfo"> | string
  wellNo?: Prisma.StringWithAggregatesFilter<"WellInfo"> | string
  field?: Prisma.StringWithAggregatesFilter<"WellInfo"> | string
  lease?: Prisma.StringWithAggregatesFilter<"WellInfo"> | string
  completionType?: Prisma.StringWithAggregatesFilter<"WellInfo"> | string
  totalDepth?: Prisma.IntWithAggregatesFilter<"WellInfo"> | number
  wellType?: Prisma.StringWithAggregatesFilter<"WellInfo"> | string
}

export type WellInfoCreateInput = {
  id?: string
  districtNo: string
  drillingPermitNo: string
  wellNo: string
  field: string
  lease: string
  completionType: string
  totalDepth: number
  wellType: string
  well: Prisma.WellCreateNestedOneWithoutWellInfoInput
}

export type WellInfoUncheckedCreateInput = {
  id?: string
  api: string
  districtNo: string
  drillingPermitNo: string
  wellNo: string
  field: string
  lease: string
  completionType: string
  totalDepth: number
  wellType: string
}

export type WellInfoUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  districtNo?: Prisma.StringFieldUpdateOperationsInput | string
  drillingPermitNo?: Prisma.StringFieldUpdateOperationsInput | string
  wellNo?: Prisma.StringFieldUpdateOperationsInput | string
  field?: Prisma.StringFieldUpdateOperationsInput | string
  lease?: Prisma.StringFieldUpdateOperationsInput | string
  completionType?: Prisma.StringFieldUpdateOperationsInput | string
  totalDepth?: Prisma.IntFieldUpdateOperationsInput | number
  wellType?: Prisma.StringFieldUpdateOperationsInput | string
  well?: Prisma.WellUpdateOneRequiredWithoutWellInfoNestedInput
}

export type WellInfoUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  api?: Prisma.StringFieldUpdateOperationsInput | string
  districtNo?: Prisma.StringFieldUpdateOperationsInput | string
  drillingPermitNo?: Prisma.StringFieldUpdateOperationsInput | string
  wellNo?: Prisma.StringFieldUpdateOperationsInput | string
  field?: Prisma.StringFieldUpdateOperationsInput | string
  lease?: Prisma.StringFieldUpdateOperationsInput | string
  completionType?: Prisma.StringFieldUpdateOperationsInput | string
  totalDepth?: Prisma.IntFieldUpdateOperationsInput | number
  wellType?: Prisma.StringFieldUpdateOperationsInput | string
}

export type WellInfoCreateManyInput = {
  id?: string
  api: string
  districtNo: string
  drillingPermitNo: string
  wellNo: string
  field: string
  lease: string
  completionType: string
  totalDepth: number
  wellType: string
}

export type WellInfoUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  districtNo?: Prisma.StringFieldUpdateOperationsInput | string
  drillingPermitNo?: Prisma.StringFieldUpdateOperationsInput | string
  wellNo?: Prisma.StringFieldUpdateOperationsInput | string
  field?: Prisma.StringFieldUpdateOperationsInput | string
  lease?: Prisma.StringFieldUpdateOperationsInput | string
  completionType?: Prisma.StringFieldUpdateOperationsInput | string
  totalDepth?: Prisma.IntFieldUpdateOperationsInput | number
  wellType?: Prisma.StringFieldUpdateOperationsInput | string
}

export type WellInfoUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  api?: Prisma.StringFieldUpdateOperationsInput | string
  districtNo?: Prisma.StringFieldUpdateOperationsInput | string
  drillingPermitNo?: Prisma.StringFieldUpdateOperationsInput | string
  wellNo?: Prisma.StringFieldUpdateOperationsInput | string
  field?: Prisma.StringFieldUpdateOperationsInput | string
  lease?: Prisma.StringFieldUpdateOperationsInput | string
  completionType?: Prisma.StringFieldUpdateOperationsInput | string
  totalDepth?: Prisma.IntFieldUpdateOperationsInput | number
  wellType?: Prisma.StringFieldUpdateOperationsInput | string
}

export type WellInfoNullableScalarRelationFilter = {
  is?: Prisma.WellInfoWhereInput | null
  isNot?: Prisma.WellInfoWhereInput | null
}

export type WellInfoCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  districtNo?: Prisma.SortOrder
  drillingPermitNo?: Prisma.SortOrder
  wellNo?: Prisma.SortOrder
  field?: Prisma.SortOrder
  lease?: Prisma.SortOrder
  completionType?: Prisma.SortOrder
  totalDepth?: Prisma.SortOrder
  wellType?: Prisma.SortOrder
}

export type WellInfoAvgOrderByAggregateInput = {
  totalDepth?: Prisma.SortOrder
}

export type WellInfoMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  districtNo?: Prisma.SortOrder
  drillingPermitNo?: Prisma.SortOrder
  wellNo?: Prisma.SortOrder
  field?: Prisma.SortOrder
  lease?: Prisma.SortOrder
  completionType?: Prisma.SortOrder
  totalDepth?: Prisma.SortOrder
  wellType?: Prisma.SortOrder
}

export type WellInfoMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  districtNo?: Prisma.SortOrder
  drillingPermitNo?: Prisma.SortOrder
  wellNo?: Prisma.SortOrder
  field?: Prisma.SortOrder
  lease?: Prisma.SortOrder
  completionType?: Prisma.SortOrder
  totalDepth?: Prisma.SortOrder
  wellType?: Prisma.SortOrder
}

export type WellInfoSumOrderByAggregateInput = {
  totalDepth?: Prisma.SortOrder
}

export type WellInfoCreateNestedOneWithoutWellInput = {
  create?: Prisma.XOR<Prisma.WellInfoCreateWithoutWellInput, Prisma.WellInfoUncheckedCreateWithoutWellInput>
  connectOrCreate?: Prisma.WellInfoCreateOrConnectWithoutWellInput
  connect?: Prisma.WellInfoWhereUniqueInput
}

export type WellInfoUncheckedCreateNestedOneWithoutWellInput = {
  create?: Prisma.XOR<Prisma.WellInfoCreateWithoutWellInput, Prisma.WellInfoUncheckedCreateWithoutWellInput>
  connectOrCreate?: Prisma.WellInfoCreateOrConnectWithoutWellInput
  connect?: Prisma.WellInfoWhereUniqueInput
}

export type WellInfoUpdateOneWithoutWellNestedInput = {
  create?: Prisma.XOR<Prisma.WellInfoCreateWithoutWellInput, Prisma.WellInfoUncheckedCreateWithoutWellInput>
  connectOrCreate?: Prisma.WellInfoCreateOrConnectWithoutWellInput
  upsert?: Prisma.WellInfoUpsertWithoutWellInput
  disconnect?: Prisma.WellInfoWhereInput | boolean
  delete?: Prisma.WellInfoWhereInput | boolean
  connect?: Prisma.WellInfoWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WellInfoUpdateToOneWithWhereWithoutWellInput, Prisma.WellInfoUpdateWithoutWellInput>, Prisma.WellInfoUncheckedUpdateWithoutWellInput>
}

export type WellInfoUncheckedUpdateOneWithoutWellNestedInput = {
  create?: Prisma.XOR<Prisma.WellInfoCreateWithoutWellInput, Prisma.WellInfoUncheckedCreateWithoutWellInput>
  connectOrCreate?: Prisma.WellInfoCreateOrConnectWithoutWellInput
  upsert?: Prisma.WellInfoUpsertWithoutWellInput
  disconnect?: Prisma.WellInfoWhereInput | boolean
  delete?: Prisma.WellInfoWhereInput | boolean
  connect?: Prisma.WellInfoWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WellInfoUpdateToOneWithWhereWithoutWellInput, Prisma.WellInfoUpdateWithoutWellInput>, Prisma.WellInfoUncheckedUpdateWithoutWellInput>
}

export type WellInfoCreateWithoutWellInput = {
  id?: string
  districtNo: string
  drillingPermitNo: string
  wellNo: string
  field: string
  lease: string
  completionType: string
  totalDepth: number
  wellType: string
}

export type WellInfoUncheckedCreateWithoutWellInput = {
  id?: string
  districtNo: string
  drillingPermitNo: string
  wellNo: string
  field: string
  lease: string
  completionType: string
  totalDepth: number
  wellType: string
}

export type WellInfoCreateOrConnectWithoutWellInput = {
  where: Prisma.WellInfoWhereUniqueInput
  create: Prisma.XOR<Prisma.WellInfoCreateWithoutWellInput, Prisma.WellInfoUncheckedCreateWithoutWellInput>
}

export type WellInfoUpsertWithoutWellInput = {
  update: Prisma.XOR<Prisma.WellInfoUpdateWithoutWellInput, Prisma.WellInfoUncheckedUpdateWithoutWellInput>
  create: Prisma.XOR<Prisma.WellInfoCreateWithoutWellInput, Prisma.WellInfoUncheckedCreateWithoutWellInput>
  where?: Prisma.WellInfoWhereInput
}

export type WellInfoUpdateToOneWithWhereWithoutWellInput = {
  where?: Prisma.WellInfoWhereInput
  data: Prisma.XOR<Prisma.WellInfoUpdateWithoutWellInput, Prisma.WellInfoUncheckedUpdateWithoutWellInput>
}

export type WellInfoUpdateWithoutWellInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  districtNo?: Prisma.StringFieldUpdateOperationsInput | string
  drillingPermitNo?: Prisma.StringFieldUpdateOperationsInput | string
  wellNo?: Prisma.StringFieldUpdateOperationsInput | string
  field?: Prisma.StringFieldUpdateOperationsInput | string
  lease?: Prisma.StringFieldUpdateOperationsInput | string
  completionType?: Prisma.StringFieldUpdateOperationsInput | string
  totalDepth?: Prisma.IntFieldUpdateOperationsInput | number
  wellType?: Prisma.StringFieldUpdateOperationsInput | string
}

export type WellInfoUncheckedUpdateWithoutWellInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  districtNo?: Prisma.StringFieldUpdateOperationsInput | string
  drillingPermitNo?: Prisma.StringFieldUpdateOperationsInput | string
  wellNo?: Prisma.StringFieldUpdateOperationsInput | string
  field?: Prisma.StringFieldUpdateOperationsInput | string
  lease?: Prisma.StringFieldUpdateOperationsInput | string
  completionType?: Prisma.StringFieldUpdateOperationsInput | string
  totalDepth?: Prisma.IntFieldUpdateOperationsInput | number
  wellType?: Prisma.StringFieldUpdateOperationsInput | string
}



export type WellInfoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  api?: boolean
  districtNo?: boolean
  drillingPermitNo?: boolean
  wellNo?: boolean
  field?: boolean
  lease?: boolean
  completionType?: boolean
  totalDepth?: boolean
  wellType?: boolean
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}, ExtArgs["result"]["wellInfo"]>

export type WellInfoSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  api?: boolean
  districtNo?: boolean
  drillingPermitNo?: boolean
  wellNo?: boolean
  field?: boolean
  lease?: boolean
  completionType?: boolean
  totalDepth?: boolean
  wellType?: boolean
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}, ExtArgs["result"]["wellInfo"]>

export type WellInfoSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  api?: boolean
  districtNo?: boolean
  drillingPermitNo?: boolean
  wellNo?: boolean
  field?: boolean
  lease?: boolean
  completionType?: boolean
  totalDepth?: boolean
  wellType?: boolean
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}, ExtArgs["result"]["wellInfo"]>

export type WellInfoSelectScalar = {
  id?: boolean
  api?: boolean
  districtNo?: boolean
  drillingPermitNo?: boolean
  wellNo?: boolean
  field?: boolean
  lease?: boolean
  completionType?: boolean
  totalDepth?: boolean
  wellType?: boolean
}

export type WellInfoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "api" | "districtNo" | "drillingPermitNo" | "wellNo" | "field" | "lease" | "completionType" | "totalDepth" | "wellType", ExtArgs["result"]["wellInfo"]>
export type WellInfoInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}
export type WellInfoIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}
export type WellInfoIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}

export type $WellInfoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "WellInfo"
  objects: {
    well: Prisma.$WellPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    api: string
    districtNo: string
    drillingPermitNo: string
    wellNo: string
    field: string
    lease: string
    completionType: string
    totalDepth: number
    wellType: string
  }, ExtArgs["result"]["wellInfo"]>
  composites: {}
}

export type WellInfoGetPayload<S extends boolean | null | undefined | WellInfoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WellInfoPayload, S>

export type WellInfoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WellInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WellInfoCountAggregateInputType | true
  }

export interface WellInfoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WellInfo'], meta: { name: 'WellInfo' } }
  /**
   * Find zero or one WellInfo that matches the filter.
   * @param {WellInfoFindUniqueArgs} args - Arguments to find a WellInfo
   * @example
   * // Get one WellInfo
   * const wellInfo = await prisma.wellInfo.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WellInfoFindUniqueArgs>(args: Prisma.SelectSubset<T, WellInfoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WellInfoClient<runtime.Types.Result.GetResult<Prisma.$WellInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WellInfo that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WellInfoFindUniqueOrThrowArgs} args - Arguments to find a WellInfo
   * @example
   * // Get one WellInfo
   * const wellInfo = await prisma.wellInfo.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WellInfoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WellInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WellInfoClient<runtime.Types.Result.GetResult<Prisma.$WellInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WellInfo that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WellInfoFindFirstArgs} args - Arguments to find a WellInfo
   * @example
   * // Get one WellInfo
   * const wellInfo = await prisma.wellInfo.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WellInfoFindFirstArgs>(args?: Prisma.SelectSubset<T, WellInfoFindFirstArgs<ExtArgs>>): Prisma.Prisma__WellInfoClient<runtime.Types.Result.GetResult<Prisma.$WellInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WellInfo that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WellInfoFindFirstOrThrowArgs} args - Arguments to find a WellInfo
   * @example
   * // Get one WellInfo
   * const wellInfo = await prisma.wellInfo.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WellInfoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WellInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WellInfoClient<runtime.Types.Result.GetResult<Prisma.$WellInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WellInfos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WellInfoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WellInfos
   * const wellInfos = await prisma.wellInfo.findMany()
   * 
   * // Get first 10 WellInfos
   * const wellInfos = await prisma.wellInfo.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const wellInfoWithIdOnly = await prisma.wellInfo.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WellInfoFindManyArgs>(args?: Prisma.SelectSubset<T, WellInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WellInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WellInfo.
   * @param {WellInfoCreateArgs} args - Arguments to create a WellInfo.
   * @example
   * // Create one WellInfo
   * const WellInfo = await prisma.wellInfo.create({
   *   data: {
   *     // ... data to create a WellInfo
   *   }
   * })
   * 
   */
  create<T extends WellInfoCreateArgs>(args: Prisma.SelectSubset<T, WellInfoCreateArgs<ExtArgs>>): Prisma.Prisma__WellInfoClient<runtime.Types.Result.GetResult<Prisma.$WellInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WellInfos.
   * @param {WellInfoCreateManyArgs} args - Arguments to create many WellInfos.
   * @example
   * // Create many WellInfos
   * const wellInfo = await prisma.wellInfo.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WellInfoCreateManyArgs>(args?: Prisma.SelectSubset<T, WellInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many WellInfos and returns the data saved in the database.
   * @param {WellInfoCreateManyAndReturnArgs} args - Arguments to create many WellInfos.
   * @example
   * // Create many WellInfos
   * const wellInfo = await prisma.wellInfo.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many WellInfos and only return the `id`
   * const wellInfoWithIdOnly = await prisma.wellInfo.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WellInfoCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WellInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WellInfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a WellInfo.
   * @param {WellInfoDeleteArgs} args - Arguments to delete one WellInfo.
   * @example
   * // Delete one WellInfo
   * const WellInfo = await prisma.wellInfo.delete({
   *   where: {
   *     // ... filter to delete one WellInfo
   *   }
   * })
   * 
   */
  delete<T extends WellInfoDeleteArgs>(args: Prisma.SelectSubset<T, WellInfoDeleteArgs<ExtArgs>>): Prisma.Prisma__WellInfoClient<runtime.Types.Result.GetResult<Prisma.$WellInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WellInfo.
   * @param {WellInfoUpdateArgs} args - Arguments to update one WellInfo.
   * @example
   * // Update one WellInfo
   * const wellInfo = await prisma.wellInfo.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WellInfoUpdateArgs>(args: Prisma.SelectSubset<T, WellInfoUpdateArgs<ExtArgs>>): Prisma.Prisma__WellInfoClient<runtime.Types.Result.GetResult<Prisma.$WellInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WellInfos.
   * @param {WellInfoDeleteManyArgs} args - Arguments to filter WellInfos to delete.
   * @example
   * // Delete a few WellInfos
   * const { count } = await prisma.wellInfo.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WellInfoDeleteManyArgs>(args?: Prisma.SelectSubset<T, WellInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WellInfos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WellInfoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WellInfos
   * const wellInfo = await prisma.wellInfo.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WellInfoUpdateManyArgs>(args: Prisma.SelectSubset<T, WellInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WellInfos and returns the data updated in the database.
   * @param {WellInfoUpdateManyAndReturnArgs} args - Arguments to update many WellInfos.
   * @example
   * // Update many WellInfos
   * const wellInfo = await prisma.wellInfo.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more WellInfos and only return the `id`
   * const wellInfoWithIdOnly = await prisma.wellInfo.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WellInfoUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WellInfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WellInfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one WellInfo.
   * @param {WellInfoUpsertArgs} args - Arguments to update or create a WellInfo.
   * @example
   * // Update or create a WellInfo
   * const wellInfo = await prisma.wellInfo.upsert({
   *   create: {
   *     // ... data to create a WellInfo
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WellInfo we want to update
   *   }
   * })
   */
  upsert<T extends WellInfoUpsertArgs>(args: Prisma.SelectSubset<T, WellInfoUpsertArgs<ExtArgs>>): Prisma.Prisma__WellInfoClient<runtime.Types.Result.GetResult<Prisma.$WellInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WellInfos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WellInfoCountArgs} args - Arguments to filter WellInfos to count.
   * @example
   * // Count the number of WellInfos
   * const count = await prisma.wellInfo.count({
   *   where: {
   *     // ... the filter for the WellInfos we want to count
   *   }
   * })
  **/
  count<T extends WellInfoCountArgs>(
    args?: Prisma.Subset<T, WellInfoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WellInfoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WellInfo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WellInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WellInfoAggregateArgs>(args: Prisma.Subset<T, WellInfoAggregateArgs>): Prisma.PrismaPromise<GetWellInfoAggregateType<T>>

  /**
   * Group by WellInfo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WellInfoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WellInfoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WellInfoGroupByArgs['orderBy'] }
      : { orderBy?: WellInfoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WellInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWellInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the WellInfo model
 */
readonly fields: WellInfoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WellInfo.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WellInfoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  well<T extends Prisma.WellDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WellDefaultArgs<ExtArgs>>): Prisma.Prisma__WellClient<runtime.Types.Result.GetResult<Prisma.$WellPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the WellInfo model
 */
export interface WellInfoFieldRefs {
  readonly id: Prisma.FieldRef<"WellInfo", 'String'>
  readonly api: Prisma.FieldRef<"WellInfo", 'String'>
  readonly districtNo: Prisma.FieldRef<"WellInfo", 'String'>
  readonly drillingPermitNo: Prisma.FieldRef<"WellInfo", 'String'>
  readonly wellNo: Prisma.FieldRef<"WellInfo", 'String'>
  readonly field: Prisma.FieldRef<"WellInfo", 'String'>
  readonly lease: Prisma.FieldRef<"WellInfo", 'String'>
  readonly completionType: Prisma.FieldRef<"WellInfo", 'String'>
  readonly totalDepth: Prisma.FieldRef<"WellInfo", 'Int'>
  readonly wellType: Prisma.FieldRef<"WellInfo", 'String'>
}
    

// Custom InputTypes
/**
 * WellInfo findUnique
 */
export type WellInfoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WellInfo
   */
  select?: Prisma.WellInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WellInfo
   */
  omit?: Prisma.WellInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WellInfoInclude<ExtArgs> | null
  /**
   * Filter, which WellInfo to fetch.
   */
  where: Prisma.WellInfoWhereUniqueInput
}

/**
 * WellInfo findUniqueOrThrow
 */
export type WellInfoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WellInfo
   */
  select?: Prisma.WellInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WellInfo
   */
  omit?: Prisma.WellInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WellInfoInclude<ExtArgs> | null
  /**
   * Filter, which WellInfo to fetch.
   */
  where: Prisma.WellInfoWhereUniqueInput
}

/**
 * WellInfo findFirst
 */
export type WellInfoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WellInfo
   */
  select?: Prisma.WellInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WellInfo
   */
  omit?: Prisma.WellInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WellInfoInclude<ExtArgs> | null
  /**
   * Filter, which WellInfo to fetch.
   */
  where?: Prisma.WellInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WellInfos to fetch.
   */
  orderBy?: Prisma.WellInfoOrderByWithRelationInput | Prisma.WellInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WellInfos.
   */
  cursor?: Prisma.WellInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WellInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WellInfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WellInfos.
   */
  distinct?: Prisma.WellInfoScalarFieldEnum | Prisma.WellInfoScalarFieldEnum[]
}

/**
 * WellInfo findFirstOrThrow
 */
export type WellInfoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WellInfo
   */
  select?: Prisma.WellInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WellInfo
   */
  omit?: Prisma.WellInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WellInfoInclude<ExtArgs> | null
  /**
   * Filter, which WellInfo to fetch.
   */
  where?: Prisma.WellInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WellInfos to fetch.
   */
  orderBy?: Prisma.WellInfoOrderByWithRelationInput | Prisma.WellInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WellInfos.
   */
  cursor?: Prisma.WellInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WellInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WellInfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WellInfos.
   */
  distinct?: Prisma.WellInfoScalarFieldEnum | Prisma.WellInfoScalarFieldEnum[]
}

/**
 * WellInfo findMany
 */
export type WellInfoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WellInfo
   */
  select?: Prisma.WellInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WellInfo
   */
  omit?: Prisma.WellInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WellInfoInclude<ExtArgs> | null
  /**
   * Filter, which WellInfos to fetch.
   */
  where?: Prisma.WellInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WellInfos to fetch.
   */
  orderBy?: Prisma.WellInfoOrderByWithRelationInput | Prisma.WellInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing WellInfos.
   */
  cursor?: Prisma.WellInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WellInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WellInfos.
   */
  skip?: number
  distinct?: Prisma.WellInfoScalarFieldEnum | Prisma.WellInfoScalarFieldEnum[]
}

/**
 * WellInfo create
 */
export type WellInfoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WellInfo
   */
  select?: Prisma.WellInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WellInfo
   */
  omit?: Prisma.WellInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WellInfoInclude<ExtArgs> | null
  /**
   * The data needed to create a WellInfo.
   */
  data: Prisma.XOR<Prisma.WellInfoCreateInput, Prisma.WellInfoUncheckedCreateInput>
}

/**
 * WellInfo createMany
 */
export type WellInfoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many WellInfos.
   */
  data: Prisma.WellInfoCreateManyInput | Prisma.WellInfoCreateManyInput[]
}

/**
 * WellInfo createManyAndReturn
 */
export type WellInfoCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WellInfo
   */
  select?: Prisma.WellInfoSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WellInfo
   */
  omit?: Prisma.WellInfoOmit<ExtArgs> | null
  /**
   * The data used to create many WellInfos.
   */
  data: Prisma.WellInfoCreateManyInput | Prisma.WellInfoCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WellInfoIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * WellInfo update
 */
export type WellInfoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WellInfo
   */
  select?: Prisma.WellInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WellInfo
   */
  omit?: Prisma.WellInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WellInfoInclude<ExtArgs> | null
  /**
   * The data needed to update a WellInfo.
   */
  data: Prisma.XOR<Prisma.WellInfoUpdateInput, Prisma.WellInfoUncheckedUpdateInput>
  /**
   * Choose, which WellInfo to update.
   */
  where: Prisma.WellInfoWhereUniqueInput
}

/**
 * WellInfo updateMany
 */
export type WellInfoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update WellInfos.
   */
  data: Prisma.XOR<Prisma.WellInfoUpdateManyMutationInput, Prisma.WellInfoUncheckedUpdateManyInput>
  /**
   * Filter which WellInfos to update
   */
  where?: Prisma.WellInfoWhereInput
  /**
   * Limit how many WellInfos to update.
   */
  limit?: number
}

/**
 * WellInfo updateManyAndReturn
 */
export type WellInfoUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WellInfo
   */
  select?: Prisma.WellInfoSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WellInfo
   */
  omit?: Prisma.WellInfoOmit<ExtArgs> | null
  /**
   * The data used to update WellInfos.
   */
  data: Prisma.XOR<Prisma.WellInfoUpdateManyMutationInput, Prisma.WellInfoUncheckedUpdateManyInput>
  /**
   * Filter which WellInfos to update
   */
  where?: Prisma.WellInfoWhereInput
  /**
   * Limit how many WellInfos to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WellInfoIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * WellInfo upsert
 */
export type WellInfoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WellInfo
   */
  select?: Prisma.WellInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WellInfo
   */
  omit?: Prisma.WellInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WellInfoInclude<ExtArgs> | null
  /**
   * The filter to search for the WellInfo to update in case it exists.
   */
  where: Prisma.WellInfoWhereUniqueInput
  /**
   * In case the WellInfo found by the `where` argument doesn't exist, create a new WellInfo with this data.
   */
  create: Prisma.XOR<Prisma.WellInfoCreateInput, Prisma.WellInfoUncheckedCreateInput>
  /**
   * In case the WellInfo was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WellInfoUpdateInput, Prisma.WellInfoUncheckedUpdateInput>
}

/**
 * WellInfo delete
 */
export type WellInfoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WellInfo
   */
  select?: Prisma.WellInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WellInfo
   */
  omit?: Prisma.WellInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WellInfoInclude<ExtArgs> | null
  /**
   * Filter which WellInfo to delete.
   */
  where: Prisma.WellInfoWhereUniqueInput
}

/**
 * WellInfo deleteMany
 */
export type WellInfoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WellInfos to delete
   */
  where?: Prisma.WellInfoWhereInput
  /**
   * Limit how many WellInfos to delete.
   */
  limit?: number
}

/**
 * WellInfo without action
 */
export type WellInfoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WellInfo
   */
  select?: Prisma.WellInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WellInfo
   */
  omit?: Prisma.WellInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WellInfoInclude<ExtArgs> | null
}
