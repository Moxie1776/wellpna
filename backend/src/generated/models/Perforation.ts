
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Perforation` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Perforation
 * 
 */
export type PerforationModel = runtime.Types.Result.DefaultSelection<Prisma.$PerforationPayload>

export type AggregatePerforation = {
  _count: PerforationCountAggregateOutputType | null
  _avg: PerforationAvgAggregateOutputType | null
  _sum: PerforationSumAggregateOutputType | null
  _min: PerforationMinAggregateOutputType | null
  _max: PerforationMaxAggregateOutputType | null
}

export type PerforationAvgAggregateOutputType = {
  stage: number | null
  topDepth: number | null
  bottomDepth: number | null
}

export type PerforationSumAggregateOutputType = {
  stage: number | null
  topDepth: number | null
  bottomDepth: number | null
}

export type PerforationMinAggregateOutputType = {
  id: string | null
  api: string | null
  stage: number | null
  formation: string | null
  topDepth: number | null
  bottomDepth: number | null
  datePerforated: Date | null
  notes: string | null
}

export type PerforationMaxAggregateOutputType = {
  id: string | null
  api: string | null
  stage: number | null
  formation: string | null
  topDepth: number | null
  bottomDepth: number | null
  datePerforated: Date | null
  notes: string | null
}

export type PerforationCountAggregateOutputType = {
  id: number
  api: number
  stage: number
  formation: number
  topDepth: number
  bottomDepth: number
  datePerforated: number
  notes: number
  _all: number
}


export type PerforationAvgAggregateInputType = {
  stage?: true
  topDepth?: true
  bottomDepth?: true
}

export type PerforationSumAggregateInputType = {
  stage?: true
  topDepth?: true
  bottomDepth?: true
}

export type PerforationMinAggregateInputType = {
  id?: true
  api?: true
  stage?: true
  formation?: true
  topDepth?: true
  bottomDepth?: true
  datePerforated?: true
  notes?: true
}

export type PerforationMaxAggregateInputType = {
  id?: true
  api?: true
  stage?: true
  formation?: true
  topDepth?: true
  bottomDepth?: true
  datePerforated?: true
  notes?: true
}

export type PerforationCountAggregateInputType = {
  id?: true
  api?: true
  stage?: true
  formation?: true
  topDepth?: true
  bottomDepth?: true
  datePerforated?: true
  notes?: true
  _all?: true
}

export type PerforationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Perforation to aggregate.
   */
  where?: Prisma.PerforationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Perforations to fetch.
   */
  orderBy?: Prisma.PerforationOrderByWithRelationInput | Prisma.PerforationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PerforationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Perforations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Perforations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Perforations
  **/
  _count?: true | PerforationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PerforationAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PerforationSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PerforationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PerforationMaxAggregateInputType
}

export type GetPerforationAggregateType<T extends PerforationAggregateArgs> = {
      [P in keyof T & keyof AggregatePerforation]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePerforation[P]>
    : Prisma.GetScalarType<T[P], AggregatePerforation[P]>
}




export type PerforationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PerforationWhereInput
  orderBy?: Prisma.PerforationOrderByWithAggregationInput | Prisma.PerforationOrderByWithAggregationInput[]
  by: Prisma.PerforationScalarFieldEnum[] | Prisma.PerforationScalarFieldEnum
  having?: Prisma.PerforationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PerforationCountAggregateInputType | true
  _avg?: PerforationAvgAggregateInputType
  _sum?: PerforationSumAggregateInputType
  _min?: PerforationMinAggregateInputType
  _max?: PerforationMaxAggregateInputType
}

export type PerforationGroupByOutputType = {
  id: string
  api: string
  stage: number
  formation: string | null
  topDepth: number
  bottomDepth: number
  datePerforated: Date | null
  notes: string | null
  _count: PerforationCountAggregateOutputType | null
  _avg: PerforationAvgAggregateOutputType | null
  _sum: PerforationSumAggregateOutputType | null
  _min: PerforationMinAggregateOutputType | null
  _max: PerforationMaxAggregateOutputType | null
}

type GetPerforationGroupByPayload<T extends PerforationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PerforationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PerforationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PerforationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PerforationGroupByOutputType[P]>
      }
    >
  >



export type PerforationWhereInput = {
  AND?: Prisma.PerforationWhereInput | Prisma.PerforationWhereInput[]
  OR?: Prisma.PerforationWhereInput[]
  NOT?: Prisma.PerforationWhereInput | Prisma.PerforationWhereInput[]
  id?: Prisma.StringFilter<"Perforation"> | string
  api?: Prisma.StringFilter<"Perforation"> | string
  stage?: Prisma.IntFilter<"Perforation"> | number
  formation?: Prisma.StringNullableFilter<"Perforation"> | string | null
  topDepth?: Prisma.IntFilter<"Perforation"> | number
  bottomDepth?: Prisma.IntFilter<"Perforation"> | number
  datePerforated?: Prisma.DateTimeNullableFilter<"Perforation"> | Date | string | null
  notes?: Prisma.StringNullableFilter<"Perforation"> | string | null
  well?: Prisma.XOR<Prisma.WellScalarRelationFilter, Prisma.WellWhereInput>
}

export type PerforationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  stage?: Prisma.SortOrder
  formation?: Prisma.SortOrderInput | Prisma.SortOrder
  topDepth?: Prisma.SortOrder
  bottomDepth?: Prisma.SortOrder
  datePerforated?: Prisma.SortOrderInput | Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  well?: Prisma.WellOrderByWithRelationInput
}

export type PerforationWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PerforationWhereInput | Prisma.PerforationWhereInput[]
  OR?: Prisma.PerforationWhereInput[]
  NOT?: Prisma.PerforationWhereInput | Prisma.PerforationWhereInput[]
  api?: Prisma.StringFilter<"Perforation"> | string
  stage?: Prisma.IntFilter<"Perforation"> | number
  formation?: Prisma.StringNullableFilter<"Perforation"> | string | null
  topDepth?: Prisma.IntFilter<"Perforation"> | number
  bottomDepth?: Prisma.IntFilter<"Perforation"> | number
  datePerforated?: Prisma.DateTimeNullableFilter<"Perforation"> | Date | string | null
  notes?: Prisma.StringNullableFilter<"Perforation"> | string | null
  well?: Prisma.XOR<Prisma.WellScalarRelationFilter, Prisma.WellWhereInput>
}, "id">

export type PerforationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  stage?: Prisma.SortOrder
  formation?: Prisma.SortOrderInput | Prisma.SortOrder
  topDepth?: Prisma.SortOrder
  bottomDepth?: Prisma.SortOrder
  datePerforated?: Prisma.SortOrderInput | Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.PerforationCountOrderByAggregateInput
  _avg?: Prisma.PerforationAvgOrderByAggregateInput
  _max?: Prisma.PerforationMaxOrderByAggregateInput
  _min?: Prisma.PerforationMinOrderByAggregateInput
  _sum?: Prisma.PerforationSumOrderByAggregateInput
}

export type PerforationScalarWhereWithAggregatesInput = {
  AND?: Prisma.PerforationScalarWhereWithAggregatesInput | Prisma.PerforationScalarWhereWithAggregatesInput[]
  OR?: Prisma.PerforationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PerforationScalarWhereWithAggregatesInput | Prisma.PerforationScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Perforation"> | string
  api?: Prisma.StringWithAggregatesFilter<"Perforation"> | string
  stage?: Prisma.IntWithAggregatesFilter<"Perforation"> | number
  formation?: Prisma.StringNullableWithAggregatesFilter<"Perforation"> | string | null
  topDepth?: Prisma.IntWithAggregatesFilter<"Perforation"> | number
  bottomDepth?: Prisma.IntWithAggregatesFilter<"Perforation"> | number
  datePerforated?: Prisma.DateTimeNullableWithAggregatesFilter<"Perforation"> | Date | string | null
  notes?: Prisma.StringNullableWithAggregatesFilter<"Perforation"> | string | null
}

export type PerforationCreateInput = {
  id?: string
  stage: number
  formation?: string | null
  topDepth: number
  bottomDepth: number
  datePerforated?: Date | string | null
  notes?: string | null
  well: Prisma.WellCreateNestedOneWithoutPerforationsInput
}

export type PerforationUncheckedCreateInput = {
  id?: string
  api: string
  stage: number
  formation?: string | null
  topDepth: number
  bottomDepth: number
  datePerforated?: Date | string | null
  notes?: string | null
}

export type PerforationUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  stage?: Prisma.IntFieldUpdateOperationsInput | number
  formation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  topDepth?: Prisma.IntFieldUpdateOperationsInput | number
  bottomDepth?: Prisma.IntFieldUpdateOperationsInput | number
  datePerforated?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  well?: Prisma.WellUpdateOneRequiredWithoutPerforationsNestedInput
}

export type PerforationUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  api?: Prisma.StringFieldUpdateOperationsInput | string
  stage?: Prisma.IntFieldUpdateOperationsInput | number
  formation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  topDepth?: Prisma.IntFieldUpdateOperationsInput | number
  bottomDepth?: Prisma.IntFieldUpdateOperationsInput | number
  datePerforated?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type PerforationCreateManyInput = {
  id?: string
  api: string
  stage: number
  formation?: string | null
  topDepth: number
  bottomDepth: number
  datePerforated?: Date | string | null
  notes?: string | null
}

export type PerforationUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  stage?: Prisma.IntFieldUpdateOperationsInput | number
  formation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  topDepth?: Prisma.IntFieldUpdateOperationsInput | number
  bottomDepth?: Prisma.IntFieldUpdateOperationsInput | number
  datePerforated?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type PerforationUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  api?: Prisma.StringFieldUpdateOperationsInput | string
  stage?: Prisma.IntFieldUpdateOperationsInput | number
  formation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  topDepth?: Prisma.IntFieldUpdateOperationsInput | number
  bottomDepth?: Prisma.IntFieldUpdateOperationsInput | number
  datePerforated?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type PerforationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  stage?: Prisma.SortOrder
  formation?: Prisma.SortOrder
  topDepth?: Prisma.SortOrder
  bottomDepth?: Prisma.SortOrder
  datePerforated?: Prisma.SortOrder
  notes?: Prisma.SortOrder
}

export type PerforationAvgOrderByAggregateInput = {
  stage?: Prisma.SortOrder
  topDepth?: Prisma.SortOrder
  bottomDepth?: Prisma.SortOrder
}

export type PerforationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  stage?: Prisma.SortOrder
  formation?: Prisma.SortOrder
  topDepth?: Prisma.SortOrder
  bottomDepth?: Prisma.SortOrder
  datePerforated?: Prisma.SortOrder
  notes?: Prisma.SortOrder
}

export type PerforationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  api?: Prisma.SortOrder
  stage?: Prisma.SortOrder
  formation?: Prisma.SortOrder
  topDepth?: Prisma.SortOrder
  bottomDepth?: Prisma.SortOrder
  datePerforated?: Prisma.SortOrder
  notes?: Prisma.SortOrder
}

export type PerforationSumOrderByAggregateInput = {
  stage?: Prisma.SortOrder
  topDepth?: Prisma.SortOrder
  bottomDepth?: Prisma.SortOrder
}

export type PerforationListRelationFilter = {
  every?: Prisma.PerforationWhereInput
  some?: Prisma.PerforationWhereInput
  none?: Prisma.PerforationWhereInput
}

export type PerforationOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PerforationCreateNestedManyWithoutWellInput = {
  create?: Prisma.XOR<Prisma.PerforationCreateWithoutWellInput, Prisma.PerforationUncheckedCreateWithoutWellInput> | Prisma.PerforationCreateWithoutWellInput[] | Prisma.PerforationUncheckedCreateWithoutWellInput[]
  connectOrCreate?: Prisma.PerforationCreateOrConnectWithoutWellInput | Prisma.PerforationCreateOrConnectWithoutWellInput[]
  createMany?: Prisma.PerforationCreateManyWellInputEnvelope
  connect?: Prisma.PerforationWhereUniqueInput | Prisma.PerforationWhereUniqueInput[]
}

export type PerforationUncheckedCreateNestedManyWithoutWellInput = {
  create?: Prisma.XOR<Prisma.PerforationCreateWithoutWellInput, Prisma.PerforationUncheckedCreateWithoutWellInput> | Prisma.PerforationCreateWithoutWellInput[] | Prisma.PerforationUncheckedCreateWithoutWellInput[]
  connectOrCreate?: Prisma.PerforationCreateOrConnectWithoutWellInput | Prisma.PerforationCreateOrConnectWithoutWellInput[]
  createMany?: Prisma.PerforationCreateManyWellInputEnvelope
  connect?: Prisma.PerforationWhereUniqueInput | Prisma.PerforationWhereUniqueInput[]
}

export type PerforationUpdateManyWithoutWellNestedInput = {
  create?: Prisma.XOR<Prisma.PerforationCreateWithoutWellInput, Prisma.PerforationUncheckedCreateWithoutWellInput> | Prisma.PerforationCreateWithoutWellInput[] | Prisma.PerforationUncheckedCreateWithoutWellInput[]
  connectOrCreate?: Prisma.PerforationCreateOrConnectWithoutWellInput | Prisma.PerforationCreateOrConnectWithoutWellInput[]
  upsert?: Prisma.PerforationUpsertWithWhereUniqueWithoutWellInput | Prisma.PerforationUpsertWithWhereUniqueWithoutWellInput[]
  createMany?: Prisma.PerforationCreateManyWellInputEnvelope
  set?: Prisma.PerforationWhereUniqueInput | Prisma.PerforationWhereUniqueInput[]
  disconnect?: Prisma.PerforationWhereUniqueInput | Prisma.PerforationWhereUniqueInput[]
  delete?: Prisma.PerforationWhereUniqueInput | Prisma.PerforationWhereUniqueInput[]
  connect?: Prisma.PerforationWhereUniqueInput | Prisma.PerforationWhereUniqueInput[]
  update?: Prisma.PerforationUpdateWithWhereUniqueWithoutWellInput | Prisma.PerforationUpdateWithWhereUniqueWithoutWellInput[]
  updateMany?: Prisma.PerforationUpdateManyWithWhereWithoutWellInput | Prisma.PerforationUpdateManyWithWhereWithoutWellInput[]
  deleteMany?: Prisma.PerforationScalarWhereInput | Prisma.PerforationScalarWhereInput[]
}

export type PerforationUncheckedUpdateManyWithoutWellNestedInput = {
  create?: Prisma.XOR<Prisma.PerforationCreateWithoutWellInput, Prisma.PerforationUncheckedCreateWithoutWellInput> | Prisma.PerforationCreateWithoutWellInput[] | Prisma.PerforationUncheckedCreateWithoutWellInput[]
  connectOrCreate?: Prisma.PerforationCreateOrConnectWithoutWellInput | Prisma.PerforationCreateOrConnectWithoutWellInput[]
  upsert?: Prisma.PerforationUpsertWithWhereUniqueWithoutWellInput | Prisma.PerforationUpsertWithWhereUniqueWithoutWellInput[]
  createMany?: Prisma.PerforationCreateManyWellInputEnvelope
  set?: Prisma.PerforationWhereUniqueInput | Prisma.PerforationWhereUniqueInput[]
  disconnect?: Prisma.PerforationWhereUniqueInput | Prisma.PerforationWhereUniqueInput[]
  delete?: Prisma.PerforationWhereUniqueInput | Prisma.PerforationWhereUniqueInput[]
  connect?: Prisma.PerforationWhereUniqueInput | Prisma.PerforationWhereUniqueInput[]
  update?: Prisma.PerforationUpdateWithWhereUniqueWithoutWellInput | Prisma.PerforationUpdateWithWhereUniqueWithoutWellInput[]
  updateMany?: Prisma.PerforationUpdateManyWithWhereWithoutWellInput | Prisma.PerforationUpdateManyWithWhereWithoutWellInput[]
  deleteMany?: Prisma.PerforationScalarWhereInput | Prisma.PerforationScalarWhereInput[]
}

export type PerforationCreateWithoutWellInput = {
  id?: string
  stage: number
  formation?: string | null
  topDepth: number
  bottomDepth: number
  datePerforated?: Date | string | null
  notes?: string | null
}

export type PerforationUncheckedCreateWithoutWellInput = {
  id?: string
  stage: number
  formation?: string | null
  topDepth: number
  bottomDepth: number
  datePerforated?: Date | string | null
  notes?: string | null
}

export type PerforationCreateOrConnectWithoutWellInput = {
  where: Prisma.PerforationWhereUniqueInput
  create: Prisma.XOR<Prisma.PerforationCreateWithoutWellInput, Prisma.PerforationUncheckedCreateWithoutWellInput>
}

export type PerforationCreateManyWellInputEnvelope = {
  data: Prisma.PerforationCreateManyWellInput | Prisma.PerforationCreateManyWellInput[]
}

export type PerforationUpsertWithWhereUniqueWithoutWellInput = {
  where: Prisma.PerforationWhereUniqueInput
  update: Prisma.XOR<Prisma.PerforationUpdateWithoutWellInput, Prisma.PerforationUncheckedUpdateWithoutWellInput>
  create: Prisma.XOR<Prisma.PerforationCreateWithoutWellInput, Prisma.PerforationUncheckedCreateWithoutWellInput>
}

export type PerforationUpdateWithWhereUniqueWithoutWellInput = {
  where: Prisma.PerforationWhereUniqueInput
  data: Prisma.XOR<Prisma.PerforationUpdateWithoutWellInput, Prisma.PerforationUncheckedUpdateWithoutWellInput>
}

export type PerforationUpdateManyWithWhereWithoutWellInput = {
  where: Prisma.PerforationScalarWhereInput
  data: Prisma.XOR<Prisma.PerforationUpdateManyMutationInput, Prisma.PerforationUncheckedUpdateManyWithoutWellInput>
}

export type PerforationScalarWhereInput = {
  AND?: Prisma.PerforationScalarWhereInput | Prisma.PerforationScalarWhereInput[]
  OR?: Prisma.PerforationScalarWhereInput[]
  NOT?: Prisma.PerforationScalarWhereInput | Prisma.PerforationScalarWhereInput[]
  id?: Prisma.StringFilter<"Perforation"> | string
  api?: Prisma.StringFilter<"Perforation"> | string
  stage?: Prisma.IntFilter<"Perforation"> | number
  formation?: Prisma.StringNullableFilter<"Perforation"> | string | null
  topDepth?: Prisma.IntFilter<"Perforation"> | number
  bottomDepth?: Prisma.IntFilter<"Perforation"> | number
  datePerforated?: Prisma.DateTimeNullableFilter<"Perforation"> | Date | string | null
  notes?: Prisma.StringNullableFilter<"Perforation"> | string | null
}

export type PerforationCreateManyWellInput = {
  id?: string
  stage: number
  formation?: string | null
  topDepth: number
  bottomDepth: number
  datePerforated?: Date | string | null
  notes?: string | null
}

export type PerforationUpdateWithoutWellInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  stage?: Prisma.IntFieldUpdateOperationsInput | number
  formation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  topDepth?: Prisma.IntFieldUpdateOperationsInput | number
  bottomDepth?: Prisma.IntFieldUpdateOperationsInput | number
  datePerforated?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type PerforationUncheckedUpdateWithoutWellInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  stage?: Prisma.IntFieldUpdateOperationsInput | number
  formation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  topDepth?: Prisma.IntFieldUpdateOperationsInput | number
  bottomDepth?: Prisma.IntFieldUpdateOperationsInput | number
  datePerforated?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type PerforationUncheckedUpdateManyWithoutWellInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  stage?: Prisma.IntFieldUpdateOperationsInput | number
  formation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  topDepth?: Prisma.IntFieldUpdateOperationsInput | number
  bottomDepth?: Prisma.IntFieldUpdateOperationsInput | number
  datePerforated?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type PerforationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  api?: boolean
  stage?: boolean
  formation?: boolean
  topDepth?: boolean
  bottomDepth?: boolean
  datePerforated?: boolean
  notes?: boolean
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}, ExtArgs["result"]["perforation"]>

export type PerforationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  api?: boolean
  stage?: boolean
  formation?: boolean
  topDepth?: boolean
  bottomDepth?: boolean
  datePerforated?: boolean
  notes?: boolean
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}, ExtArgs["result"]["perforation"]>

export type PerforationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  api?: boolean
  stage?: boolean
  formation?: boolean
  topDepth?: boolean
  bottomDepth?: boolean
  datePerforated?: boolean
  notes?: boolean
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}, ExtArgs["result"]["perforation"]>

export type PerforationSelectScalar = {
  id?: boolean
  api?: boolean
  stage?: boolean
  formation?: boolean
  topDepth?: boolean
  bottomDepth?: boolean
  datePerforated?: boolean
  notes?: boolean
}

export type PerforationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "api" | "stage" | "formation" | "topDepth" | "bottomDepth" | "datePerforated" | "notes", ExtArgs["result"]["perforation"]>
export type PerforationInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}
export type PerforationIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}
export type PerforationIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  well?: boolean | Prisma.WellDefaultArgs<ExtArgs>
}

export type $PerforationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Perforation"
  objects: {
    well: Prisma.$WellPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    api: string
    stage: number
    formation: string | null
    topDepth: number
    bottomDepth: number
    datePerforated: Date | null
    notes: string | null
  }, ExtArgs["result"]["perforation"]>
  composites: {}
}

export type PerforationGetPayload<S extends boolean | null | undefined | PerforationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PerforationPayload, S>

export type PerforationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PerforationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PerforationCountAggregateInputType | true
  }

export interface PerforationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Perforation'], meta: { name: 'Perforation' } }
  /**
   * Find zero or one Perforation that matches the filter.
   * @param {PerforationFindUniqueArgs} args - Arguments to find a Perforation
   * @example
   * // Get one Perforation
   * const perforation = await prisma.perforation.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PerforationFindUniqueArgs>(args: Prisma.SelectSubset<T, PerforationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PerforationClient<runtime.Types.Result.GetResult<Prisma.$PerforationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Perforation that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PerforationFindUniqueOrThrowArgs} args - Arguments to find a Perforation
   * @example
   * // Get one Perforation
   * const perforation = await prisma.perforation.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PerforationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PerforationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PerforationClient<runtime.Types.Result.GetResult<Prisma.$PerforationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Perforation that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PerforationFindFirstArgs} args - Arguments to find a Perforation
   * @example
   * // Get one Perforation
   * const perforation = await prisma.perforation.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PerforationFindFirstArgs>(args?: Prisma.SelectSubset<T, PerforationFindFirstArgs<ExtArgs>>): Prisma.Prisma__PerforationClient<runtime.Types.Result.GetResult<Prisma.$PerforationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Perforation that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PerforationFindFirstOrThrowArgs} args - Arguments to find a Perforation
   * @example
   * // Get one Perforation
   * const perforation = await prisma.perforation.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PerforationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PerforationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PerforationClient<runtime.Types.Result.GetResult<Prisma.$PerforationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Perforations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PerforationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Perforations
   * const perforations = await prisma.perforation.findMany()
   * 
   * // Get first 10 Perforations
   * const perforations = await prisma.perforation.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const perforationWithIdOnly = await prisma.perforation.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PerforationFindManyArgs>(args?: Prisma.SelectSubset<T, PerforationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PerforationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Perforation.
   * @param {PerforationCreateArgs} args - Arguments to create a Perforation.
   * @example
   * // Create one Perforation
   * const Perforation = await prisma.perforation.create({
   *   data: {
   *     // ... data to create a Perforation
   *   }
   * })
   * 
   */
  create<T extends PerforationCreateArgs>(args: Prisma.SelectSubset<T, PerforationCreateArgs<ExtArgs>>): Prisma.Prisma__PerforationClient<runtime.Types.Result.GetResult<Prisma.$PerforationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Perforations.
   * @param {PerforationCreateManyArgs} args - Arguments to create many Perforations.
   * @example
   * // Create many Perforations
   * const perforation = await prisma.perforation.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PerforationCreateManyArgs>(args?: Prisma.SelectSubset<T, PerforationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Perforations and returns the data saved in the database.
   * @param {PerforationCreateManyAndReturnArgs} args - Arguments to create many Perforations.
   * @example
   * // Create many Perforations
   * const perforation = await prisma.perforation.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Perforations and only return the `id`
   * const perforationWithIdOnly = await prisma.perforation.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PerforationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PerforationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PerforationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Perforation.
   * @param {PerforationDeleteArgs} args - Arguments to delete one Perforation.
   * @example
   * // Delete one Perforation
   * const Perforation = await prisma.perforation.delete({
   *   where: {
   *     // ... filter to delete one Perforation
   *   }
   * })
   * 
   */
  delete<T extends PerforationDeleteArgs>(args: Prisma.SelectSubset<T, PerforationDeleteArgs<ExtArgs>>): Prisma.Prisma__PerforationClient<runtime.Types.Result.GetResult<Prisma.$PerforationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Perforation.
   * @param {PerforationUpdateArgs} args - Arguments to update one Perforation.
   * @example
   * // Update one Perforation
   * const perforation = await prisma.perforation.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PerforationUpdateArgs>(args: Prisma.SelectSubset<T, PerforationUpdateArgs<ExtArgs>>): Prisma.Prisma__PerforationClient<runtime.Types.Result.GetResult<Prisma.$PerforationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Perforations.
   * @param {PerforationDeleteManyArgs} args - Arguments to filter Perforations to delete.
   * @example
   * // Delete a few Perforations
   * const { count } = await prisma.perforation.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PerforationDeleteManyArgs>(args?: Prisma.SelectSubset<T, PerforationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Perforations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PerforationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Perforations
   * const perforation = await prisma.perforation.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PerforationUpdateManyArgs>(args: Prisma.SelectSubset<T, PerforationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Perforations and returns the data updated in the database.
   * @param {PerforationUpdateManyAndReturnArgs} args - Arguments to update many Perforations.
   * @example
   * // Update many Perforations
   * const perforation = await prisma.perforation.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Perforations and only return the `id`
   * const perforationWithIdOnly = await prisma.perforation.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PerforationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PerforationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PerforationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Perforation.
   * @param {PerforationUpsertArgs} args - Arguments to update or create a Perforation.
   * @example
   * // Update or create a Perforation
   * const perforation = await prisma.perforation.upsert({
   *   create: {
   *     // ... data to create a Perforation
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Perforation we want to update
   *   }
   * })
   */
  upsert<T extends PerforationUpsertArgs>(args: Prisma.SelectSubset<T, PerforationUpsertArgs<ExtArgs>>): Prisma.Prisma__PerforationClient<runtime.Types.Result.GetResult<Prisma.$PerforationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Perforations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PerforationCountArgs} args - Arguments to filter Perforations to count.
   * @example
   * // Count the number of Perforations
   * const count = await prisma.perforation.count({
   *   where: {
   *     // ... the filter for the Perforations we want to count
   *   }
   * })
  **/
  count<T extends PerforationCountArgs>(
    args?: Prisma.Subset<T, PerforationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PerforationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Perforation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PerforationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PerforationAggregateArgs>(args: Prisma.Subset<T, PerforationAggregateArgs>): Prisma.PrismaPromise<GetPerforationAggregateType<T>>

  /**
   * Group by Perforation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PerforationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PerforationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PerforationGroupByArgs['orderBy'] }
      : { orderBy?: PerforationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PerforationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPerforationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Perforation model
 */
readonly fields: PerforationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Perforation.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PerforationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  well<T extends Prisma.WellDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WellDefaultArgs<ExtArgs>>): Prisma.Prisma__WellClient<runtime.Types.Result.GetResult<Prisma.$WellPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Perforation model
 */
export interface PerforationFieldRefs {
  readonly id: Prisma.FieldRef<"Perforation", 'String'>
  readonly api: Prisma.FieldRef<"Perforation", 'String'>
  readonly stage: Prisma.FieldRef<"Perforation", 'Int'>
  readonly formation: Prisma.FieldRef<"Perforation", 'String'>
  readonly topDepth: Prisma.FieldRef<"Perforation", 'Int'>
  readonly bottomDepth: Prisma.FieldRef<"Perforation", 'Int'>
  readonly datePerforated: Prisma.FieldRef<"Perforation", 'DateTime'>
  readonly notes: Prisma.FieldRef<"Perforation", 'String'>
}
    

// Custom InputTypes
/**
 * Perforation findUnique
 */
export type PerforationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Perforation
   */
  select?: Prisma.PerforationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Perforation
   */
  omit?: Prisma.PerforationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PerforationInclude<ExtArgs> | null
  /**
   * Filter, which Perforation to fetch.
   */
  where: Prisma.PerforationWhereUniqueInput
}

/**
 * Perforation findUniqueOrThrow
 */
export type PerforationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Perforation
   */
  select?: Prisma.PerforationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Perforation
   */
  omit?: Prisma.PerforationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PerforationInclude<ExtArgs> | null
  /**
   * Filter, which Perforation to fetch.
   */
  where: Prisma.PerforationWhereUniqueInput
}

/**
 * Perforation findFirst
 */
export type PerforationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Perforation
   */
  select?: Prisma.PerforationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Perforation
   */
  omit?: Prisma.PerforationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PerforationInclude<ExtArgs> | null
  /**
   * Filter, which Perforation to fetch.
   */
  where?: Prisma.PerforationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Perforations to fetch.
   */
  orderBy?: Prisma.PerforationOrderByWithRelationInput | Prisma.PerforationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Perforations.
   */
  cursor?: Prisma.PerforationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Perforations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Perforations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Perforations.
   */
  distinct?: Prisma.PerforationScalarFieldEnum | Prisma.PerforationScalarFieldEnum[]
}

/**
 * Perforation findFirstOrThrow
 */
export type PerforationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Perforation
   */
  select?: Prisma.PerforationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Perforation
   */
  omit?: Prisma.PerforationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PerforationInclude<ExtArgs> | null
  /**
   * Filter, which Perforation to fetch.
   */
  where?: Prisma.PerforationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Perforations to fetch.
   */
  orderBy?: Prisma.PerforationOrderByWithRelationInput | Prisma.PerforationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Perforations.
   */
  cursor?: Prisma.PerforationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Perforations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Perforations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Perforations.
   */
  distinct?: Prisma.PerforationScalarFieldEnum | Prisma.PerforationScalarFieldEnum[]
}

/**
 * Perforation findMany
 */
export type PerforationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Perforation
   */
  select?: Prisma.PerforationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Perforation
   */
  omit?: Prisma.PerforationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PerforationInclude<ExtArgs> | null
  /**
   * Filter, which Perforations to fetch.
   */
  where?: Prisma.PerforationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Perforations to fetch.
   */
  orderBy?: Prisma.PerforationOrderByWithRelationInput | Prisma.PerforationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Perforations.
   */
  cursor?: Prisma.PerforationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Perforations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Perforations.
   */
  skip?: number
  distinct?: Prisma.PerforationScalarFieldEnum | Prisma.PerforationScalarFieldEnum[]
}

/**
 * Perforation create
 */
export type PerforationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Perforation
   */
  select?: Prisma.PerforationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Perforation
   */
  omit?: Prisma.PerforationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PerforationInclude<ExtArgs> | null
  /**
   * The data needed to create a Perforation.
   */
  data: Prisma.XOR<Prisma.PerforationCreateInput, Prisma.PerforationUncheckedCreateInput>
}

/**
 * Perforation createMany
 */
export type PerforationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Perforations.
   */
  data: Prisma.PerforationCreateManyInput | Prisma.PerforationCreateManyInput[]
}

/**
 * Perforation createManyAndReturn
 */
export type PerforationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Perforation
   */
  select?: Prisma.PerforationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Perforation
   */
  omit?: Prisma.PerforationOmit<ExtArgs> | null
  /**
   * The data used to create many Perforations.
   */
  data: Prisma.PerforationCreateManyInput | Prisma.PerforationCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PerforationIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Perforation update
 */
export type PerforationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Perforation
   */
  select?: Prisma.PerforationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Perforation
   */
  omit?: Prisma.PerforationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PerforationInclude<ExtArgs> | null
  /**
   * The data needed to update a Perforation.
   */
  data: Prisma.XOR<Prisma.PerforationUpdateInput, Prisma.PerforationUncheckedUpdateInput>
  /**
   * Choose, which Perforation to update.
   */
  where: Prisma.PerforationWhereUniqueInput
}

/**
 * Perforation updateMany
 */
export type PerforationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Perforations.
   */
  data: Prisma.XOR<Prisma.PerforationUpdateManyMutationInput, Prisma.PerforationUncheckedUpdateManyInput>
  /**
   * Filter which Perforations to update
   */
  where?: Prisma.PerforationWhereInput
  /**
   * Limit how many Perforations to update.
   */
  limit?: number
}

/**
 * Perforation updateManyAndReturn
 */
export type PerforationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Perforation
   */
  select?: Prisma.PerforationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Perforation
   */
  omit?: Prisma.PerforationOmit<ExtArgs> | null
  /**
   * The data used to update Perforations.
   */
  data: Prisma.XOR<Prisma.PerforationUpdateManyMutationInput, Prisma.PerforationUncheckedUpdateManyInput>
  /**
   * Filter which Perforations to update
   */
  where?: Prisma.PerforationWhereInput
  /**
   * Limit how many Perforations to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PerforationIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Perforation upsert
 */
export type PerforationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Perforation
   */
  select?: Prisma.PerforationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Perforation
   */
  omit?: Prisma.PerforationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PerforationInclude<ExtArgs> | null
  /**
   * The filter to search for the Perforation to update in case it exists.
   */
  where: Prisma.PerforationWhereUniqueInput
  /**
   * In case the Perforation found by the `where` argument doesn't exist, create a new Perforation with this data.
   */
  create: Prisma.XOR<Prisma.PerforationCreateInput, Prisma.PerforationUncheckedCreateInput>
  /**
   * In case the Perforation was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PerforationUpdateInput, Prisma.PerforationUncheckedUpdateInput>
}

/**
 * Perforation delete
 */
export type PerforationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Perforation
   */
  select?: Prisma.PerforationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Perforation
   */
  omit?: Prisma.PerforationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PerforationInclude<ExtArgs> | null
  /**
   * Filter which Perforation to delete.
   */
  where: Prisma.PerforationWhereUniqueInput
}

/**
 * Perforation deleteMany
 */
export type PerforationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Perforations to delete
   */
  where?: Prisma.PerforationWhereInput
  /**
   * Limit how many Perforations to delete.
   */
  limit?: number
}

/**
 * Perforation without action
 */
export type PerforationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Perforation
   */
  select?: Prisma.PerforationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Perforation
   */
  omit?: Prisma.PerforationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PerforationInclude<ExtArgs> | null
}
