
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `OperatorContact` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model OperatorContact
 * 
 */
export type OperatorContactModel = runtime.Types.Result.DefaultSelection<Prisma.$OperatorContactPayload>

export type AggregateOperatorContact = {
  _count: OperatorContactCountAggregateOutputType | null
  _min: OperatorContactMinAggregateOutputType | null
  _max: OperatorContactMaxAggregateOutputType | null
}

export type OperatorContactMinAggregateOutputType = {
  id: string | null
  operatorId: string | null
  name: string | null
  phoneNumber: string | null
  email: string | null
}

export type OperatorContactMaxAggregateOutputType = {
  id: string | null
  operatorId: string | null
  name: string | null
  phoneNumber: string | null
  email: string | null
}

export type OperatorContactCountAggregateOutputType = {
  id: number
  operatorId: number
  name: number
  phoneNumber: number
  email: number
  _all: number
}


export type OperatorContactMinAggregateInputType = {
  id?: true
  operatorId?: true
  name?: true
  phoneNumber?: true
  email?: true
}

export type OperatorContactMaxAggregateInputType = {
  id?: true
  operatorId?: true
  name?: true
  phoneNumber?: true
  email?: true
}

export type OperatorContactCountAggregateInputType = {
  id?: true
  operatorId?: true
  name?: true
  phoneNumber?: true
  email?: true
  _all?: true
}

export type OperatorContactAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which OperatorContact to aggregate.
   */
  where?: Prisma.OperatorContactWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OperatorContacts to fetch.
   */
  orderBy?: Prisma.OperatorContactOrderByWithRelationInput | Prisma.OperatorContactOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.OperatorContactWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OperatorContacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OperatorContacts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned OperatorContacts
  **/
  _count?: true | OperatorContactCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: OperatorContactMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: OperatorContactMaxAggregateInputType
}

export type GetOperatorContactAggregateType<T extends OperatorContactAggregateArgs> = {
      [P in keyof T & keyof AggregateOperatorContact]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOperatorContact[P]>
    : Prisma.GetScalarType<T[P], AggregateOperatorContact[P]>
}




export type OperatorContactGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OperatorContactWhereInput
  orderBy?: Prisma.OperatorContactOrderByWithAggregationInput | Prisma.OperatorContactOrderByWithAggregationInput[]
  by: Prisma.OperatorContactScalarFieldEnum[] | Prisma.OperatorContactScalarFieldEnum
  having?: Prisma.OperatorContactScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: OperatorContactCountAggregateInputType | true
  _min?: OperatorContactMinAggregateInputType
  _max?: OperatorContactMaxAggregateInputType
}

export type OperatorContactGroupByOutputType = {
  id: string
  operatorId: string
  name: string
  phoneNumber: string
  email: string
  _count: OperatorContactCountAggregateOutputType | null
  _min: OperatorContactMinAggregateOutputType | null
  _max: OperatorContactMaxAggregateOutputType | null
}

type GetOperatorContactGroupByPayload<T extends OperatorContactGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<OperatorContactGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof OperatorContactGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], OperatorContactGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], OperatorContactGroupByOutputType[P]>
      }
    >
  >



export type OperatorContactWhereInput = {
  AND?: Prisma.OperatorContactWhereInput | Prisma.OperatorContactWhereInput[]
  OR?: Prisma.OperatorContactWhereInput[]
  NOT?: Prisma.OperatorContactWhereInput | Prisma.OperatorContactWhereInput[]
  id?: Prisma.StringFilter<"OperatorContact"> | string
  operatorId?: Prisma.StringFilter<"OperatorContact"> | string
  name?: Prisma.StringFilter<"OperatorContact"> | string
  phoneNumber?: Prisma.StringFilter<"OperatorContact"> | string
  email?: Prisma.StringFilter<"OperatorContact"> | string
  operator?: Prisma.XOR<Prisma.OperatorScalarRelationFilter, Prisma.OperatorWhereInput>
}

export type OperatorContactOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  email?: Prisma.SortOrder
  operator?: Prisma.OperatorOrderByWithRelationInput
}

export type OperatorContactWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.OperatorContactWhereInput | Prisma.OperatorContactWhereInput[]
  OR?: Prisma.OperatorContactWhereInput[]
  NOT?: Prisma.OperatorContactWhereInput | Prisma.OperatorContactWhereInput[]
  operatorId?: Prisma.StringFilter<"OperatorContact"> | string
  name?: Prisma.StringFilter<"OperatorContact"> | string
  phoneNumber?: Prisma.StringFilter<"OperatorContact"> | string
  email?: Prisma.StringFilter<"OperatorContact"> | string
  operator?: Prisma.XOR<Prisma.OperatorScalarRelationFilter, Prisma.OperatorWhereInput>
}, "id">

export type OperatorContactOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  email?: Prisma.SortOrder
  _count?: Prisma.OperatorContactCountOrderByAggregateInput
  _max?: Prisma.OperatorContactMaxOrderByAggregateInput
  _min?: Prisma.OperatorContactMinOrderByAggregateInput
}

export type OperatorContactScalarWhereWithAggregatesInput = {
  AND?: Prisma.OperatorContactScalarWhereWithAggregatesInput | Prisma.OperatorContactScalarWhereWithAggregatesInput[]
  OR?: Prisma.OperatorContactScalarWhereWithAggregatesInput[]
  NOT?: Prisma.OperatorContactScalarWhereWithAggregatesInput | Prisma.OperatorContactScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"OperatorContact"> | string
  operatorId?: Prisma.StringWithAggregatesFilter<"OperatorContact"> | string
  name?: Prisma.StringWithAggregatesFilter<"OperatorContact"> | string
  phoneNumber?: Prisma.StringWithAggregatesFilter<"OperatorContact"> | string
  email?: Prisma.StringWithAggregatesFilter<"OperatorContact"> | string
}

export type OperatorContactCreateInput = {
  id?: string
  name: string
  phoneNumber: string
  email: string
  operator: Prisma.OperatorCreateNestedOneWithoutOperatorContactInput
}

export type OperatorContactUncheckedCreateInput = {
  id?: string
  operatorId: string
  name: string
  phoneNumber: string
  email: string
}

export type OperatorContactUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  operator?: Prisma.OperatorUpdateOneRequiredWithoutOperatorContactNestedInput
}

export type OperatorContactUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  operatorId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OperatorContactCreateManyInput = {
  id?: string
  operatorId: string
  name: string
  phoneNumber: string
  email: string
}

export type OperatorContactUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OperatorContactUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  operatorId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OperatorContactListRelationFilter = {
  every?: Prisma.OperatorContactWhereInput
  some?: Prisma.OperatorContactWhereInput
  none?: Prisma.OperatorContactWhereInput
}

export type OperatorContactOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type OperatorContactCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  email?: Prisma.SortOrder
}

export type OperatorContactMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  email?: Prisma.SortOrder
}

export type OperatorContactMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  email?: Prisma.SortOrder
}

export type OperatorContactCreateNestedManyWithoutOperatorInput = {
  create?: Prisma.XOR<Prisma.OperatorContactCreateWithoutOperatorInput, Prisma.OperatorContactUncheckedCreateWithoutOperatorInput> | Prisma.OperatorContactCreateWithoutOperatorInput[] | Prisma.OperatorContactUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.OperatorContactCreateOrConnectWithoutOperatorInput | Prisma.OperatorContactCreateOrConnectWithoutOperatorInput[]
  createMany?: Prisma.OperatorContactCreateManyOperatorInputEnvelope
  connect?: Prisma.OperatorContactWhereUniqueInput | Prisma.OperatorContactWhereUniqueInput[]
}

export type OperatorContactUncheckedCreateNestedManyWithoutOperatorInput = {
  create?: Prisma.XOR<Prisma.OperatorContactCreateWithoutOperatorInput, Prisma.OperatorContactUncheckedCreateWithoutOperatorInput> | Prisma.OperatorContactCreateWithoutOperatorInput[] | Prisma.OperatorContactUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.OperatorContactCreateOrConnectWithoutOperatorInput | Prisma.OperatorContactCreateOrConnectWithoutOperatorInput[]
  createMany?: Prisma.OperatorContactCreateManyOperatorInputEnvelope
  connect?: Prisma.OperatorContactWhereUniqueInput | Prisma.OperatorContactWhereUniqueInput[]
}

export type OperatorContactUpdateManyWithoutOperatorNestedInput = {
  create?: Prisma.XOR<Prisma.OperatorContactCreateWithoutOperatorInput, Prisma.OperatorContactUncheckedCreateWithoutOperatorInput> | Prisma.OperatorContactCreateWithoutOperatorInput[] | Prisma.OperatorContactUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.OperatorContactCreateOrConnectWithoutOperatorInput | Prisma.OperatorContactCreateOrConnectWithoutOperatorInput[]
  upsert?: Prisma.OperatorContactUpsertWithWhereUniqueWithoutOperatorInput | Prisma.OperatorContactUpsertWithWhereUniqueWithoutOperatorInput[]
  createMany?: Prisma.OperatorContactCreateManyOperatorInputEnvelope
  set?: Prisma.OperatorContactWhereUniqueInput | Prisma.OperatorContactWhereUniqueInput[]
  disconnect?: Prisma.OperatorContactWhereUniqueInput | Prisma.OperatorContactWhereUniqueInput[]
  delete?: Prisma.OperatorContactWhereUniqueInput | Prisma.OperatorContactWhereUniqueInput[]
  connect?: Prisma.OperatorContactWhereUniqueInput | Prisma.OperatorContactWhereUniqueInput[]
  update?: Prisma.OperatorContactUpdateWithWhereUniqueWithoutOperatorInput | Prisma.OperatorContactUpdateWithWhereUniqueWithoutOperatorInput[]
  updateMany?: Prisma.OperatorContactUpdateManyWithWhereWithoutOperatorInput | Prisma.OperatorContactUpdateManyWithWhereWithoutOperatorInput[]
  deleteMany?: Prisma.OperatorContactScalarWhereInput | Prisma.OperatorContactScalarWhereInput[]
}

export type OperatorContactUncheckedUpdateManyWithoutOperatorNestedInput = {
  create?: Prisma.XOR<Prisma.OperatorContactCreateWithoutOperatorInput, Prisma.OperatorContactUncheckedCreateWithoutOperatorInput> | Prisma.OperatorContactCreateWithoutOperatorInput[] | Prisma.OperatorContactUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.OperatorContactCreateOrConnectWithoutOperatorInput | Prisma.OperatorContactCreateOrConnectWithoutOperatorInput[]
  upsert?: Prisma.OperatorContactUpsertWithWhereUniqueWithoutOperatorInput | Prisma.OperatorContactUpsertWithWhereUniqueWithoutOperatorInput[]
  createMany?: Prisma.OperatorContactCreateManyOperatorInputEnvelope
  set?: Prisma.OperatorContactWhereUniqueInput | Prisma.OperatorContactWhereUniqueInput[]
  disconnect?: Prisma.OperatorContactWhereUniqueInput | Prisma.OperatorContactWhereUniqueInput[]
  delete?: Prisma.OperatorContactWhereUniqueInput | Prisma.OperatorContactWhereUniqueInput[]
  connect?: Prisma.OperatorContactWhereUniqueInput | Prisma.OperatorContactWhereUniqueInput[]
  update?: Prisma.OperatorContactUpdateWithWhereUniqueWithoutOperatorInput | Prisma.OperatorContactUpdateWithWhereUniqueWithoutOperatorInput[]
  updateMany?: Prisma.OperatorContactUpdateManyWithWhereWithoutOperatorInput | Prisma.OperatorContactUpdateManyWithWhereWithoutOperatorInput[]
  deleteMany?: Prisma.OperatorContactScalarWhereInput | Prisma.OperatorContactScalarWhereInput[]
}

export type OperatorContactCreateWithoutOperatorInput = {
  id?: string
  name: string
  phoneNumber: string
  email: string
}

export type OperatorContactUncheckedCreateWithoutOperatorInput = {
  id?: string
  name: string
  phoneNumber: string
  email: string
}

export type OperatorContactCreateOrConnectWithoutOperatorInput = {
  where: Prisma.OperatorContactWhereUniqueInput
  create: Prisma.XOR<Prisma.OperatorContactCreateWithoutOperatorInput, Prisma.OperatorContactUncheckedCreateWithoutOperatorInput>
}

export type OperatorContactCreateManyOperatorInputEnvelope = {
  data: Prisma.OperatorContactCreateManyOperatorInput | Prisma.OperatorContactCreateManyOperatorInput[]
}

export type OperatorContactUpsertWithWhereUniqueWithoutOperatorInput = {
  where: Prisma.OperatorContactWhereUniqueInput
  update: Prisma.XOR<Prisma.OperatorContactUpdateWithoutOperatorInput, Prisma.OperatorContactUncheckedUpdateWithoutOperatorInput>
  create: Prisma.XOR<Prisma.OperatorContactCreateWithoutOperatorInput, Prisma.OperatorContactUncheckedCreateWithoutOperatorInput>
}

export type OperatorContactUpdateWithWhereUniqueWithoutOperatorInput = {
  where: Prisma.OperatorContactWhereUniqueInput
  data: Prisma.XOR<Prisma.OperatorContactUpdateWithoutOperatorInput, Prisma.OperatorContactUncheckedUpdateWithoutOperatorInput>
}

export type OperatorContactUpdateManyWithWhereWithoutOperatorInput = {
  where: Prisma.OperatorContactScalarWhereInput
  data: Prisma.XOR<Prisma.OperatorContactUpdateManyMutationInput, Prisma.OperatorContactUncheckedUpdateManyWithoutOperatorInput>
}

export type OperatorContactScalarWhereInput = {
  AND?: Prisma.OperatorContactScalarWhereInput | Prisma.OperatorContactScalarWhereInput[]
  OR?: Prisma.OperatorContactScalarWhereInput[]
  NOT?: Prisma.OperatorContactScalarWhereInput | Prisma.OperatorContactScalarWhereInput[]
  id?: Prisma.StringFilter<"OperatorContact"> | string
  operatorId?: Prisma.StringFilter<"OperatorContact"> | string
  name?: Prisma.StringFilter<"OperatorContact"> | string
  phoneNumber?: Prisma.StringFilter<"OperatorContact"> | string
  email?: Prisma.StringFilter<"OperatorContact"> | string
}

export type OperatorContactCreateManyOperatorInput = {
  id?: string
  name: string
  phoneNumber: string
  email: string
}

export type OperatorContactUpdateWithoutOperatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OperatorContactUncheckedUpdateWithoutOperatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OperatorContactUncheckedUpdateManyWithoutOperatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
}



export type OperatorContactSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  operatorId?: boolean
  name?: boolean
  phoneNumber?: boolean
  email?: boolean
  operator?: boolean | Prisma.OperatorDefaultArgs<ExtArgs>
}, ExtArgs["result"]["operatorContact"]>

export type OperatorContactSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  operatorId?: boolean
  name?: boolean
  phoneNumber?: boolean
  email?: boolean
  operator?: boolean | Prisma.OperatorDefaultArgs<ExtArgs>
}, ExtArgs["result"]["operatorContact"]>

export type OperatorContactSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  operatorId?: boolean
  name?: boolean
  phoneNumber?: boolean
  email?: boolean
  operator?: boolean | Prisma.OperatorDefaultArgs<ExtArgs>
}, ExtArgs["result"]["operatorContact"]>

export type OperatorContactSelectScalar = {
  id?: boolean
  operatorId?: boolean
  name?: boolean
  phoneNumber?: boolean
  email?: boolean
}

export type OperatorContactOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "operatorId" | "name" | "phoneNumber" | "email", ExtArgs["result"]["operatorContact"]>
export type OperatorContactInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  operator?: boolean | Prisma.OperatorDefaultArgs<ExtArgs>
}
export type OperatorContactIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  operator?: boolean | Prisma.OperatorDefaultArgs<ExtArgs>
}
export type OperatorContactIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  operator?: boolean | Prisma.OperatorDefaultArgs<ExtArgs>
}

export type $OperatorContactPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "OperatorContact"
  objects: {
    operator: Prisma.$OperatorPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    operatorId: string
    name: string
    phoneNumber: string
    email: string
  }, ExtArgs["result"]["operatorContact"]>
  composites: {}
}

export type OperatorContactGetPayload<S extends boolean | null | undefined | OperatorContactDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$OperatorContactPayload, S>

export type OperatorContactCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<OperatorContactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: OperatorContactCountAggregateInputType | true
  }

export interface OperatorContactDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OperatorContact'], meta: { name: 'OperatorContact' } }
  /**
   * Find zero or one OperatorContact that matches the filter.
   * @param {OperatorContactFindUniqueArgs} args - Arguments to find a OperatorContact
   * @example
   * // Get one OperatorContact
   * const operatorContact = await prisma.operatorContact.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OperatorContactFindUniqueArgs>(args: Prisma.SelectSubset<T, OperatorContactFindUniqueArgs<ExtArgs>>): Prisma.Prisma__OperatorContactClient<runtime.Types.Result.GetResult<Prisma.$OperatorContactPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one OperatorContact that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OperatorContactFindUniqueOrThrowArgs} args - Arguments to find a OperatorContact
   * @example
   * // Get one OperatorContact
   * const operatorContact = await prisma.operatorContact.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OperatorContactFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, OperatorContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__OperatorContactClient<runtime.Types.Result.GetResult<Prisma.$OperatorContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first OperatorContact that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OperatorContactFindFirstArgs} args - Arguments to find a OperatorContact
   * @example
   * // Get one OperatorContact
   * const operatorContact = await prisma.operatorContact.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OperatorContactFindFirstArgs>(args?: Prisma.SelectSubset<T, OperatorContactFindFirstArgs<ExtArgs>>): Prisma.Prisma__OperatorContactClient<runtime.Types.Result.GetResult<Prisma.$OperatorContactPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first OperatorContact that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OperatorContactFindFirstOrThrowArgs} args - Arguments to find a OperatorContact
   * @example
   * // Get one OperatorContact
   * const operatorContact = await prisma.operatorContact.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OperatorContactFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, OperatorContactFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__OperatorContactClient<runtime.Types.Result.GetResult<Prisma.$OperatorContactPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more OperatorContacts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OperatorContactFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all OperatorContacts
   * const operatorContacts = await prisma.operatorContact.findMany()
   * 
   * // Get first 10 OperatorContacts
   * const operatorContacts = await prisma.operatorContact.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const operatorContactWithIdOnly = await prisma.operatorContact.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends OperatorContactFindManyArgs>(args?: Prisma.SelectSubset<T, OperatorContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OperatorContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a OperatorContact.
   * @param {OperatorContactCreateArgs} args - Arguments to create a OperatorContact.
   * @example
   * // Create one OperatorContact
   * const OperatorContact = await prisma.operatorContact.create({
   *   data: {
   *     // ... data to create a OperatorContact
   *   }
   * })
   * 
   */
  create<T extends OperatorContactCreateArgs>(args: Prisma.SelectSubset<T, OperatorContactCreateArgs<ExtArgs>>): Prisma.Prisma__OperatorContactClient<runtime.Types.Result.GetResult<Prisma.$OperatorContactPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many OperatorContacts.
   * @param {OperatorContactCreateManyArgs} args - Arguments to create many OperatorContacts.
   * @example
   * // Create many OperatorContacts
   * const operatorContact = await prisma.operatorContact.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends OperatorContactCreateManyArgs>(args?: Prisma.SelectSubset<T, OperatorContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many OperatorContacts and returns the data saved in the database.
   * @param {OperatorContactCreateManyAndReturnArgs} args - Arguments to create many OperatorContacts.
   * @example
   * // Create many OperatorContacts
   * const operatorContact = await prisma.operatorContact.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many OperatorContacts and only return the `id`
   * const operatorContactWithIdOnly = await prisma.operatorContact.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends OperatorContactCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, OperatorContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OperatorContactPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a OperatorContact.
   * @param {OperatorContactDeleteArgs} args - Arguments to delete one OperatorContact.
   * @example
   * // Delete one OperatorContact
   * const OperatorContact = await prisma.operatorContact.delete({
   *   where: {
   *     // ... filter to delete one OperatorContact
   *   }
   * })
   * 
   */
  delete<T extends OperatorContactDeleteArgs>(args: Prisma.SelectSubset<T, OperatorContactDeleteArgs<ExtArgs>>): Prisma.Prisma__OperatorContactClient<runtime.Types.Result.GetResult<Prisma.$OperatorContactPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one OperatorContact.
   * @param {OperatorContactUpdateArgs} args - Arguments to update one OperatorContact.
   * @example
   * // Update one OperatorContact
   * const operatorContact = await prisma.operatorContact.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends OperatorContactUpdateArgs>(args: Prisma.SelectSubset<T, OperatorContactUpdateArgs<ExtArgs>>): Prisma.Prisma__OperatorContactClient<runtime.Types.Result.GetResult<Prisma.$OperatorContactPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more OperatorContacts.
   * @param {OperatorContactDeleteManyArgs} args - Arguments to filter OperatorContacts to delete.
   * @example
   * // Delete a few OperatorContacts
   * const { count } = await prisma.operatorContact.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends OperatorContactDeleteManyArgs>(args?: Prisma.SelectSubset<T, OperatorContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more OperatorContacts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OperatorContactUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many OperatorContacts
   * const operatorContact = await prisma.operatorContact.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends OperatorContactUpdateManyArgs>(args: Prisma.SelectSubset<T, OperatorContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more OperatorContacts and returns the data updated in the database.
   * @param {OperatorContactUpdateManyAndReturnArgs} args - Arguments to update many OperatorContacts.
   * @example
   * // Update many OperatorContacts
   * const operatorContact = await prisma.operatorContact.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more OperatorContacts and only return the `id`
   * const operatorContactWithIdOnly = await prisma.operatorContact.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends OperatorContactUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, OperatorContactUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OperatorContactPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one OperatorContact.
   * @param {OperatorContactUpsertArgs} args - Arguments to update or create a OperatorContact.
   * @example
   * // Update or create a OperatorContact
   * const operatorContact = await prisma.operatorContact.upsert({
   *   create: {
   *     // ... data to create a OperatorContact
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the OperatorContact we want to update
   *   }
   * })
   */
  upsert<T extends OperatorContactUpsertArgs>(args: Prisma.SelectSubset<T, OperatorContactUpsertArgs<ExtArgs>>): Prisma.Prisma__OperatorContactClient<runtime.Types.Result.GetResult<Prisma.$OperatorContactPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of OperatorContacts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OperatorContactCountArgs} args - Arguments to filter OperatorContacts to count.
   * @example
   * // Count the number of OperatorContacts
   * const count = await prisma.operatorContact.count({
   *   where: {
   *     // ... the filter for the OperatorContacts we want to count
   *   }
   * })
  **/
  count<T extends OperatorContactCountArgs>(
    args?: Prisma.Subset<T, OperatorContactCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], OperatorContactCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a OperatorContact.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OperatorContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends OperatorContactAggregateArgs>(args: Prisma.Subset<T, OperatorContactAggregateArgs>): Prisma.PrismaPromise<GetOperatorContactAggregateType<T>>

  /**
   * Group by OperatorContact.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OperatorContactGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends OperatorContactGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OperatorContactGroupByArgs['orderBy'] }
      : { orderBy?: OperatorContactGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, OperatorContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOperatorContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the OperatorContact model
 */
readonly fields: OperatorContactFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for OperatorContact.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OperatorContactClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  operator<T extends Prisma.OperatorDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OperatorDefaultArgs<ExtArgs>>): Prisma.Prisma__OperatorClient<runtime.Types.Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the OperatorContact model
 */
export interface OperatorContactFieldRefs {
  readonly id: Prisma.FieldRef<"OperatorContact", 'String'>
  readonly operatorId: Prisma.FieldRef<"OperatorContact", 'String'>
  readonly name: Prisma.FieldRef<"OperatorContact", 'String'>
  readonly phoneNumber: Prisma.FieldRef<"OperatorContact", 'String'>
  readonly email: Prisma.FieldRef<"OperatorContact", 'String'>
}
    

// Custom InputTypes
/**
 * OperatorContact findUnique
 */
export type OperatorContactFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperatorContact
   */
  select?: Prisma.OperatorContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OperatorContact
   */
  omit?: Prisma.OperatorContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperatorContactInclude<ExtArgs> | null
  /**
   * Filter, which OperatorContact to fetch.
   */
  where: Prisma.OperatorContactWhereUniqueInput
}

/**
 * OperatorContact findUniqueOrThrow
 */
export type OperatorContactFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperatorContact
   */
  select?: Prisma.OperatorContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OperatorContact
   */
  omit?: Prisma.OperatorContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperatorContactInclude<ExtArgs> | null
  /**
   * Filter, which OperatorContact to fetch.
   */
  where: Prisma.OperatorContactWhereUniqueInput
}

/**
 * OperatorContact findFirst
 */
export type OperatorContactFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperatorContact
   */
  select?: Prisma.OperatorContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OperatorContact
   */
  omit?: Prisma.OperatorContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperatorContactInclude<ExtArgs> | null
  /**
   * Filter, which OperatorContact to fetch.
   */
  where?: Prisma.OperatorContactWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OperatorContacts to fetch.
   */
  orderBy?: Prisma.OperatorContactOrderByWithRelationInput | Prisma.OperatorContactOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for OperatorContacts.
   */
  cursor?: Prisma.OperatorContactWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OperatorContacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OperatorContacts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of OperatorContacts.
   */
  distinct?: Prisma.OperatorContactScalarFieldEnum | Prisma.OperatorContactScalarFieldEnum[]
}

/**
 * OperatorContact findFirstOrThrow
 */
export type OperatorContactFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperatorContact
   */
  select?: Prisma.OperatorContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OperatorContact
   */
  omit?: Prisma.OperatorContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperatorContactInclude<ExtArgs> | null
  /**
   * Filter, which OperatorContact to fetch.
   */
  where?: Prisma.OperatorContactWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OperatorContacts to fetch.
   */
  orderBy?: Prisma.OperatorContactOrderByWithRelationInput | Prisma.OperatorContactOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for OperatorContacts.
   */
  cursor?: Prisma.OperatorContactWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OperatorContacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OperatorContacts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of OperatorContacts.
   */
  distinct?: Prisma.OperatorContactScalarFieldEnum | Prisma.OperatorContactScalarFieldEnum[]
}

/**
 * OperatorContact findMany
 */
export type OperatorContactFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperatorContact
   */
  select?: Prisma.OperatorContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OperatorContact
   */
  omit?: Prisma.OperatorContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperatorContactInclude<ExtArgs> | null
  /**
   * Filter, which OperatorContacts to fetch.
   */
  where?: Prisma.OperatorContactWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OperatorContacts to fetch.
   */
  orderBy?: Prisma.OperatorContactOrderByWithRelationInput | Prisma.OperatorContactOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing OperatorContacts.
   */
  cursor?: Prisma.OperatorContactWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OperatorContacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OperatorContacts.
   */
  skip?: number
  distinct?: Prisma.OperatorContactScalarFieldEnum | Prisma.OperatorContactScalarFieldEnum[]
}

/**
 * OperatorContact create
 */
export type OperatorContactCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperatorContact
   */
  select?: Prisma.OperatorContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OperatorContact
   */
  omit?: Prisma.OperatorContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperatorContactInclude<ExtArgs> | null
  /**
   * The data needed to create a OperatorContact.
   */
  data: Prisma.XOR<Prisma.OperatorContactCreateInput, Prisma.OperatorContactUncheckedCreateInput>
}

/**
 * OperatorContact createMany
 */
export type OperatorContactCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many OperatorContacts.
   */
  data: Prisma.OperatorContactCreateManyInput | Prisma.OperatorContactCreateManyInput[]
}

/**
 * OperatorContact createManyAndReturn
 */
export type OperatorContactCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperatorContact
   */
  select?: Prisma.OperatorContactSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the OperatorContact
   */
  omit?: Prisma.OperatorContactOmit<ExtArgs> | null
  /**
   * The data used to create many OperatorContacts.
   */
  data: Prisma.OperatorContactCreateManyInput | Prisma.OperatorContactCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperatorContactIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * OperatorContact update
 */
export type OperatorContactUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperatorContact
   */
  select?: Prisma.OperatorContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OperatorContact
   */
  omit?: Prisma.OperatorContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperatorContactInclude<ExtArgs> | null
  /**
   * The data needed to update a OperatorContact.
   */
  data: Prisma.XOR<Prisma.OperatorContactUpdateInput, Prisma.OperatorContactUncheckedUpdateInput>
  /**
   * Choose, which OperatorContact to update.
   */
  where: Prisma.OperatorContactWhereUniqueInput
}

/**
 * OperatorContact updateMany
 */
export type OperatorContactUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update OperatorContacts.
   */
  data: Prisma.XOR<Prisma.OperatorContactUpdateManyMutationInput, Prisma.OperatorContactUncheckedUpdateManyInput>
  /**
   * Filter which OperatorContacts to update
   */
  where?: Prisma.OperatorContactWhereInput
  /**
   * Limit how many OperatorContacts to update.
   */
  limit?: number
}

/**
 * OperatorContact updateManyAndReturn
 */
export type OperatorContactUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperatorContact
   */
  select?: Prisma.OperatorContactSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the OperatorContact
   */
  omit?: Prisma.OperatorContactOmit<ExtArgs> | null
  /**
   * The data used to update OperatorContacts.
   */
  data: Prisma.XOR<Prisma.OperatorContactUpdateManyMutationInput, Prisma.OperatorContactUncheckedUpdateManyInput>
  /**
   * Filter which OperatorContacts to update
   */
  where?: Prisma.OperatorContactWhereInput
  /**
   * Limit how many OperatorContacts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperatorContactIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * OperatorContact upsert
 */
export type OperatorContactUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperatorContact
   */
  select?: Prisma.OperatorContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OperatorContact
   */
  omit?: Prisma.OperatorContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperatorContactInclude<ExtArgs> | null
  /**
   * The filter to search for the OperatorContact to update in case it exists.
   */
  where: Prisma.OperatorContactWhereUniqueInput
  /**
   * In case the OperatorContact found by the `where` argument doesn't exist, create a new OperatorContact with this data.
   */
  create: Prisma.XOR<Prisma.OperatorContactCreateInput, Prisma.OperatorContactUncheckedCreateInput>
  /**
   * In case the OperatorContact was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.OperatorContactUpdateInput, Prisma.OperatorContactUncheckedUpdateInput>
}

/**
 * OperatorContact delete
 */
export type OperatorContactDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperatorContact
   */
  select?: Prisma.OperatorContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OperatorContact
   */
  omit?: Prisma.OperatorContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperatorContactInclude<ExtArgs> | null
  /**
   * Filter which OperatorContact to delete.
   */
  where: Prisma.OperatorContactWhereUniqueInput
}

/**
 * OperatorContact deleteMany
 */
export type OperatorContactDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which OperatorContacts to delete
   */
  where?: Prisma.OperatorContactWhereInput
  /**
   * Limit how many OperatorContacts to delete.
   */
  limit?: number
}

/**
 * OperatorContact without action
 */
export type OperatorContactDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperatorContact
   */
  select?: Prisma.OperatorContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OperatorContact
   */
  omit?: Prisma.OperatorContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperatorContactInclude<ExtArgs> | null
}
