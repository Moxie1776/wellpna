
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PlugCement` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PlugCement
 * 
 */
export type PlugCementModel = runtime.Types.Result.DefaultSelection<Prisma.$PlugCementPayload>

export type AggregatePlugCement = {
  _count: PlugCementCountAggregateOutputType | null
  _avg: PlugCementAvgAggregateOutputType | null
  _sum: PlugCementSumAggregateOutputType | null
  _min: PlugCementMinAggregateOutputType | null
  _max: PlugCementMaxAggregateOutputType | null
}

export type PlugCementAvgAggregateOutputType = {
  bbl: number | null
  sacks: number | null
  yield: number | null
  excessPercent: number | null
}

export type PlugCementSumAggregateOutputType = {
  bbl: number | null
  sacks: number | null
  yield: number | null
  excessPercent: number | null
}

export type PlugCementMinAggregateOutputType = {
  id: string | null
  plugScheduleId: string | null
  cementEnumType: string | null
  bbl: number | null
  sacks: number | null
  yield: number | null
  excessPercent: number | null
}

export type PlugCementMaxAggregateOutputType = {
  id: string | null
  plugScheduleId: string | null
  cementEnumType: string | null
  bbl: number | null
  sacks: number | null
  yield: number | null
  excessPercent: number | null
}

export type PlugCementCountAggregateOutputType = {
  id: number
  plugScheduleId: number
  cementEnumType: number
  bbl: number
  sacks: number
  yield: number
  excessPercent: number
  _all: number
}


export type PlugCementAvgAggregateInputType = {
  bbl?: true
  sacks?: true
  yield?: true
  excessPercent?: true
}

export type PlugCementSumAggregateInputType = {
  bbl?: true
  sacks?: true
  yield?: true
  excessPercent?: true
}

export type PlugCementMinAggregateInputType = {
  id?: true
  plugScheduleId?: true
  cementEnumType?: true
  bbl?: true
  sacks?: true
  yield?: true
  excessPercent?: true
}

export type PlugCementMaxAggregateInputType = {
  id?: true
  plugScheduleId?: true
  cementEnumType?: true
  bbl?: true
  sacks?: true
  yield?: true
  excessPercent?: true
}

export type PlugCementCountAggregateInputType = {
  id?: true
  plugScheduleId?: true
  cementEnumType?: true
  bbl?: true
  sacks?: true
  yield?: true
  excessPercent?: true
  _all?: true
}

export type PlugCementAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PlugCement to aggregate.
   */
  where?: Prisma.PlugCementWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlugCements to fetch.
   */
  orderBy?: Prisma.PlugCementOrderByWithRelationInput | Prisma.PlugCementOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PlugCementWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlugCements from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlugCements.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PlugCements
  **/
  _count?: true | PlugCementCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PlugCementAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PlugCementSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PlugCementMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PlugCementMaxAggregateInputType
}

export type GetPlugCementAggregateType<T extends PlugCementAggregateArgs> = {
      [P in keyof T & keyof AggregatePlugCement]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePlugCement[P]>
    : Prisma.GetScalarType<T[P], AggregatePlugCement[P]>
}




export type PlugCementGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlugCementWhereInput
  orderBy?: Prisma.PlugCementOrderByWithAggregationInput | Prisma.PlugCementOrderByWithAggregationInput[]
  by: Prisma.PlugCementScalarFieldEnum[] | Prisma.PlugCementScalarFieldEnum
  having?: Prisma.PlugCementScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PlugCementCountAggregateInputType | true
  _avg?: PlugCementAvgAggregateInputType
  _sum?: PlugCementSumAggregateInputType
  _min?: PlugCementMinAggregateInputType
  _max?: PlugCementMaxAggregateInputType
}

export type PlugCementGroupByOutputType = {
  id: string
  plugScheduleId: string
  cementEnumType: string
  bbl: number
  sacks: number
  yield: number
  excessPercent: number
  _count: PlugCementCountAggregateOutputType | null
  _avg: PlugCementAvgAggregateOutputType | null
  _sum: PlugCementSumAggregateOutputType | null
  _min: PlugCementMinAggregateOutputType | null
  _max: PlugCementMaxAggregateOutputType | null
}

type GetPlugCementGroupByPayload<T extends PlugCementGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PlugCementGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PlugCementGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PlugCementGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PlugCementGroupByOutputType[P]>
      }
    >
  >



export type PlugCementWhereInput = {
  AND?: Prisma.PlugCementWhereInput | Prisma.PlugCementWhereInput[]
  OR?: Prisma.PlugCementWhereInput[]
  NOT?: Prisma.PlugCementWhereInput | Prisma.PlugCementWhereInput[]
  id?: Prisma.StringFilter<"PlugCement"> | string
  plugScheduleId?: Prisma.StringFilter<"PlugCement"> | string
  cementEnumType?: Prisma.StringFilter<"PlugCement"> | string
  bbl?: Prisma.FloatFilter<"PlugCement"> | number
  sacks?: Prisma.FloatFilter<"PlugCement"> | number
  yield?: Prisma.FloatFilter<"PlugCement"> | number
  excessPercent?: Prisma.FloatFilter<"PlugCement"> | number
  plugCementEnum?: Prisma.XOR<Prisma.PlugCementEnumScalarRelationFilter, Prisma.PlugCementEnumWhereInput>
  plugSchedule?: Prisma.XOR<Prisma.PlugScheduleScalarRelationFilter, Prisma.PlugScheduleWhereInput>
}

export type PlugCementOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  plugScheduleId?: Prisma.SortOrder
  cementEnumType?: Prisma.SortOrder
  bbl?: Prisma.SortOrder
  sacks?: Prisma.SortOrder
  yield?: Prisma.SortOrder
  excessPercent?: Prisma.SortOrder
  plugCementEnum?: Prisma.PlugCementEnumOrderByWithRelationInput
  plugSchedule?: Prisma.PlugScheduleOrderByWithRelationInput
}

export type PlugCementWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PlugCementWhereInput | Prisma.PlugCementWhereInput[]
  OR?: Prisma.PlugCementWhereInput[]
  NOT?: Prisma.PlugCementWhereInput | Prisma.PlugCementWhereInput[]
  plugScheduleId?: Prisma.StringFilter<"PlugCement"> | string
  cementEnumType?: Prisma.StringFilter<"PlugCement"> | string
  bbl?: Prisma.FloatFilter<"PlugCement"> | number
  sacks?: Prisma.FloatFilter<"PlugCement"> | number
  yield?: Prisma.FloatFilter<"PlugCement"> | number
  excessPercent?: Prisma.FloatFilter<"PlugCement"> | number
  plugCementEnum?: Prisma.XOR<Prisma.PlugCementEnumScalarRelationFilter, Prisma.PlugCementEnumWhereInput>
  plugSchedule?: Prisma.XOR<Prisma.PlugScheduleScalarRelationFilter, Prisma.PlugScheduleWhereInput>
}, "id">

export type PlugCementOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  plugScheduleId?: Prisma.SortOrder
  cementEnumType?: Prisma.SortOrder
  bbl?: Prisma.SortOrder
  sacks?: Prisma.SortOrder
  yield?: Prisma.SortOrder
  excessPercent?: Prisma.SortOrder
  _count?: Prisma.PlugCementCountOrderByAggregateInput
  _avg?: Prisma.PlugCementAvgOrderByAggregateInput
  _max?: Prisma.PlugCementMaxOrderByAggregateInput
  _min?: Prisma.PlugCementMinOrderByAggregateInput
  _sum?: Prisma.PlugCementSumOrderByAggregateInput
}

export type PlugCementScalarWhereWithAggregatesInput = {
  AND?: Prisma.PlugCementScalarWhereWithAggregatesInput | Prisma.PlugCementScalarWhereWithAggregatesInput[]
  OR?: Prisma.PlugCementScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PlugCementScalarWhereWithAggregatesInput | Prisma.PlugCementScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PlugCement"> | string
  plugScheduleId?: Prisma.StringWithAggregatesFilter<"PlugCement"> | string
  cementEnumType?: Prisma.StringWithAggregatesFilter<"PlugCement"> | string
  bbl?: Prisma.FloatWithAggregatesFilter<"PlugCement"> | number
  sacks?: Prisma.FloatWithAggregatesFilter<"PlugCement"> | number
  yield?: Prisma.FloatWithAggregatesFilter<"PlugCement"> | number
  excessPercent?: Prisma.FloatWithAggregatesFilter<"PlugCement"> | number
}

export type PlugCementCreateInput = {
  id?: string
  bbl: number
  sacks: number
  yield: number
  excessPercent: number
  plugCementEnum: Prisma.PlugCementEnumCreateNestedOneWithoutPlugCementTypesInput
  plugSchedule: Prisma.PlugScheduleCreateNestedOneWithoutPlugCementInput
}

export type PlugCementUncheckedCreateInput = {
  id?: string
  plugScheduleId: string
  cementEnumType: string
  bbl: number
  sacks: number
  yield: number
  excessPercent: number
}

export type PlugCementUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  bbl?: Prisma.FloatFieldUpdateOperationsInput | number
  sacks?: Prisma.FloatFieldUpdateOperationsInput | number
  yield?: Prisma.FloatFieldUpdateOperationsInput | number
  excessPercent?: Prisma.FloatFieldUpdateOperationsInput | number
  plugCementEnum?: Prisma.PlugCementEnumUpdateOneRequiredWithoutPlugCementTypesNestedInput
  plugSchedule?: Prisma.PlugScheduleUpdateOneRequiredWithoutPlugCementNestedInput
}

export type PlugCementUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  plugScheduleId?: Prisma.StringFieldUpdateOperationsInput | string
  cementEnumType?: Prisma.StringFieldUpdateOperationsInput | string
  bbl?: Prisma.FloatFieldUpdateOperationsInput | number
  sacks?: Prisma.FloatFieldUpdateOperationsInput | number
  yield?: Prisma.FloatFieldUpdateOperationsInput | number
  excessPercent?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type PlugCementCreateManyInput = {
  id?: string
  plugScheduleId: string
  cementEnumType: string
  bbl: number
  sacks: number
  yield: number
  excessPercent: number
}

export type PlugCementUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  bbl?: Prisma.FloatFieldUpdateOperationsInput | number
  sacks?: Prisma.FloatFieldUpdateOperationsInput | number
  yield?: Prisma.FloatFieldUpdateOperationsInput | number
  excessPercent?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type PlugCementUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  plugScheduleId?: Prisma.StringFieldUpdateOperationsInput | string
  cementEnumType?: Prisma.StringFieldUpdateOperationsInput | string
  bbl?: Prisma.FloatFieldUpdateOperationsInput | number
  sacks?: Prisma.FloatFieldUpdateOperationsInput | number
  yield?: Prisma.FloatFieldUpdateOperationsInput | number
  excessPercent?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type PlugCementCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  plugScheduleId?: Prisma.SortOrder
  cementEnumType?: Prisma.SortOrder
  bbl?: Prisma.SortOrder
  sacks?: Prisma.SortOrder
  yield?: Prisma.SortOrder
  excessPercent?: Prisma.SortOrder
}

export type PlugCementAvgOrderByAggregateInput = {
  bbl?: Prisma.SortOrder
  sacks?: Prisma.SortOrder
  yield?: Prisma.SortOrder
  excessPercent?: Prisma.SortOrder
}

export type PlugCementMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  plugScheduleId?: Prisma.SortOrder
  cementEnumType?: Prisma.SortOrder
  bbl?: Prisma.SortOrder
  sacks?: Prisma.SortOrder
  yield?: Prisma.SortOrder
  excessPercent?: Prisma.SortOrder
}

export type PlugCementMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  plugScheduleId?: Prisma.SortOrder
  cementEnumType?: Prisma.SortOrder
  bbl?: Prisma.SortOrder
  sacks?: Prisma.SortOrder
  yield?: Prisma.SortOrder
  excessPercent?: Prisma.SortOrder
}

export type PlugCementSumOrderByAggregateInput = {
  bbl?: Prisma.SortOrder
  sacks?: Prisma.SortOrder
  yield?: Prisma.SortOrder
  excessPercent?: Prisma.SortOrder
}

export type PlugCementListRelationFilter = {
  every?: Prisma.PlugCementWhereInput
  some?: Prisma.PlugCementWhereInput
  none?: Prisma.PlugCementWhereInput
}

export type PlugCementOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PlugCementCreateNestedManyWithoutPlugCementEnumInput = {
  create?: Prisma.XOR<Prisma.PlugCementCreateWithoutPlugCementEnumInput, Prisma.PlugCementUncheckedCreateWithoutPlugCementEnumInput> | Prisma.PlugCementCreateWithoutPlugCementEnumInput[] | Prisma.PlugCementUncheckedCreateWithoutPlugCementEnumInput[]
  connectOrCreate?: Prisma.PlugCementCreateOrConnectWithoutPlugCementEnumInput | Prisma.PlugCementCreateOrConnectWithoutPlugCementEnumInput[]
  createMany?: Prisma.PlugCementCreateManyPlugCementEnumInputEnvelope
  connect?: Prisma.PlugCementWhereUniqueInput | Prisma.PlugCementWhereUniqueInput[]
}

export type PlugCementUncheckedCreateNestedManyWithoutPlugCementEnumInput = {
  create?: Prisma.XOR<Prisma.PlugCementCreateWithoutPlugCementEnumInput, Prisma.PlugCementUncheckedCreateWithoutPlugCementEnumInput> | Prisma.PlugCementCreateWithoutPlugCementEnumInput[] | Prisma.PlugCementUncheckedCreateWithoutPlugCementEnumInput[]
  connectOrCreate?: Prisma.PlugCementCreateOrConnectWithoutPlugCementEnumInput | Prisma.PlugCementCreateOrConnectWithoutPlugCementEnumInput[]
  createMany?: Prisma.PlugCementCreateManyPlugCementEnumInputEnvelope
  connect?: Prisma.PlugCementWhereUniqueInput | Prisma.PlugCementWhereUniqueInput[]
}

export type PlugCementUpdateManyWithoutPlugCementEnumNestedInput = {
  create?: Prisma.XOR<Prisma.PlugCementCreateWithoutPlugCementEnumInput, Prisma.PlugCementUncheckedCreateWithoutPlugCementEnumInput> | Prisma.PlugCementCreateWithoutPlugCementEnumInput[] | Prisma.PlugCementUncheckedCreateWithoutPlugCementEnumInput[]
  connectOrCreate?: Prisma.PlugCementCreateOrConnectWithoutPlugCementEnumInput | Prisma.PlugCementCreateOrConnectWithoutPlugCementEnumInput[]
  upsert?: Prisma.PlugCementUpsertWithWhereUniqueWithoutPlugCementEnumInput | Prisma.PlugCementUpsertWithWhereUniqueWithoutPlugCementEnumInput[]
  createMany?: Prisma.PlugCementCreateManyPlugCementEnumInputEnvelope
  set?: Prisma.PlugCementWhereUniqueInput | Prisma.PlugCementWhereUniqueInput[]
  disconnect?: Prisma.PlugCementWhereUniqueInput | Prisma.PlugCementWhereUniqueInput[]
  delete?: Prisma.PlugCementWhereUniqueInput | Prisma.PlugCementWhereUniqueInput[]
  connect?: Prisma.PlugCementWhereUniqueInput | Prisma.PlugCementWhereUniqueInput[]
  update?: Prisma.PlugCementUpdateWithWhereUniqueWithoutPlugCementEnumInput | Prisma.PlugCementUpdateWithWhereUniqueWithoutPlugCementEnumInput[]
  updateMany?: Prisma.PlugCementUpdateManyWithWhereWithoutPlugCementEnumInput | Prisma.PlugCementUpdateManyWithWhereWithoutPlugCementEnumInput[]
  deleteMany?: Prisma.PlugCementScalarWhereInput | Prisma.PlugCementScalarWhereInput[]
}

export type PlugCementUncheckedUpdateManyWithoutPlugCementEnumNestedInput = {
  create?: Prisma.XOR<Prisma.PlugCementCreateWithoutPlugCementEnumInput, Prisma.PlugCementUncheckedCreateWithoutPlugCementEnumInput> | Prisma.PlugCementCreateWithoutPlugCementEnumInput[] | Prisma.PlugCementUncheckedCreateWithoutPlugCementEnumInput[]
  connectOrCreate?: Prisma.PlugCementCreateOrConnectWithoutPlugCementEnumInput | Prisma.PlugCementCreateOrConnectWithoutPlugCementEnumInput[]
  upsert?: Prisma.PlugCementUpsertWithWhereUniqueWithoutPlugCementEnumInput | Prisma.PlugCementUpsertWithWhereUniqueWithoutPlugCementEnumInput[]
  createMany?: Prisma.PlugCementCreateManyPlugCementEnumInputEnvelope
  set?: Prisma.PlugCementWhereUniqueInput | Prisma.PlugCementWhereUniqueInput[]
  disconnect?: Prisma.PlugCementWhereUniqueInput | Prisma.PlugCementWhereUniqueInput[]
  delete?: Prisma.PlugCementWhereUniqueInput | Prisma.PlugCementWhereUniqueInput[]
  connect?: Prisma.PlugCementWhereUniqueInput | Prisma.PlugCementWhereUniqueInput[]
  update?: Prisma.PlugCementUpdateWithWhereUniqueWithoutPlugCementEnumInput | Prisma.PlugCementUpdateWithWhereUniqueWithoutPlugCementEnumInput[]
  updateMany?: Prisma.PlugCementUpdateManyWithWhereWithoutPlugCementEnumInput | Prisma.PlugCementUpdateManyWithWhereWithoutPlugCementEnumInput[]
  deleteMany?: Prisma.PlugCementScalarWhereInput | Prisma.PlugCementScalarWhereInput[]
}

export type PlugCementCreateNestedManyWithoutPlugScheduleInput = {
  create?: Prisma.XOR<Prisma.PlugCementCreateWithoutPlugScheduleInput, Prisma.PlugCementUncheckedCreateWithoutPlugScheduleInput> | Prisma.PlugCementCreateWithoutPlugScheduleInput[] | Prisma.PlugCementUncheckedCreateWithoutPlugScheduleInput[]
  connectOrCreate?: Prisma.PlugCementCreateOrConnectWithoutPlugScheduleInput | Prisma.PlugCementCreateOrConnectWithoutPlugScheduleInput[]
  createMany?: Prisma.PlugCementCreateManyPlugScheduleInputEnvelope
  connect?: Prisma.PlugCementWhereUniqueInput | Prisma.PlugCementWhereUniqueInput[]
}

export type PlugCementUncheckedCreateNestedManyWithoutPlugScheduleInput = {
  create?: Prisma.XOR<Prisma.PlugCementCreateWithoutPlugScheduleInput, Prisma.PlugCementUncheckedCreateWithoutPlugScheduleInput> | Prisma.PlugCementCreateWithoutPlugScheduleInput[] | Prisma.PlugCementUncheckedCreateWithoutPlugScheduleInput[]
  connectOrCreate?: Prisma.PlugCementCreateOrConnectWithoutPlugScheduleInput | Prisma.PlugCementCreateOrConnectWithoutPlugScheduleInput[]
  createMany?: Prisma.PlugCementCreateManyPlugScheduleInputEnvelope
  connect?: Prisma.PlugCementWhereUniqueInput | Prisma.PlugCementWhereUniqueInput[]
}

export type PlugCementUpdateManyWithoutPlugScheduleNestedInput = {
  create?: Prisma.XOR<Prisma.PlugCementCreateWithoutPlugScheduleInput, Prisma.PlugCementUncheckedCreateWithoutPlugScheduleInput> | Prisma.PlugCementCreateWithoutPlugScheduleInput[] | Prisma.PlugCementUncheckedCreateWithoutPlugScheduleInput[]
  connectOrCreate?: Prisma.PlugCementCreateOrConnectWithoutPlugScheduleInput | Prisma.PlugCementCreateOrConnectWithoutPlugScheduleInput[]
  upsert?: Prisma.PlugCementUpsertWithWhereUniqueWithoutPlugScheduleInput | Prisma.PlugCementUpsertWithWhereUniqueWithoutPlugScheduleInput[]
  createMany?: Prisma.PlugCementCreateManyPlugScheduleInputEnvelope
  set?: Prisma.PlugCementWhereUniqueInput | Prisma.PlugCementWhereUniqueInput[]
  disconnect?: Prisma.PlugCementWhereUniqueInput | Prisma.PlugCementWhereUniqueInput[]
  delete?: Prisma.PlugCementWhereUniqueInput | Prisma.PlugCementWhereUniqueInput[]
  connect?: Prisma.PlugCementWhereUniqueInput | Prisma.PlugCementWhereUniqueInput[]
  update?: Prisma.PlugCementUpdateWithWhereUniqueWithoutPlugScheduleInput | Prisma.PlugCementUpdateWithWhereUniqueWithoutPlugScheduleInput[]
  updateMany?: Prisma.PlugCementUpdateManyWithWhereWithoutPlugScheduleInput | Prisma.PlugCementUpdateManyWithWhereWithoutPlugScheduleInput[]
  deleteMany?: Prisma.PlugCementScalarWhereInput | Prisma.PlugCementScalarWhereInput[]
}

export type PlugCementUncheckedUpdateManyWithoutPlugScheduleNestedInput = {
  create?: Prisma.XOR<Prisma.PlugCementCreateWithoutPlugScheduleInput, Prisma.PlugCementUncheckedCreateWithoutPlugScheduleInput> | Prisma.PlugCementCreateWithoutPlugScheduleInput[] | Prisma.PlugCementUncheckedCreateWithoutPlugScheduleInput[]
  connectOrCreate?: Prisma.PlugCementCreateOrConnectWithoutPlugScheduleInput | Prisma.PlugCementCreateOrConnectWithoutPlugScheduleInput[]
  upsert?: Prisma.PlugCementUpsertWithWhereUniqueWithoutPlugScheduleInput | Prisma.PlugCementUpsertWithWhereUniqueWithoutPlugScheduleInput[]
  createMany?: Prisma.PlugCementCreateManyPlugScheduleInputEnvelope
  set?: Prisma.PlugCementWhereUniqueInput | Prisma.PlugCementWhereUniqueInput[]
  disconnect?: Prisma.PlugCementWhereUniqueInput | Prisma.PlugCementWhereUniqueInput[]
  delete?: Prisma.PlugCementWhereUniqueInput | Prisma.PlugCementWhereUniqueInput[]
  connect?: Prisma.PlugCementWhereUniqueInput | Prisma.PlugCementWhereUniqueInput[]
  update?: Prisma.PlugCementUpdateWithWhereUniqueWithoutPlugScheduleInput | Prisma.PlugCementUpdateWithWhereUniqueWithoutPlugScheduleInput[]
  updateMany?: Prisma.PlugCementUpdateManyWithWhereWithoutPlugScheduleInput | Prisma.PlugCementUpdateManyWithWhereWithoutPlugScheduleInput[]
  deleteMany?: Prisma.PlugCementScalarWhereInput | Prisma.PlugCementScalarWhereInput[]
}

export type PlugCementCreateWithoutPlugCementEnumInput = {
  id?: string
  bbl: number
  sacks: number
  yield: number
  excessPercent: number
  plugSchedule: Prisma.PlugScheduleCreateNestedOneWithoutPlugCementInput
}

export type PlugCementUncheckedCreateWithoutPlugCementEnumInput = {
  id?: string
  plugScheduleId: string
  bbl: number
  sacks: number
  yield: number
  excessPercent: number
}

export type PlugCementCreateOrConnectWithoutPlugCementEnumInput = {
  where: Prisma.PlugCementWhereUniqueInput
  create: Prisma.XOR<Prisma.PlugCementCreateWithoutPlugCementEnumInput, Prisma.PlugCementUncheckedCreateWithoutPlugCementEnumInput>
}

export type PlugCementCreateManyPlugCementEnumInputEnvelope = {
  data: Prisma.PlugCementCreateManyPlugCementEnumInput | Prisma.PlugCementCreateManyPlugCementEnumInput[]
}

export type PlugCementUpsertWithWhereUniqueWithoutPlugCementEnumInput = {
  where: Prisma.PlugCementWhereUniqueInput
  update: Prisma.XOR<Prisma.PlugCementUpdateWithoutPlugCementEnumInput, Prisma.PlugCementUncheckedUpdateWithoutPlugCementEnumInput>
  create: Prisma.XOR<Prisma.PlugCementCreateWithoutPlugCementEnumInput, Prisma.PlugCementUncheckedCreateWithoutPlugCementEnumInput>
}

export type PlugCementUpdateWithWhereUniqueWithoutPlugCementEnumInput = {
  where: Prisma.PlugCementWhereUniqueInput
  data: Prisma.XOR<Prisma.PlugCementUpdateWithoutPlugCementEnumInput, Prisma.PlugCementUncheckedUpdateWithoutPlugCementEnumInput>
}

export type PlugCementUpdateManyWithWhereWithoutPlugCementEnumInput = {
  where: Prisma.PlugCementScalarWhereInput
  data: Prisma.XOR<Prisma.PlugCementUpdateManyMutationInput, Prisma.PlugCementUncheckedUpdateManyWithoutPlugCementEnumInput>
}

export type PlugCementScalarWhereInput = {
  AND?: Prisma.PlugCementScalarWhereInput | Prisma.PlugCementScalarWhereInput[]
  OR?: Prisma.PlugCementScalarWhereInput[]
  NOT?: Prisma.PlugCementScalarWhereInput | Prisma.PlugCementScalarWhereInput[]
  id?: Prisma.StringFilter<"PlugCement"> | string
  plugScheduleId?: Prisma.StringFilter<"PlugCement"> | string
  cementEnumType?: Prisma.StringFilter<"PlugCement"> | string
  bbl?: Prisma.FloatFilter<"PlugCement"> | number
  sacks?: Prisma.FloatFilter<"PlugCement"> | number
  yield?: Prisma.FloatFilter<"PlugCement"> | number
  excessPercent?: Prisma.FloatFilter<"PlugCement"> | number
}

export type PlugCementCreateWithoutPlugScheduleInput = {
  id?: string
  bbl: number
  sacks: number
  yield: number
  excessPercent: number
  plugCementEnum: Prisma.PlugCementEnumCreateNestedOneWithoutPlugCementTypesInput
}

export type PlugCementUncheckedCreateWithoutPlugScheduleInput = {
  id?: string
  cementEnumType: string
  bbl: number
  sacks: number
  yield: number
  excessPercent: number
}

export type PlugCementCreateOrConnectWithoutPlugScheduleInput = {
  where: Prisma.PlugCementWhereUniqueInput
  create: Prisma.XOR<Prisma.PlugCementCreateWithoutPlugScheduleInput, Prisma.PlugCementUncheckedCreateWithoutPlugScheduleInput>
}

export type PlugCementCreateManyPlugScheduleInputEnvelope = {
  data: Prisma.PlugCementCreateManyPlugScheduleInput | Prisma.PlugCementCreateManyPlugScheduleInput[]
}

export type PlugCementUpsertWithWhereUniqueWithoutPlugScheduleInput = {
  where: Prisma.PlugCementWhereUniqueInput
  update: Prisma.XOR<Prisma.PlugCementUpdateWithoutPlugScheduleInput, Prisma.PlugCementUncheckedUpdateWithoutPlugScheduleInput>
  create: Prisma.XOR<Prisma.PlugCementCreateWithoutPlugScheduleInput, Prisma.PlugCementUncheckedCreateWithoutPlugScheduleInput>
}

export type PlugCementUpdateWithWhereUniqueWithoutPlugScheduleInput = {
  where: Prisma.PlugCementWhereUniqueInput
  data: Prisma.XOR<Prisma.PlugCementUpdateWithoutPlugScheduleInput, Prisma.PlugCementUncheckedUpdateWithoutPlugScheduleInput>
}

export type PlugCementUpdateManyWithWhereWithoutPlugScheduleInput = {
  where: Prisma.PlugCementScalarWhereInput
  data: Prisma.XOR<Prisma.PlugCementUpdateManyMutationInput, Prisma.PlugCementUncheckedUpdateManyWithoutPlugScheduleInput>
}

export type PlugCementCreateManyPlugCementEnumInput = {
  id?: string
  plugScheduleId: string
  bbl: number
  sacks: number
  yield: number
  excessPercent: number
}

export type PlugCementUpdateWithoutPlugCementEnumInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  bbl?: Prisma.FloatFieldUpdateOperationsInput | number
  sacks?: Prisma.FloatFieldUpdateOperationsInput | number
  yield?: Prisma.FloatFieldUpdateOperationsInput | number
  excessPercent?: Prisma.FloatFieldUpdateOperationsInput | number
  plugSchedule?: Prisma.PlugScheduleUpdateOneRequiredWithoutPlugCementNestedInput
}

export type PlugCementUncheckedUpdateWithoutPlugCementEnumInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  plugScheduleId?: Prisma.StringFieldUpdateOperationsInput | string
  bbl?: Prisma.FloatFieldUpdateOperationsInput | number
  sacks?: Prisma.FloatFieldUpdateOperationsInput | number
  yield?: Prisma.FloatFieldUpdateOperationsInput | number
  excessPercent?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type PlugCementUncheckedUpdateManyWithoutPlugCementEnumInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  plugScheduleId?: Prisma.StringFieldUpdateOperationsInput | string
  bbl?: Prisma.FloatFieldUpdateOperationsInput | number
  sacks?: Prisma.FloatFieldUpdateOperationsInput | number
  yield?: Prisma.FloatFieldUpdateOperationsInput | number
  excessPercent?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type PlugCementCreateManyPlugScheduleInput = {
  id?: string
  cementEnumType: string
  bbl: number
  sacks: number
  yield: number
  excessPercent: number
}

export type PlugCementUpdateWithoutPlugScheduleInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  bbl?: Prisma.FloatFieldUpdateOperationsInput | number
  sacks?: Prisma.FloatFieldUpdateOperationsInput | number
  yield?: Prisma.FloatFieldUpdateOperationsInput | number
  excessPercent?: Prisma.FloatFieldUpdateOperationsInput | number
  plugCementEnum?: Prisma.PlugCementEnumUpdateOneRequiredWithoutPlugCementTypesNestedInput
}

export type PlugCementUncheckedUpdateWithoutPlugScheduleInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  cementEnumType?: Prisma.StringFieldUpdateOperationsInput | string
  bbl?: Prisma.FloatFieldUpdateOperationsInput | number
  sacks?: Prisma.FloatFieldUpdateOperationsInput | number
  yield?: Prisma.FloatFieldUpdateOperationsInput | number
  excessPercent?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type PlugCementUncheckedUpdateManyWithoutPlugScheduleInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  cementEnumType?: Prisma.StringFieldUpdateOperationsInput | string
  bbl?: Prisma.FloatFieldUpdateOperationsInput | number
  sacks?: Prisma.FloatFieldUpdateOperationsInput | number
  yield?: Prisma.FloatFieldUpdateOperationsInput | number
  excessPercent?: Prisma.FloatFieldUpdateOperationsInput | number
}



export type PlugCementSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  plugScheduleId?: boolean
  cementEnumType?: boolean
  bbl?: boolean
  sacks?: boolean
  yield?: boolean
  excessPercent?: boolean
  plugCementEnum?: boolean | Prisma.PlugCementEnumDefaultArgs<ExtArgs>
  plugSchedule?: boolean | Prisma.PlugScheduleDefaultArgs<ExtArgs>
}, ExtArgs["result"]["plugCement"]>

export type PlugCementSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  plugScheduleId?: boolean
  cementEnumType?: boolean
  bbl?: boolean
  sacks?: boolean
  yield?: boolean
  excessPercent?: boolean
  plugCementEnum?: boolean | Prisma.PlugCementEnumDefaultArgs<ExtArgs>
  plugSchedule?: boolean | Prisma.PlugScheduleDefaultArgs<ExtArgs>
}, ExtArgs["result"]["plugCement"]>

export type PlugCementSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  plugScheduleId?: boolean
  cementEnumType?: boolean
  bbl?: boolean
  sacks?: boolean
  yield?: boolean
  excessPercent?: boolean
  plugCementEnum?: boolean | Prisma.PlugCementEnumDefaultArgs<ExtArgs>
  plugSchedule?: boolean | Prisma.PlugScheduleDefaultArgs<ExtArgs>
}, ExtArgs["result"]["plugCement"]>

export type PlugCementSelectScalar = {
  id?: boolean
  plugScheduleId?: boolean
  cementEnumType?: boolean
  bbl?: boolean
  sacks?: boolean
  yield?: boolean
  excessPercent?: boolean
}

export type PlugCementOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "plugScheduleId" | "cementEnumType" | "bbl" | "sacks" | "yield" | "excessPercent", ExtArgs["result"]["plugCement"]>
export type PlugCementInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  plugCementEnum?: boolean | Prisma.PlugCementEnumDefaultArgs<ExtArgs>
  plugSchedule?: boolean | Prisma.PlugScheduleDefaultArgs<ExtArgs>
}
export type PlugCementIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  plugCementEnum?: boolean | Prisma.PlugCementEnumDefaultArgs<ExtArgs>
  plugSchedule?: boolean | Prisma.PlugScheduleDefaultArgs<ExtArgs>
}
export type PlugCementIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  plugCementEnum?: boolean | Prisma.PlugCementEnumDefaultArgs<ExtArgs>
  plugSchedule?: boolean | Prisma.PlugScheduleDefaultArgs<ExtArgs>
}

export type $PlugCementPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PlugCement"
  objects: {
    plugCementEnum: Prisma.$PlugCementEnumPayload<ExtArgs>
    plugSchedule: Prisma.$PlugSchedulePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    plugScheduleId: string
    cementEnumType: string
    bbl: number
    sacks: number
    yield: number
    excessPercent: number
  }, ExtArgs["result"]["plugCement"]>
  composites: {}
}

export type PlugCementGetPayload<S extends boolean | null | undefined | PlugCementDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PlugCementPayload, S>

export type PlugCementCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PlugCementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PlugCementCountAggregateInputType | true
  }

export interface PlugCementDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlugCement'], meta: { name: 'PlugCement' } }
  /**
   * Find zero or one PlugCement that matches the filter.
   * @param {PlugCementFindUniqueArgs} args - Arguments to find a PlugCement
   * @example
   * // Get one PlugCement
   * const plugCement = await prisma.plugCement.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PlugCementFindUniqueArgs>(args: Prisma.SelectSubset<T, PlugCementFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PlugCementClient<runtime.Types.Result.GetResult<Prisma.$PlugCementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PlugCement that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PlugCementFindUniqueOrThrowArgs} args - Arguments to find a PlugCement
   * @example
   * // Get one PlugCement
   * const plugCement = await prisma.plugCement.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PlugCementFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PlugCementFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlugCementClient<runtime.Types.Result.GetResult<Prisma.$PlugCementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PlugCement that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlugCementFindFirstArgs} args - Arguments to find a PlugCement
   * @example
   * // Get one PlugCement
   * const plugCement = await prisma.plugCement.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PlugCementFindFirstArgs>(args?: Prisma.SelectSubset<T, PlugCementFindFirstArgs<ExtArgs>>): Prisma.Prisma__PlugCementClient<runtime.Types.Result.GetResult<Prisma.$PlugCementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PlugCement that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlugCementFindFirstOrThrowArgs} args - Arguments to find a PlugCement
   * @example
   * // Get one PlugCement
   * const plugCement = await prisma.plugCement.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PlugCementFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PlugCementFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlugCementClient<runtime.Types.Result.GetResult<Prisma.$PlugCementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PlugCements that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlugCementFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PlugCements
   * const plugCements = await prisma.plugCement.findMany()
   * 
   * // Get first 10 PlugCements
   * const plugCements = await prisma.plugCement.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const plugCementWithIdOnly = await prisma.plugCement.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PlugCementFindManyArgs>(args?: Prisma.SelectSubset<T, PlugCementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlugCementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PlugCement.
   * @param {PlugCementCreateArgs} args - Arguments to create a PlugCement.
   * @example
   * // Create one PlugCement
   * const PlugCement = await prisma.plugCement.create({
   *   data: {
   *     // ... data to create a PlugCement
   *   }
   * })
   * 
   */
  create<T extends PlugCementCreateArgs>(args: Prisma.SelectSubset<T, PlugCementCreateArgs<ExtArgs>>): Prisma.Prisma__PlugCementClient<runtime.Types.Result.GetResult<Prisma.$PlugCementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PlugCements.
   * @param {PlugCementCreateManyArgs} args - Arguments to create many PlugCements.
   * @example
   * // Create many PlugCements
   * const plugCement = await prisma.plugCement.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PlugCementCreateManyArgs>(args?: Prisma.SelectSubset<T, PlugCementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PlugCements and returns the data saved in the database.
   * @param {PlugCementCreateManyAndReturnArgs} args - Arguments to create many PlugCements.
   * @example
   * // Create many PlugCements
   * const plugCement = await prisma.plugCement.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PlugCements and only return the `id`
   * const plugCementWithIdOnly = await prisma.plugCement.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PlugCementCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PlugCementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlugCementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PlugCement.
   * @param {PlugCementDeleteArgs} args - Arguments to delete one PlugCement.
   * @example
   * // Delete one PlugCement
   * const PlugCement = await prisma.plugCement.delete({
   *   where: {
   *     // ... filter to delete one PlugCement
   *   }
   * })
   * 
   */
  delete<T extends PlugCementDeleteArgs>(args: Prisma.SelectSubset<T, PlugCementDeleteArgs<ExtArgs>>): Prisma.Prisma__PlugCementClient<runtime.Types.Result.GetResult<Prisma.$PlugCementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PlugCement.
   * @param {PlugCementUpdateArgs} args - Arguments to update one PlugCement.
   * @example
   * // Update one PlugCement
   * const plugCement = await prisma.plugCement.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PlugCementUpdateArgs>(args: Prisma.SelectSubset<T, PlugCementUpdateArgs<ExtArgs>>): Prisma.Prisma__PlugCementClient<runtime.Types.Result.GetResult<Prisma.$PlugCementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PlugCements.
   * @param {PlugCementDeleteManyArgs} args - Arguments to filter PlugCements to delete.
   * @example
   * // Delete a few PlugCements
   * const { count } = await prisma.plugCement.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PlugCementDeleteManyArgs>(args?: Prisma.SelectSubset<T, PlugCementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PlugCements.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlugCementUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PlugCements
   * const plugCement = await prisma.plugCement.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PlugCementUpdateManyArgs>(args: Prisma.SelectSubset<T, PlugCementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PlugCements and returns the data updated in the database.
   * @param {PlugCementUpdateManyAndReturnArgs} args - Arguments to update many PlugCements.
   * @example
   * // Update many PlugCements
   * const plugCement = await prisma.plugCement.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PlugCements and only return the `id`
   * const plugCementWithIdOnly = await prisma.plugCement.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PlugCementUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PlugCementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlugCementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PlugCement.
   * @param {PlugCementUpsertArgs} args - Arguments to update or create a PlugCement.
   * @example
   * // Update or create a PlugCement
   * const plugCement = await prisma.plugCement.upsert({
   *   create: {
   *     // ... data to create a PlugCement
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PlugCement we want to update
   *   }
   * })
   */
  upsert<T extends PlugCementUpsertArgs>(args: Prisma.SelectSubset<T, PlugCementUpsertArgs<ExtArgs>>): Prisma.Prisma__PlugCementClient<runtime.Types.Result.GetResult<Prisma.$PlugCementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PlugCements.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlugCementCountArgs} args - Arguments to filter PlugCements to count.
   * @example
   * // Count the number of PlugCements
   * const count = await prisma.plugCement.count({
   *   where: {
   *     // ... the filter for the PlugCements we want to count
   *   }
   * })
  **/
  count<T extends PlugCementCountArgs>(
    args?: Prisma.Subset<T, PlugCementCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PlugCementCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PlugCement.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlugCementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PlugCementAggregateArgs>(args: Prisma.Subset<T, PlugCementAggregateArgs>): Prisma.PrismaPromise<GetPlugCementAggregateType<T>>

  /**
   * Group by PlugCement.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlugCementGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PlugCementGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PlugCementGroupByArgs['orderBy'] }
      : { orderBy?: PlugCementGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PlugCementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlugCementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PlugCement model
 */
readonly fields: PlugCementFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PlugCement.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PlugCementClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  plugCementEnum<T extends Prisma.PlugCementEnumDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PlugCementEnumDefaultArgs<ExtArgs>>): Prisma.Prisma__PlugCementEnumClient<runtime.Types.Result.GetResult<Prisma.$PlugCementEnumPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  plugSchedule<T extends Prisma.PlugScheduleDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PlugScheduleDefaultArgs<ExtArgs>>): Prisma.Prisma__PlugScheduleClient<runtime.Types.Result.GetResult<Prisma.$PlugSchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PlugCement model
 */
export interface PlugCementFieldRefs {
  readonly id: Prisma.FieldRef<"PlugCement", 'String'>
  readonly plugScheduleId: Prisma.FieldRef<"PlugCement", 'String'>
  readonly cementEnumType: Prisma.FieldRef<"PlugCement", 'String'>
  readonly bbl: Prisma.FieldRef<"PlugCement", 'Float'>
  readonly sacks: Prisma.FieldRef<"PlugCement", 'Float'>
  readonly yield: Prisma.FieldRef<"PlugCement", 'Float'>
  readonly excessPercent: Prisma.FieldRef<"PlugCement", 'Float'>
}
    

// Custom InputTypes
/**
 * PlugCement findUnique
 */
export type PlugCementFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCement
   */
  select?: Prisma.PlugCementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCement
   */
  omit?: Prisma.PlugCementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlugCementInclude<ExtArgs> | null
  /**
   * Filter, which PlugCement to fetch.
   */
  where: Prisma.PlugCementWhereUniqueInput
}

/**
 * PlugCement findUniqueOrThrow
 */
export type PlugCementFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCement
   */
  select?: Prisma.PlugCementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCement
   */
  omit?: Prisma.PlugCementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlugCementInclude<ExtArgs> | null
  /**
   * Filter, which PlugCement to fetch.
   */
  where: Prisma.PlugCementWhereUniqueInput
}

/**
 * PlugCement findFirst
 */
export type PlugCementFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCement
   */
  select?: Prisma.PlugCementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCement
   */
  omit?: Prisma.PlugCementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlugCementInclude<ExtArgs> | null
  /**
   * Filter, which PlugCement to fetch.
   */
  where?: Prisma.PlugCementWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlugCements to fetch.
   */
  orderBy?: Prisma.PlugCementOrderByWithRelationInput | Prisma.PlugCementOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PlugCements.
   */
  cursor?: Prisma.PlugCementWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlugCements from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlugCements.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PlugCements.
   */
  distinct?: Prisma.PlugCementScalarFieldEnum | Prisma.PlugCementScalarFieldEnum[]
}

/**
 * PlugCement findFirstOrThrow
 */
export type PlugCementFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCement
   */
  select?: Prisma.PlugCementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCement
   */
  omit?: Prisma.PlugCementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlugCementInclude<ExtArgs> | null
  /**
   * Filter, which PlugCement to fetch.
   */
  where?: Prisma.PlugCementWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlugCements to fetch.
   */
  orderBy?: Prisma.PlugCementOrderByWithRelationInput | Prisma.PlugCementOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PlugCements.
   */
  cursor?: Prisma.PlugCementWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlugCements from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlugCements.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PlugCements.
   */
  distinct?: Prisma.PlugCementScalarFieldEnum | Prisma.PlugCementScalarFieldEnum[]
}

/**
 * PlugCement findMany
 */
export type PlugCementFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCement
   */
  select?: Prisma.PlugCementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCement
   */
  omit?: Prisma.PlugCementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlugCementInclude<ExtArgs> | null
  /**
   * Filter, which PlugCements to fetch.
   */
  where?: Prisma.PlugCementWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlugCements to fetch.
   */
  orderBy?: Prisma.PlugCementOrderByWithRelationInput | Prisma.PlugCementOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PlugCements.
   */
  cursor?: Prisma.PlugCementWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlugCements from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlugCements.
   */
  skip?: number
  distinct?: Prisma.PlugCementScalarFieldEnum | Prisma.PlugCementScalarFieldEnum[]
}

/**
 * PlugCement create
 */
export type PlugCementCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCement
   */
  select?: Prisma.PlugCementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCement
   */
  omit?: Prisma.PlugCementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlugCementInclude<ExtArgs> | null
  /**
   * The data needed to create a PlugCement.
   */
  data: Prisma.XOR<Prisma.PlugCementCreateInput, Prisma.PlugCementUncheckedCreateInput>
}

/**
 * PlugCement createMany
 */
export type PlugCementCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PlugCements.
   */
  data: Prisma.PlugCementCreateManyInput | Prisma.PlugCementCreateManyInput[]
}

/**
 * PlugCement createManyAndReturn
 */
export type PlugCementCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCement
   */
  select?: Prisma.PlugCementSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCement
   */
  omit?: Prisma.PlugCementOmit<ExtArgs> | null
  /**
   * The data used to create many PlugCements.
   */
  data: Prisma.PlugCementCreateManyInput | Prisma.PlugCementCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlugCementIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PlugCement update
 */
export type PlugCementUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCement
   */
  select?: Prisma.PlugCementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCement
   */
  omit?: Prisma.PlugCementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlugCementInclude<ExtArgs> | null
  /**
   * The data needed to update a PlugCement.
   */
  data: Prisma.XOR<Prisma.PlugCementUpdateInput, Prisma.PlugCementUncheckedUpdateInput>
  /**
   * Choose, which PlugCement to update.
   */
  where: Prisma.PlugCementWhereUniqueInput
}

/**
 * PlugCement updateMany
 */
export type PlugCementUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PlugCements.
   */
  data: Prisma.XOR<Prisma.PlugCementUpdateManyMutationInput, Prisma.PlugCementUncheckedUpdateManyInput>
  /**
   * Filter which PlugCements to update
   */
  where?: Prisma.PlugCementWhereInput
  /**
   * Limit how many PlugCements to update.
   */
  limit?: number
}

/**
 * PlugCement updateManyAndReturn
 */
export type PlugCementUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCement
   */
  select?: Prisma.PlugCementSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCement
   */
  omit?: Prisma.PlugCementOmit<ExtArgs> | null
  /**
   * The data used to update PlugCements.
   */
  data: Prisma.XOR<Prisma.PlugCementUpdateManyMutationInput, Prisma.PlugCementUncheckedUpdateManyInput>
  /**
   * Filter which PlugCements to update
   */
  where?: Prisma.PlugCementWhereInput
  /**
   * Limit how many PlugCements to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlugCementIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PlugCement upsert
 */
export type PlugCementUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCement
   */
  select?: Prisma.PlugCementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCement
   */
  omit?: Prisma.PlugCementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlugCementInclude<ExtArgs> | null
  /**
   * The filter to search for the PlugCement to update in case it exists.
   */
  where: Prisma.PlugCementWhereUniqueInput
  /**
   * In case the PlugCement found by the `where` argument doesn't exist, create a new PlugCement with this data.
   */
  create: Prisma.XOR<Prisma.PlugCementCreateInput, Prisma.PlugCementUncheckedCreateInput>
  /**
   * In case the PlugCement was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PlugCementUpdateInput, Prisma.PlugCementUncheckedUpdateInput>
}

/**
 * PlugCement delete
 */
export type PlugCementDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCement
   */
  select?: Prisma.PlugCementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCement
   */
  omit?: Prisma.PlugCementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlugCementInclude<ExtArgs> | null
  /**
   * Filter which PlugCement to delete.
   */
  where: Prisma.PlugCementWhereUniqueInput
}

/**
 * PlugCement deleteMany
 */
export type PlugCementDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PlugCements to delete
   */
  where?: Prisma.PlugCementWhereInput
  /**
   * Limit how many PlugCements to delete.
   */
  limit?: number
}

/**
 * PlugCement without action
 */
export type PlugCementDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlugCement
   */
  select?: Prisma.PlugCementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlugCement
   */
  omit?: Prisma.PlugCementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlugCementInclude<ExtArgs> | null
}
