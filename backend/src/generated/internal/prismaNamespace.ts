
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
export const prismaVersion: PrismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  Casing: 'Casing',
  CasingEnum: 'CasingEnum',
  Geology: 'Geology',
  Location: 'Location',
  MechanicalIsolation: 'MechanicalIsolation',
  MechanicalIsolationEnum: 'MechanicalIsolationEnum',
  Operator: 'Operator',
  OperatorContact: 'OperatorContact',
  Perforation: 'Perforation',
  PlugCement: 'PlugCement',
  PlugCementEnum: 'PlugCementEnum',
  PlugSchedule: 'PlugSchedule',
  Rods: 'Rods',
  RodEnum: 'RodEnum',
  Tubing: 'Tubing',
  TubingEnum: 'TubingEnum',
  User: 'User',
  UserRole: 'UserRole',
  Well: 'Well',
  WellInfo: 'WellInfo'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<GlobalOmitOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], GlobalOmitOptions>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "casing" | "casingEnum" | "geology" | "location" | "mechanicalIsolation" | "mechanicalIsolationEnum" | "operator" | "operatorContact" | "perforation" | "plugCement" | "plugCementEnum" | "plugSchedule" | "rods" | "rodEnum" | "tubing" | "tubingEnum" | "user" | "userRole" | "well" | "wellInfo"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    Casing: {
      payload: Prisma.$CasingPayload<ExtArgs>
      fields: Prisma.CasingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CasingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CasingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CasingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CasingPayload>
        }
        findFirst: {
          args: Prisma.CasingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CasingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CasingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CasingPayload>
        }
        findMany: {
          args: Prisma.CasingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CasingPayload>[]
        }
        create: {
          args: Prisma.CasingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CasingPayload>
        }
        createMany: {
          args: Prisma.CasingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CasingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CasingPayload>[]
        }
        delete: {
          args: Prisma.CasingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CasingPayload>
        }
        update: {
          args: Prisma.CasingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CasingPayload>
        }
        deleteMany: {
          args: Prisma.CasingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CasingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CasingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CasingPayload>[]
        }
        upsert: {
          args: Prisma.CasingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CasingPayload>
        }
        aggregate: {
          args: Prisma.CasingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCasing>
        }
        groupBy: {
          args: Prisma.CasingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CasingGroupByOutputType>[]
        }
        count: {
          args: Prisma.CasingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CasingCountAggregateOutputType> | number
        }
      }
    }
    CasingEnum: {
      payload: Prisma.$CasingEnumPayload<ExtArgs>
      fields: Prisma.CasingEnumFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CasingEnumFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CasingEnumPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CasingEnumFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CasingEnumPayload>
        }
        findFirst: {
          args: Prisma.CasingEnumFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CasingEnumPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CasingEnumFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CasingEnumPayload>
        }
        findMany: {
          args: Prisma.CasingEnumFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CasingEnumPayload>[]
        }
        create: {
          args: Prisma.CasingEnumCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CasingEnumPayload>
        }
        createMany: {
          args: Prisma.CasingEnumCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CasingEnumCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CasingEnumPayload>[]
        }
        delete: {
          args: Prisma.CasingEnumDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CasingEnumPayload>
        }
        update: {
          args: Prisma.CasingEnumUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CasingEnumPayload>
        }
        deleteMany: {
          args: Prisma.CasingEnumDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CasingEnumUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CasingEnumUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CasingEnumPayload>[]
        }
        upsert: {
          args: Prisma.CasingEnumUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CasingEnumPayload>
        }
        aggregate: {
          args: Prisma.CasingEnumAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCasingEnum>
        }
        groupBy: {
          args: Prisma.CasingEnumGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CasingEnumGroupByOutputType>[]
        }
        count: {
          args: Prisma.CasingEnumCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CasingEnumCountAggregateOutputType> | number
        }
      }
    }
    Geology: {
      payload: Prisma.$GeologyPayload<ExtArgs>
      fields: Prisma.GeologyFieldRefs
      operations: {
        findUnique: {
          args: Prisma.GeologyFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GeologyPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.GeologyFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GeologyPayload>
        }
        findFirst: {
          args: Prisma.GeologyFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GeologyPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.GeologyFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GeologyPayload>
        }
        findMany: {
          args: Prisma.GeologyFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GeologyPayload>[]
        }
        create: {
          args: Prisma.GeologyCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GeologyPayload>
        }
        createMany: {
          args: Prisma.GeologyCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.GeologyCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GeologyPayload>[]
        }
        delete: {
          args: Prisma.GeologyDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GeologyPayload>
        }
        update: {
          args: Prisma.GeologyUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GeologyPayload>
        }
        deleteMany: {
          args: Prisma.GeologyDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.GeologyUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.GeologyUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GeologyPayload>[]
        }
        upsert: {
          args: Prisma.GeologyUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GeologyPayload>
        }
        aggregate: {
          args: Prisma.GeologyAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateGeology>
        }
        groupBy: {
          args: Prisma.GeologyGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.GeologyGroupByOutputType>[]
        }
        count: {
          args: Prisma.GeologyCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.GeologyCountAggregateOutputType> | number
        }
      }
    }
    Location: {
      payload: Prisma.$LocationPayload<ExtArgs>
      fields: Prisma.LocationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.LocationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LocationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.LocationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LocationPayload>
        }
        findFirst: {
          args: Prisma.LocationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LocationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.LocationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LocationPayload>
        }
        findMany: {
          args: Prisma.LocationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LocationPayload>[]
        }
        create: {
          args: Prisma.LocationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LocationPayload>
        }
        createMany: {
          args: Prisma.LocationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.LocationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LocationPayload>[]
        }
        delete: {
          args: Prisma.LocationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LocationPayload>
        }
        update: {
          args: Prisma.LocationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LocationPayload>
        }
        deleteMany: {
          args: Prisma.LocationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.LocationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.LocationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LocationPayload>[]
        }
        upsert: {
          args: Prisma.LocationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LocationPayload>
        }
        aggregate: {
          args: Prisma.LocationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLocation>
        }
        groupBy: {
          args: Prisma.LocationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LocationGroupByOutputType>[]
        }
        count: {
          args: Prisma.LocationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LocationCountAggregateOutputType> | number
        }
      }
    }
    MechanicalIsolation: {
      payload: Prisma.$MechanicalIsolationPayload<ExtArgs>
      fields: Prisma.MechanicalIsolationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MechanicalIsolationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MechanicalIsolationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MechanicalIsolationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MechanicalIsolationPayload>
        }
        findFirst: {
          args: Prisma.MechanicalIsolationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MechanicalIsolationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MechanicalIsolationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MechanicalIsolationPayload>
        }
        findMany: {
          args: Prisma.MechanicalIsolationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MechanicalIsolationPayload>[]
        }
        create: {
          args: Prisma.MechanicalIsolationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MechanicalIsolationPayload>
        }
        createMany: {
          args: Prisma.MechanicalIsolationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MechanicalIsolationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MechanicalIsolationPayload>[]
        }
        delete: {
          args: Prisma.MechanicalIsolationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MechanicalIsolationPayload>
        }
        update: {
          args: Prisma.MechanicalIsolationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MechanicalIsolationPayload>
        }
        deleteMany: {
          args: Prisma.MechanicalIsolationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MechanicalIsolationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MechanicalIsolationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MechanicalIsolationPayload>[]
        }
        upsert: {
          args: Prisma.MechanicalIsolationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MechanicalIsolationPayload>
        }
        aggregate: {
          args: Prisma.MechanicalIsolationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMechanicalIsolation>
        }
        groupBy: {
          args: Prisma.MechanicalIsolationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MechanicalIsolationGroupByOutputType>[]
        }
        count: {
          args: Prisma.MechanicalIsolationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MechanicalIsolationCountAggregateOutputType> | number
        }
      }
    }
    MechanicalIsolationEnum: {
      payload: Prisma.$MechanicalIsolationEnumPayload<ExtArgs>
      fields: Prisma.MechanicalIsolationEnumFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MechanicalIsolationEnumFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MechanicalIsolationEnumPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MechanicalIsolationEnumFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MechanicalIsolationEnumPayload>
        }
        findFirst: {
          args: Prisma.MechanicalIsolationEnumFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MechanicalIsolationEnumPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MechanicalIsolationEnumFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MechanicalIsolationEnumPayload>
        }
        findMany: {
          args: Prisma.MechanicalIsolationEnumFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MechanicalIsolationEnumPayload>[]
        }
        create: {
          args: Prisma.MechanicalIsolationEnumCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MechanicalIsolationEnumPayload>
        }
        createMany: {
          args: Prisma.MechanicalIsolationEnumCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MechanicalIsolationEnumCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MechanicalIsolationEnumPayload>[]
        }
        delete: {
          args: Prisma.MechanicalIsolationEnumDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MechanicalIsolationEnumPayload>
        }
        update: {
          args: Prisma.MechanicalIsolationEnumUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MechanicalIsolationEnumPayload>
        }
        deleteMany: {
          args: Prisma.MechanicalIsolationEnumDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MechanicalIsolationEnumUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MechanicalIsolationEnumUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MechanicalIsolationEnumPayload>[]
        }
        upsert: {
          args: Prisma.MechanicalIsolationEnumUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MechanicalIsolationEnumPayload>
        }
        aggregate: {
          args: Prisma.MechanicalIsolationEnumAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMechanicalIsolationEnum>
        }
        groupBy: {
          args: Prisma.MechanicalIsolationEnumGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MechanicalIsolationEnumGroupByOutputType>[]
        }
        count: {
          args: Prisma.MechanicalIsolationEnumCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MechanicalIsolationEnumCountAggregateOutputType> | number
        }
      }
    }
    Operator: {
      payload: Prisma.$OperatorPayload<ExtArgs>
      fields: Prisma.OperatorFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OperatorFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperatorPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OperatorFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperatorPayload>
        }
        findFirst: {
          args: Prisma.OperatorFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperatorPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OperatorFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperatorPayload>
        }
        findMany: {
          args: Prisma.OperatorFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperatorPayload>[]
        }
        create: {
          args: Prisma.OperatorCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperatorPayload>
        }
        createMany: {
          args: Prisma.OperatorCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OperatorCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperatorPayload>[]
        }
        delete: {
          args: Prisma.OperatorDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperatorPayload>
        }
        update: {
          args: Prisma.OperatorUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperatorPayload>
        }
        deleteMany: {
          args: Prisma.OperatorDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OperatorUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OperatorUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperatorPayload>[]
        }
        upsert: {
          args: Prisma.OperatorUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperatorPayload>
        }
        aggregate: {
          args: Prisma.OperatorAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOperator>
        }
        groupBy: {
          args: Prisma.OperatorGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OperatorGroupByOutputType>[]
        }
        count: {
          args: Prisma.OperatorCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OperatorCountAggregateOutputType> | number
        }
      }
    }
    OperatorContact: {
      payload: Prisma.$OperatorContactPayload<ExtArgs>
      fields: Prisma.OperatorContactFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OperatorContactFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperatorContactPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OperatorContactFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperatorContactPayload>
        }
        findFirst: {
          args: Prisma.OperatorContactFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperatorContactPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OperatorContactFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperatorContactPayload>
        }
        findMany: {
          args: Prisma.OperatorContactFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperatorContactPayload>[]
        }
        create: {
          args: Prisma.OperatorContactCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperatorContactPayload>
        }
        createMany: {
          args: Prisma.OperatorContactCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OperatorContactCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperatorContactPayload>[]
        }
        delete: {
          args: Prisma.OperatorContactDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperatorContactPayload>
        }
        update: {
          args: Prisma.OperatorContactUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperatorContactPayload>
        }
        deleteMany: {
          args: Prisma.OperatorContactDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OperatorContactUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OperatorContactUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperatorContactPayload>[]
        }
        upsert: {
          args: Prisma.OperatorContactUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperatorContactPayload>
        }
        aggregate: {
          args: Prisma.OperatorContactAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOperatorContact>
        }
        groupBy: {
          args: Prisma.OperatorContactGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OperatorContactGroupByOutputType>[]
        }
        count: {
          args: Prisma.OperatorContactCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OperatorContactCountAggregateOutputType> | number
        }
      }
    }
    Perforation: {
      payload: Prisma.$PerforationPayload<ExtArgs>
      fields: Prisma.PerforationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PerforationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PerforationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PerforationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PerforationPayload>
        }
        findFirst: {
          args: Prisma.PerforationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PerforationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PerforationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PerforationPayload>
        }
        findMany: {
          args: Prisma.PerforationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PerforationPayload>[]
        }
        create: {
          args: Prisma.PerforationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PerforationPayload>
        }
        createMany: {
          args: Prisma.PerforationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PerforationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PerforationPayload>[]
        }
        delete: {
          args: Prisma.PerforationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PerforationPayload>
        }
        update: {
          args: Prisma.PerforationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PerforationPayload>
        }
        deleteMany: {
          args: Prisma.PerforationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PerforationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PerforationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PerforationPayload>[]
        }
        upsert: {
          args: Prisma.PerforationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PerforationPayload>
        }
        aggregate: {
          args: Prisma.PerforationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePerforation>
        }
        groupBy: {
          args: Prisma.PerforationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PerforationGroupByOutputType>[]
        }
        count: {
          args: Prisma.PerforationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PerforationCountAggregateOutputType> | number
        }
      }
    }
    PlugCement: {
      payload: Prisma.$PlugCementPayload<ExtArgs>
      fields: Prisma.PlugCementFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PlugCementFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugCementPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PlugCementFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugCementPayload>
        }
        findFirst: {
          args: Prisma.PlugCementFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugCementPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PlugCementFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugCementPayload>
        }
        findMany: {
          args: Prisma.PlugCementFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugCementPayload>[]
        }
        create: {
          args: Prisma.PlugCementCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugCementPayload>
        }
        createMany: {
          args: Prisma.PlugCementCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PlugCementCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugCementPayload>[]
        }
        delete: {
          args: Prisma.PlugCementDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugCementPayload>
        }
        update: {
          args: Prisma.PlugCementUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugCementPayload>
        }
        deleteMany: {
          args: Prisma.PlugCementDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PlugCementUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PlugCementUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugCementPayload>[]
        }
        upsert: {
          args: Prisma.PlugCementUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugCementPayload>
        }
        aggregate: {
          args: Prisma.PlugCementAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePlugCement>
        }
        groupBy: {
          args: Prisma.PlugCementGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PlugCementGroupByOutputType>[]
        }
        count: {
          args: Prisma.PlugCementCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PlugCementCountAggregateOutputType> | number
        }
      }
    }
    PlugCementEnum: {
      payload: Prisma.$PlugCementEnumPayload<ExtArgs>
      fields: Prisma.PlugCementEnumFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PlugCementEnumFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugCementEnumPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PlugCementEnumFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugCementEnumPayload>
        }
        findFirst: {
          args: Prisma.PlugCementEnumFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugCementEnumPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PlugCementEnumFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugCementEnumPayload>
        }
        findMany: {
          args: Prisma.PlugCementEnumFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugCementEnumPayload>[]
        }
        create: {
          args: Prisma.PlugCementEnumCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugCementEnumPayload>
        }
        createMany: {
          args: Prisma.PlugCementEnumCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PlugCementEnumCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugCementEnumPayload>[]
        }
        delete: {
          args: Prisma.PlugCementEnumDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugCementEnumPayload>
        }
        update: {
          args: Prisma.PlugCementEnumUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugCementEnumPayload>
        }
        deleteMany: {
          args: Prisma.PlugCementEnumDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PlugCementEnumUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PlugCementEnumUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugCementEnumPayload>[]
        }
        upsert: {
          args: Prisma.PlugCementEnumUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugCementEnumPayload>
        }
        aggregate: {
          args: Prisma.PlugCementEnumAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePlugCementEnum>
        }
        groupBy: {
          args: Prisma.PlugCementEnumGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PlugCementEnumGroupByOutputType>[]
        }
        count: {
          args: Prisma.PlugCementEnumCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PlugCementEnumCountAggregateOutputType> | number
        }
      }
    }
    PlugSchedule: {
      payload: Prisma.$PlugSchedulePayload<ExtArgs>
      fields: Prisma.PlugScheduleFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PlugScheduleFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugSchedulePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PlugScheduleFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugSchedulePayload>
        }
        findFirst: {
          args: Prisma.PlugScheduleFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugSchedulePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PlugScheduleFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugSchedulePayload>
        }
        findMany: {
          args: Prisma.PlugScheduleFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugSchedulePayload>[]
        }
        create: {
          args: Prisma.PlugScheduleCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugSchedulePayload>
        }
        createMany: {
          args: Prisma.PlugScheduleCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PlugScheduleCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugSchedulePayload>[]
        }
        delete: {
          args: Prisma.PlugScheduleDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugSchedulePayload>
        }
        update: {
          args: Prisma.PlugScheduleUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugSchedulePayload>
        }
        deleteMany: {
          args: Prisma.PlugScheduleDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PlugScheduleUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PlugScheduleUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugSchedulePayload>[]
        }
        upsert: {
          args: Prisma.PlugScheduleUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlugSchedulePayload>
        }
        aggregate: {
          args: Prisma.PlugScheduleAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePlugSchedule>
        }
        groupBy: {
          args: Prisma.PlugScheduleGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PlugScheduleGroupByOutputType>[]
        }
        count: {
          args: Prisma.PlugScheduleCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PlugScheduleCountAggregateOutputType> | number
        }
      }
    }
    Rods: {
      payload: Prisma.$RodsPayload<ExtArgs>
      fields: Prisma.RodsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.RodsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RodsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.RodsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RodsPayload>
        }
        findFirst: {
          args: Prisma.RodsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RodsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.RodsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RodsPayload>
        }
        findMany: {
          args: Prisma.RodsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RodsPayload>[]
        }
        create: {
          args: Prisma.RodsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RodsPayload>
        }
        createMany: {
          args: Prisma.RodsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.RodsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RodsPayload>[]
        }
        delete: {
          args: Prisma.RodsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RodsPayload>
        }
        update: {
          args: Prisma.RodsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RodsPayload>
        }
        deleteMany: {
          args: Prisma.RodsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.RodsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.RodsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RodsPayload>[]
        }
        upsert: {
          args: Prisma.RodsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RodsPayload>
        }
        aggregate: {
          args: Prisma.RodsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateRods>
        }
        groupBy: {
          args: Prisma.RodsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RodsGroupByOutputType>[]
        }
        count: {
          args: Prisma.RodsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RodsCountAggregateOutputType> | number
        }
      }
    }
    RodEnum: {
      payload: Prisma.$RodEnumPayload<ExtArgs>
      fields: Prisma.RodEnumFieldRefs
      operations: {
        findUnique: {
          args: Prisma.RodEnumFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RodEnumPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.RodEnumFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RodEnumPayload>
        }
        findFirst: {
          args: Prisma.RodEnumFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RodEnumPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.RodEnumFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RodEnumPayload>
        }
        findMany: {
          args: Prisma.RodEnumFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RodEnumPayload>[]
        }
        create: {
          args: Prisma.RodEnumCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RodEnumPayload>
        }
        createMany: {
          args: Prisma.RodEnumCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.RodEnumCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RodEnumPayload>[]
        }
        delete: {
          args: Prisma.RodEnumDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RodEnumPayload>
        }
        update: {
          args: Prisma.RodEnumUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RodEnumPayload>
        }
        deleteMany: {
          args: Prisma.RodEnumDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.RodEnumUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.RodEnumUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RodEnumPayload>[]
        }
        upsert: {
          args: Prisma.RodEnumUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RodEnumPayload>
        }
        aggregate: {
          args: Prisma.RodEnumAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateRodEnum>
        }
        groupBy: {
          args: Prisma.RodEnumGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RodEnumGroupByOutputType>[]
        }
        count: {
          args: Prisma.RodEnumCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RodEnumCountAggregateOutputType> | number
        }
      }
    }
    Tubing: {
      payload: Prisma.$TubingPayload<ExtArgs>
      fields: Prisma.TubingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TubingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TubingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TubingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TubingPayload>
        }
        findFirst: {
          args: Prisma.TubingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TubingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TubingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TubingPayload>
        }
        findMany: {
          args: Prisma.TubingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TubingPayload>[]
        }
        create: {
          args: Prisma.TubingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TubingPayload>
        }
        createMany: {
          args: Prisma.TubingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TubingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TubingPayload>[]
        }
        delete: {
          args: Prisma.TubingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TubingPayload>
        }
        update: {
          args: Prisma.TubingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TubingPayload>
        }
        deleteMany: {
          args: Prisma.TubingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TubingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TubingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TubingPayload>[]
        }
        upsert: {
          args: Prisma.TubingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TubingPayload>
        }
        aggregate: {
          args: Prisma.TubingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTubing>
        }
        groupBy: {
          args: Prisma.TubingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TubingGroupByOutputType>[]
        }
        count: {
          args: Prisma.TubingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TubingCountAggregateOutputType> | number
        }
      }
    }
    TubingEnum: {
      payload: Prisma.$TubingEnumPayload<ExtArgs>
      fields: Prisma.TubingEnumFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TubingEnumFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TubingEnumPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TubingEnumFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TubingEnumPayload>
        }
        findFirst: {
          args: Prisma.TubingEnumFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TubingEnumPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TubingEnumFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TubingEnumPayload>
        }
        findMany: {
          args: Prisma.TubingEnumFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TubingEnumPayload>[]
        }
        create: {
          args: Prisma.TubingEnumCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TubingEnumPayload>
        }
        createMany: {
          args: Prisma.TubingEnumCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TubingEnumCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TubingEnumPayload>[]
        }
        delete: {
          args: Prisma.TubingEnumDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TubingEnumPayload>
        }
        update: {
          args: Prisma.TubingEnumUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TubingEnumPayload>
        }
        deleteMany: {
          args: Prisma.TubingEnumDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TubingEnumUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TubingEnumUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TubingEnumPayload>[]
        }
        upsert: {
          args: Prisma.TubingEnumUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TubingEnumPayload>
        }
        aggregate: {
          args: Prisma.TubingEnumAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTubingEnum>
        }
        groupBy: {
          args: Prisma.TubingEnumGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TubingEnumGroupByOutputType>[]
        }
        count: {
          args: Prisma.TubingEnumCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TubingEnumCountAggregateOutputType> | number
        }
      }
    }
    User: {
      payload: Prisma.$UserPayload<ExtArgs>
      fields: Prisma.UserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>
        }
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number
        }
      }
    }
    UserRole: {
      payload: Prisma.$UserRolePayload<ExtArgs>
      fields: Prisma.UserRoleFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserRoleFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserRoleFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        findFirst: {
          args: Prisma.UserRoleFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserRoleFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        findMany: {
          args: Prisma.UserRoleFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>[]
        }
        create: {
          args: Prisma.UserRoleCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        createMany: {
          args: Prisma.UserRoleCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserRoleCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>[]
        }
        delete: {
          args: Prisma.UserRoleDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        update: {
          args: Prisma.UserRoleUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        deleteMany: {
          args: Prisma.UserRoleDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserRoleUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserRoleUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>[]
        }
        upsert: {
          args: Prisma.UserRoleUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        aggregate: {
          args: Prisma.UserRoleAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUserRole>
        }
        groupBy: {
          args: Prisma.UserRoleGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserRoleGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserRoleCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserRoleCountAggregateOutputType> | number
        }
      }
    }
    Well: {
      payload: Prisma.$WellPayload<ExtArgs>
      fields: Prisma.WellFieldRefs
      operations: {
        findUnique: {
          args: Prisma.WellFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WellPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.WellFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WellPayload>
        }
        findFirst: {
          args: Prisma.WellFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WellPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.WellFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WellPayload>
        }
        findMany: {
          args: Prisma.WellFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WellPayload>[]
        }
        create: {
          args: Prisma.WellCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WellPayload>
        }
        createMany: {
          args: Prisma.WellCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.WellCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WellPayload>[]
        }
        delete: {
          args: Prisma.WellDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WellPayload>
        }
        update: {
          args: Prisma.WellUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WellPayload>
        }
        deleteMany: {
          args: Prisma.WellDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.WellUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.WellUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WellPayload>[]
        }
        upsert: {
          args: Prisma.WellUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WellPayload>
        }
        aggregate: {
          args: Prisma.WellAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWell>
        }
        groupBy: {
          args: Prisma.WellGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WellGroupByOutputType>[]
        }
        count: {
          args: Prisma.WellCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WellCountAggregateOutputType> | number
        }
      }
    }
    WellInfo: {
      payload: Prisma.$WellInfoPayload<ExtArgs>
      fields: Prisma.WellInfoFieldRefs
      operations: {
        findUnique: {
          args: Prisma.WellInfoFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WellInfoPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.WellInfoFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WellInfoPayload>
        }
        findFirst: {
          args: Prisma.WellInfoFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WellInfoPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.WellInfoFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WellInfoPayload>
        }
        findMany: {
          args: Prisma.WellInfoFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WellInfoPayload>[]
        }
        create: {
          args: Prisma.WellInfoCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WellInfoPayload>
        }
        createMany: {
          args: Prisma.WellInfoCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.WellInfoCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WellInfoPayload>[]
        }
        delete: {
          args: Prisma.WellInfoDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WellInfoPayload>
        }
        update: {
          args: Prisma.WellInfoUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WellInfoPayload>
        }
        deleteMany: {
          args: Prisma.WellInfoDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.WellInfoUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.WellInfoUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WellInfoPayload>[]
        }
        upsert: {
          args: Prisma.WellInfoUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WellInfoPayload>
        }
        aggregate: {
          args: Prisma.WellInfoAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWellInfo>
        }
        groupBy: {
          args: Prisma.WellInfoGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WellInfoGroupByOutputType>[]
        }
        count: {
          args: Prisma.WellInfoCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WellInfoCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const CasingScalarFieldEnum = {
  id: 'id',
  api: 'api',
  casingEnumId: 'casingEnumId',
  topDepth: 'topDepth',
  bottomDepth: 'bottomDepth',
  joints: 'joints',
  centralizer: 'centralizer',
  shortJtTop: 'shortJtTop'
} as const

export type CasingScalarFieldEnum = (typeof CasingScalarFieldEnum)[keyof typeof CasingScalarFieldEnum]


export const CasingEnumScalarFieldEnum = {
  id: 'id',
  internalDiameter: 'internalDiameter',
  externalDiameter: 'externalDiameter',
  tocDepth: 'tocDepth',
  weight: 'weight',
  grade: 'grade'
} as const

export type CasingEnumScalarFieldEnum = (typeof CasingEnumScalarFieldEnum)[keyof typeof CasingEnumScalarFieldEnum]


export const GeologyScalarFieldEnum = {
  id: 'id',
  sandName: 'sandName',
  formationCommonName: 'formationCommonName',
  usableWaterStrata: 'usableWaterStrata',
  shallowestProducingZone: 'shallowestProducingZone',
  saltwaterDisposalZone: 'saltwaterDisposalZone'
} as const

export type GeologyScalarFieldEnum = (typeof GeologyScalarFieldEnum)[keyof typeof GeologyScalarFieldEnum]


export const LocationScalarFieldEnum = {
  id: 'id',
  api: 'api',
  county: 'county',
  latitude: 'latitude',
  longitude: 'longitude',
  sectionNo: 'sectionNo',
  blockNo: 'blockNo',
  survey: 'survey',
  abstractNo: 'abstractNo',
  distanceFromTown: 'distanceFromTown'
} as const

export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


export const MechanicalIsolationScalarFieldEnum = {
  id: 'id',
  api: 'api',
  mechanicalIsolationEnumId: 'mechanicalIsolationEnumId',
  topDepth: 'topDepth',
  bottomDepth: 'bottomDepth',
  dateSet: 'dateSet'
} as const

export type MechanicalIsolationScalarFieldEnum = (typeof MechanicalIsolationScalarFieldEnum)[keyof typeof MechanicalIsolationScalarFieldEnum]


export const MechanicalIsolationEnumScalarFieldEnum = {
  id: 'id',
  type: 'type'
} as const

export type MechanicalIsolationEnumScalarFieldEnum = (typeof MechanicalIsolationEnumScalarFieldEnum)[keyof typeof MechanicalIsolationEnumScalarFieldEnum]


export const OperatorScalarFieldEnum = {
  id: 'id',
  operatorNo: 'operatorNo',
  name: 'name',
  rrcOperatorNo: 'rrcOperatorNo'
} as const

export type OperatorScalarFieldEnum = (typeof OperatorScalarFieldEnum)[keyof typeof OperatorScalarFieldEnum]


export const OperatorContactScalarFieldEnum = {
  id: 'id',
  operatorId: 'operatorId',
  name: 'name',
  phoneNumber: 'phoneNumber',
  email: 'email'
} as const

export type OperatorContactScalarFieldEnum = (typeof OperatorContactScalarFieldEnum)[keyof typeof OperatorContactScalarFieldEnum]


export const PerforationScalarFieldEnum = {
  id: 'id',
  api: 'api',
  stage: 'stage',
  formation: 'formation',
  topDepth: 'topDepth',
  bottomDepth: 'bottomDepth',
  datePerforated: 'datePerforated',
  notes: 'notes'
} as const

export type PerforationScalarFieldEnum = (typeof PerforationScalarFieldEnum)[keyof typeof PerforationScalarFieldEnum]


export const PlugCementScalarFieldEnum = {
  id: 'id',
  plugScheduleId: 'plugScheduleId',
  cementEnumType: 'cementEnumType',
  bbl: 'bbl',
  sacks: 'sacks',
  yield: 'yield',
  excessPercent: 'excessPercent'
} as const

export type PlugCementScalarFieldEnum = (typeof PlugCementScalarFieldEnum)[keyof typeof PlugCementScalarFieldEnum]


export const PlugCementEnumScalarFieldEnum = {
  type: 'type'
} as const

export type PlugCementEnumScalarFieldEnum = (typeof PlugCementEnumScalarFieldEnum)[keyof typeof PlugCementEnumScalarFieldEnum]


export const PlugScheduleScalarFieldEnum = {
  id: 'id',
  api: 'api',
  mechanicalIsolationEnumId: 'mechanicalIsolationEnumId',
  summary: 'summary',
  topDepth: 'topDepth',
  bottomDepth: 'bottomDepth',
  dateSet: 'dateSet',
  description: 'description',
  wocDetails: 'wocDetails',
  notes: 'notes'
} as const

export type PlugScheduleScalarFieldEnum = (typeof PlugScheduleScalarFieldEnum)[keyof typeof PlugScheduleScalarFieldEnum]


export const RodsScalarFieldEnum = {
  id: 'id',
  api: 'api',
  joints: 'joints',
  rodEnumId: 'rodEnumId'
} as const

export type RodsScalarFieldEnum = (typeof RodsScalarFieldEnum)[keyof typeof RodsScalarFieldEnum]


export const RodEnumScalarFieldEnum = {
  id: 'id',
  type: 'type'
} as const

export type RodEnumScalarFieldEnum = (typeof RodEnumScalarFieldEnum)[keyof typeof RodEnumScalarFieldEnum]


export const TubingScalarFieldEnum = {
  id: 'id',
  api: 'api',
  tubingEnumId: 'tubingEnumId',
  depth: 'depth',
  joints: 'joints',
  size: 'size',
  grade: 'grade'
} as const

export type TubingScalarFieldEnum = (typeof TubingScalarFieldEnum)[keyof typeof TubingScalarFieldEnum]


export const TubingEnumScalarFieldEnum = {
  id: 'id',
  internalDiameter: 'internalDiameter',
  externalDiameter: 'externalDiameter',
  weight: 'weight',
  grade: 'grade',
  name: 'name'
} as const

export type TubingEnumScalarFieldEnum = (typeof TubingEnumScalarFieldEnum)[keyof typeof TubingEnumScalarFieldEnum]


export const UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  roleId: 'roleId',
  code: 'code',
  registeredAt: 'registeredAt',
  validatedAt: 'validatedAt'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const UserRoleScalarFieldEnum = {
  role: 'role'
} as const

export type UserRoleScalarFieldEnum = (typeof UserRoleScalarFieldEnum)[keyof typeof UserRoleScalarFieldEnum]


export const WellScalarFieldEnum = {
  api: 'api',
  operatorId: 'operatorId',
  wellInfoId: 'wellInfoId',
  locationId: 'locationId',
  geologyId: 'geologyId'
} as const

export type WellScalarFieldEnum = (typeof WellScalarFieldEnum)[keyof typeof WellScalarFieldEnum]


export const WellInfoScalarFieldEnum = {
  id: 'id',
  api: 'api',
  districtNo: 'districtNo',
  drillingPermitNo: 'drillingPermitNo',
  wellNo: 'wellNo',
  field: 'field',
  lease: 'lease',
  completionType: 'completionType',
  totalDepth: 'totalDepth',
  wellType: 'wellType'
} as const

export type WellInfoScalarFieldEnum = (typeof WellInfoScalarFieldEnum)[keyof typeof WellInfoScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]



/**
 * Field references
 */


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Shorthand for `emit: 'stdout'`
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events only
   * log: [
   *   { emit: 'event', level: 'query' },
   *   { emit: 'event', level: 'info' },
   *   { emit: 'event', level: 'warn' }
   *   { emit: 'event', level: 'error' }
   * ]
   * 
   * / Emit as events and log to stdout
   * og: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * 
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  casing?: Prisma.CasingOmit
  casingEnum?: Prisma.CasingEnumOmit
  geology?: Prisma.GeologyOmit
  location?: Prisma.LocationOmit
  mechanicalIsolation?: Prisma.MechanicalIsolationOmit
  mechanicalIsolationEnum?: Prisma.MechanicalIsolationEnumOmit
  operator?: Prisma.OperatorOmit
  operatorContact?: Prisma.OperatorContactOmit
  perforation?: Prisma.PerforationOmit
  plugCement?: Prisma.PlugCementOmit
  plugCementEnum?: Prisma.PlugCementEnumOmit
  plugSchedule?: Prisma.PlugScheduleOmit
  rods?: Prisma.RodsOmit
  rodEnum?: Prisma.RodEnumOmit
  tubing?: Prisma.TubingOmit
  tubingEnum?: Prisma.TubingEnumOmit
  user?: Prisma.UserOmit
  userRole?: Prisma.UserRoleOmit
  well?: Prisma.WellOmit
  wellInfo?: Prisma.WellInfoOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

export type GetLogType<T> = CheckIsLogLevel<
  T extends LogDefinition ? T['level'] : T
>;

export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
  ? GetLogType<T[number]>
  : never;

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw'
  | 'groupBy'

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

